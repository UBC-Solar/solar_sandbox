
cpu_load.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007274  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08007418  08007418  00008418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f8  080077f8  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  080077f8  080077f8  000087f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007800  08007800  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007800  08007800  00008800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007804  08007804  00008804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08007808  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004260  200001d8  080079e0  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004438  080079e0  00009438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014be8  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003098  00000000  00000000  0001ddf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00020e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd6  00000000  00000000  00022068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001820a  00000000  00000000  00022e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b41  00000000  00000000  0003b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098b99  00000000  00000000  0004fb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8722  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c0  00000000  00000000  000e8768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000ee128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073fc 	.word	0x080073fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080073fc 	.word	0x080073fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <taskSwitchedIn>:
    .head = 0,
    .tail = 0,
    .num_entries = 0,
};

void taskSwitchedIn(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
	TaskHandle_t idleTaskHandle = xTaskGetIdleTaskHandle();
 8000eae:	f002 ff25 	bl	8003cfc <xTaskGetIdleTaskHandle>
 8000eb2:	6078      	str	r0, [r7, #4]
	if(xTaskGetCurrentTaskHandle() == idleTaskHandle){
 8000eb4:	f003 f958 	bl	8004168 <xTaskGetCurrentTaskHandle>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d105      	bne.n	8000ecc <taskSwitchedIn+0x24>
		idle_switched_in = __HAL_TIM_GET_COUNTER(&htim10);
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <taskSwitchedIn+0x2c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <taskSwitchedIn+0x30>)
 8000eca:	801a      	strh	r2, [r3, #0]
	}
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200004a8 	.word	0x200004a8
 8000ed8:	200001f6 	.word	0x200001f6

08000edc <taskSwitchedOut>:

void taskSwitchedOut(){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
	TaskHandle_t idleTaskHandle = xTaskGetIdleTaskHandle();
 8000ee2:	f002 ff0b 	bl	8003cfc <xTaskGetIdleTaskHandle>
 8000ee6:	6078      	str	r0, [r7, #4]
	if(xTaskGetCurrentTaskHandle() == idleTaskHandle){
 8000ee8:	f003 f93e 	bl	8004168 <xTaskGetCurrentTaskHandle>
 8000eec:	4602      	mov	r2, r0
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d10c      	bne.n	8000f0e <taskSwitchedOut+0x32>
		idleRunTime += __HAL_TIM_GET_COUNTER(&htim10) - idle_switched_in;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <taskSwitchedOut+0x3c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efa:	4a08      	ldr	r2, [pc, #32]	@ (8000f1c <taskSwitchedOut+0x40>)
 8000efc:	8812      	ldrh	r2, [r2, #0]
 8000efe:	1a9b      	subs	r3, r3, r2
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <taskSwitchedOut+0x44>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <taskSwitchedOut+0x44>)
 8000f0c:	801a      	strh	r2, [r3, #0]
	}
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200004a8 	.word	0x200004a8
 8000f1c:	200001f6 	.word	0x200001f6
 8000f20:	200001f4 	.word	0x200001f4

08000f24 <resetWindow>:

void resetWindow(){
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
	idleRunTime = 0;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <resetWindow+0x20>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
	window_start_time = __HAL_TIM_GET_COUNTER(&htim10);
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <resetWindow+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <resetWindow+0x28>)
 8000f38:	801a      	strh	r2, [r3, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	200001f4 	.word	0x200001f4
 8000f48:	200004a8 	.word	0x200004a8
 8000f4c:	200001f8 	.word	0x200001f8

08000f50 <calculateCPULoad>:

float calculateCPULoad(uint16_t window_size_ms){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]

	total_run_time = __HAL_TIM_GET_COUNTER(&htim10) - window_start_time;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <calculateCPULoad+0x70>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <calculateCPULoad+0x74>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <calculateCPULoad+0x78>)
 8000f6c:	801a      	strh	r2, [r3, #0]

	if(total_run_time >= window_size_ms){
 8000f6e:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <calculateCPULoad+0x78>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	88fa      	ldrh	r2, [r7, #6]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d81b      	bhi.n	8000fb0 <calculateCPULoad+0x60>
		float cpu_load = (1.0f - ((float)idleRunTime / total_run_time)) * FLOAT_TO_PERCENTAGE;
 8000f78:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <calculateCPULoad+0x7c>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f84:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <calculateCPULoad+0x78>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000fd0 <calculateCPULoad+0x80>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	edc7 7a03 	vstr	s15, [r7, #12]
		resetWindow();
 8000fa8:	f7ff ffbc 	bl	8000f24 <resetWindow>

		return cpu_load;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	e000      	b.n	8000fb2 <calculateCPULoad+0x62>
	}
	else{
		return -1;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <calculateCPULoad+0x84>)
	}
}
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200004a8 	.word	0x200004a8
 8000fc4:	200001f8 	.word	0x200001f8
 8000fc8:	200001fa 	.word	0x200001fa
 8000fcc:	200001f4 	.word	0x200001f4
 8000fd0:	42c80000 	.word	0x42c80000
 8000fd4:	bf800000 	.word	0xbf800000

08000fd8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim10);
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <configureTimerForRunTimeStats+0x10>)
 8000fde:	f001 fbcd 	bl	800277c <HAL_TIM_Base_Start>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200004a8 	.word	0x200004a8

08000fec <getRunTimeCounterValue>:
extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
return ulHighFrequencyTimerTicks;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	@ (8001000 <getRunTimeCounterValue+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000584 	.word	0x20000584

08001004 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4a07      	ldr	r2, [pc, #28]	@ (8001030 <vApplicationGetIdleTaskMemory+0x2c>)
 8001014:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	4a06      	ldr	r2, [pc, #24]	@ (8001034 <vApplicationGetIdleTaskMemory+0x30>)
 800101a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2280      	movs	r2, #128	@ 0x80
 8001020:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200001fc 	.word	0x200001fc
 8001034:	200002a8 	.word	0x200002a8

08001038 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001040:	1d39      	adds	r1, r7, #4
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	2201      	movs	r2, #1
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <__io_putchar+0x20>)
 800104a:	f001 fe5b 	bl	8002d04 <HAL_UART_Transmit>
  return ch;
 800104e:	687b      	ldr	r3, [r7, #4]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200004f0 	.word	0x200004f0

0800105c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001062:	f000 fbb1 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001066:	f000 f825 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106a:	f000 f8cf 	bl	800120c <MX_GPIO_Init>
  MX_TIM10_Init();
 800106e:	f000 f87f 	bl	8001170 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8001072:	f000 f8a1 	bl	80011b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim10);
 8001076:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <main+0x4c>)
 8001078:	f001 fb80 	bl	800277c <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink01 */
  osThreadDef(blink01, StartBlink01, osPriorityNormal, 0, 128);
 800107c:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <main+0x50>)
 800107e:	1d3c      	adds	r4, r7, #4
 8001080:	461d      	mov	r5, r3
 8001082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001086:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800108a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink01Handle = osThreadCreate(osThread(blink01), NULL);
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fa11 	bl	80034ba <osThreadCreate>
 8001098:	4603      	mov	r3, r0
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <main+0x54>)
 800109c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800109e:	f002 fa05 	bl	80034ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a2:	bf00      	nop
 80010a4:	e7fd      	b.n	80010a2 <main+0x46>
 80010a6:	bf00      	nop
 80010a8:	200004a8 	.word	0x200004a8
 80010ac:	08007420 	.word	0x08007420
 80010b0:	20000538 	.word	0x20000538

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b094      	sub	sp, #80	@ 0x50
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	2230      	movs	r2, #48	@ 0x30
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 fa23 	bl	800550e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <SystemClock_Config+0xb4>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	4a21      	ldr	r2, [pc, #132]	@ (8001168 <SystemClock_Config+0xb4>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <SystemClock_Config+0xb4>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <SystemClock_Config+0xb8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a1b      	ldr	r2, [pc, #108]	@ (800116c <SystemClock_Config+0xb8>)
 80010fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b19      	ldr	r3, [pc, #100]	@ (800116c <SystemClock_Config+0xb8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001110:	2302      	movs	r3, #2
 8001112:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001114:	2301      	movs	r3, #1
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001118:	2310      	movs	r3, #16
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800111c:	2300      	movs	r3, #0
 800111e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f107 0320 	add.w	r3, r7, #32
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fe4f 	bl	8001dc8 <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001130:	f000 f8f4 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001134:	230f      	movs	r3, #15
 8001136:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f001 f8b2 	bl	80022b8 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800115a:	f000 f8df 	bl	800131c <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3750      	adds	r7, #80	@ 0x50
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40007000 	.word	0x40007000

08001170 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001174:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_TIM10_Init+0x40>)
 8001176:	4a0f      	ldr	r2, [pc, #60]	@ (80011b4 <MX_TIM10_Init+0x44>)
 8001178:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16000 - 1;
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <MX_TIM10_Init+0x40>)
 800117c:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001180:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <MX_TIM10_Init+0x40>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65536 - 1;
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_TIM10_Init+0x40>)
 800118a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800118e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <MX_TIM10_Init+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_TIM10_Init+0x40>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <MX_TIM10_Init+0x40>)
 800119e:	f001 fa9d 	bl	80026dc <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80011a8:	f000 f8b8 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200004a8 	.word	0x200004a8
 80011b4:	40014400 	.word	0x40014400

080011b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <MX_USART2_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f001 fd38 	bl	8002c64 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f000 f88f 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200004f0 	.word	0x200004f0
 8001208:	40004400 	.word	0x40004400

0800120c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <MX_GPIO_Init+0x7c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a17      	ldr	r2, [pc, #92]	@ (8001288 <MX_GPIO_Init+0x7c>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <MX_GPIO_Init+0x7c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_GPIO_Init+0x7c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a10      	ldr	r2, [pc, #64]	@ (8001288 <MX_GPIO_Init+0x7c>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_GPIO_Init+0x7c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2120      	movs	r1, #32
 800125e:	480b      	ldr	r0, [pc, #44]	@ (800128c <MX_GPIO_Init+0x80>)
 8001260:	f000 fd7e 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001264:	2320      	movs	r3, #32
 8001266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4619      	mov	r1, r3
 800127a:	4804      	ldr	r0, [pc, #16]	@ (800128c <MX_GPIO_Init+0x80>)
 800127c:	f000 fbec 	bl	8001a58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000

08001290 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void const * argument)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	  uint32_t startTestTime = __HAL_TIM_GET_COUNTER(&htim10);
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <StartBlink01+0x60>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129e:	613b      	str	r3, [r7, #16]
	  uint32_t testDuration = 10000; // 10 seconds
 80012a0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012a4:	60fb      	str	r3, [r7, #12]

	  /* Infinite loop */
	  for(;;)
	  {
	    // Run the task for 5 seconds (simulate busy time)
	    for (int i = 0; i < 5; i++) {
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	e00a      	b.n	80012c2 <StartBlink01+0x32>
	        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle LED
 80012ac:	2120      	movs	r1, #32
 80012ae:	4811      	ldr	r0, [pc, #68]	@ (80012f4 <StartBlink01+0x64>)
 80012b0:	f000 fd6f 	bl	8001d92 <HAL_GPIO_TogglePin>
	        HAL_Delay(1000);  // 1 second delay (task running)
 80012b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012b8:	f000 fac8 	bl	800184c <HAL_Delay>
	    for (int i = 0; i < 5; i++) {
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3301      	adds	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	ddf1      	ble.n	80012ac <StartBlink01+0x1c>
	    }

	    // Idle time for 5 seconds
	    osDelay(5000);
 80012c8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80012cc:	f002 f941 	bl	8003552 <osDelay>

	    // Calculate CPU load after the 10 second test period
	    if (__HAL_TIM_GET_COUNTER(&htim10) - startTestTime >= testDuration) {
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <StartBlink01+0x60>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8e2      	bhi.n	80012a6 <StartBlink01+0x16>
	        float cpuLoad = calculateCPULoad(3000);
 80012e0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80012e4:	f7ff fe34 	bl	8000f50 <calculateCPULoad>
 80012e8:	ed87 0a02 	vstr	s0, [r7, #8]
	    for (int i = 0; i < 5; i++) {
 80012ec:	e7db      	b.n	80012a6 <StartBlink01+0x16>
 80012ee:	bf00      	nop
 80012f0:	200004a8 	.word	0x200004a8
 80012f4:	40020000 	.word	0x40020000

080012f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800130a:	f000 fa7f 	bl	800180c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40000400 	.word	0x40000400

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <Error_Handler+0x8>

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_MspInit+0x54>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	4a11      	ldr	r2, [pc, #68]	@ (800137c <HAL_MspInit+0x54>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800133c:	6453      	str	r3, [r2, #68]	@ 0x44
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <HAL_MspInit+0x54>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <HAL_MspInit+0x54>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <HAL_MspInit+0x54>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <HAL_MspInit+0x54>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	210f      	movs	r1, #15
 800136a:	f06f 0001 	mvn.w	r0, #1
 800136e:	f000 fb49 	bl	8001a04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <HAL_TIM_Base_MspInit+0x48>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d115      	bne.n	80013be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <HAL_TIM_Base_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	4a0c      	ldr	r2, [pc, #48]	@ (80013cc <HAL_TIM_Base_MspInit+0x4c>)
 800139c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <HAL_TIM_Base_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2105      	movs	r1, #5
 80013b2:	2019      	movs	r0, #25
 80013b4:	f000 fb26 	bl	8001a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013b8:	2019      	movs	r0, #25
 80013ba:	f000 fb3f 	bl	8001a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40014400 	.word	0x40014400
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a19      	ldr	r2, [pc, #100]	@ (8001454 <HAL_UART_MspInit+0x84>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12b      	bne.n	800144a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <HAL_UART_MspInit+0x88>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	4a17      	ldr	r2, [pc, #92]	@ (8001458 <HAL_UART_MspInit+0x88>)
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001400:	6413      	str	r3, [r2, #64]	@ 0x40
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_UART_MspInit+0x88>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_UART_MspInit+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a10      	ldr	r2, [pc, #64]	@ (8001458 <HAL_UART_MspInit+0x88>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <HAL_UART_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800142a:	230c      	movs	r3, #12
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800143a:	2307      	movs	r3, #7
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	@ (800145c <HAL_UART_MspInit+0x8c>)
 8001446:	f000 fb07 	bl	8001a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	@ 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40004400 	.word	0x40004400
 8001458:	40023800 	.word	0x40023800
 800145c:	40020000 	.word	0x40020000

08001460 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	@ 0x38
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	4b33      	ldr	r3, [pc, #204]	@ (8001544 <HAL_InitTick+0xe4>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a32      	ldr	r2, [pc, #200]	@ (8001544 <HAL_InitTick+0xe4>)
 800147a:	f043 0302 	orr.w	r3, r3, #2
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b30      	ldr	r3, [pc, #192]	@ (8001544 <HAL_InitTick+0xe4>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800148c:	f107 0210 	add.w	r2, r7, #16
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f001 f8ee 	bl	8002678 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d103      	bne.n	80014ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014a6:	f001 f8bf 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 80014aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80014ac:	e004      	b.n	80014b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014ae:	f001 f8bb 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 80014b2:	4603      	mov	r3, r0
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ba:	4a23      	ldr	r2, [pc, #140]	@ (8001548 <HAL_InitTick+0xe8>)
 80014bc:	fba2 2303 	umull	r2, r3, r2, r3
 80014c0:	0c9b      	lsrs	r3, r3, #18
 80014c2:	3b01      	subs	r3, #1
 80014c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80014c6:	4b21      	ldr	r3, [pc, #132]	@ (800154c <HAL_InitTick+0xec>)
 80014c8:	4a21      	ldr	r2, [pc, #132]	@ (8001550 <HAL_InitTick+0xf0>)
 80014ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80014cc:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <HAL_InitTick+0xec>)
 80014ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014d2:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80014d4:	4a1d      	ldr	r2, [pc, #116]	@ (800154c <HAL_InitTick+0xec>)
 80014d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d8:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <HAL_InitTick+0xec>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <HAL_InitTick+0xec>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b19      	ldr	r3, [pc, #100]	@ (800154c <HAL_InitTick+0xec>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80014ec:	4817      	ldr	r0, [pc, #92]	@ (800154c <HAL_InitTick+0xec>)
 80014ee:	f001 f8f5 	bl	80026dc <HAL_TIM_Base_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d11b      	bne.n	8001538 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001500:	4812      	ldr	r0, [pc, #72]	@ (800154c <HAL_InitTick+0xec>)
 8001502:	f001 f995 	bl	8002830 <HAL_TIM_Base_Start_IT>
 8001506:	4603      	mov	r3, r0
 8001508:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800150c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001510:	2b00      	cmp	r3, #0
 8001512:	d111      	bne.n	8001538 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001514:	201d      	movs	r0, #29
 8001516:	f000 fa91 	bl	8001a3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d808      	bhi.n	8001532 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	201d      	movs	r0, #29
 8001526:	f000 fa6d 	bl	8001a04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800152a:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <HAL_InitTick+0xf4>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e002      	b.n	8001538 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001538:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800153c:	4618      	mov	r0, r3
 800153e:	3738      	adds	r7, #56	@ 0x38
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	431bde83 	.word	0x431bde83
 800154c:	2000053c 	.word	0x2000053c
 8001550:	40000400 	.word	0x40000400
 8001554:	20000004 	.word	0x20000004

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <NMI_Handler+0x4>

08001560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <HardFault_Handler+0x4>

08001568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <MemManage_Handler+0x4>

08001570 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <UsageFault_Handler+0x4>

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <TIM1_UP_TIM10_IRQHandler>:
/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
volatile unsigned long ulHighFrequencyTimerTicks = 0;
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001594:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001596:	f001 f9ad 	bl	80028f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 800159a:	4b04      	ldr	r3, [pc, #16]	@ (80015ac <TIM1_UP_TIM10_IRQHandler+0x1c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	4a02      	ldr	r2, [pc, #8]	@ (80015ac <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80015a2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200004a8 	.word	0x200004a8
 80015ac:	20000584 	.word	0x20000584

080015b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <TIM3_IRQHandler+0x10>)
 80015b6:	f001 f99d 	bl	80028f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000053c 	.word	0x2000053c

080015c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return 1;
 80015c8:	2301      	movs	r3, #1
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_kill>:

int _kill(int pid, int sig)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015de:	f004 f83f 	bl	8005660 <__errno>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2216      	movs	r2, #22
 80015e6:	601a      	str	r2, [r3, #0]
  return -1;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_exit>:

void _exit (int status)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ffe7 	bl	80015d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001606:	bf00      	nop
 8001608:	e7fd      	b.n	8001606 <_exit+0x12>

0800160a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e00a      	b.n	8001632 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800161c:	f3af 8000 	nop.w
 8001620:	4601      	mov	r1, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	60ba      	str	r2, [r7, #8]
 8001628:	b2ca      	uxtb	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	429a      	cmp	r2, r3
 8001638:	dbf0      	blt.n	800161c <_read+0x12>
  }

  return len;
 800163a:	687b      	ldr	r3, [r7, #4]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e009      	b.n	800166a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	60ba      	str	r2, [r7, #8]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fcea 	bl	8001038 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3301      	adds	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	dbf1      	blt.n	8001656 <_write+0x12>
  }
  return len;
 8001672:	687b      	ldr	r3, [r7, #4]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_close>:

int _close(int file)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a4:	605a      	str	r2, [r3, #4]
  return 0;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_isatty>:

int _isatty(int file)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	@ (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f003 ffa4 	bl	8005660 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20020000 	.word	0x20020000
 8001744:	00000400 	.word	0x00000400
 8001748:	20000588 	.word	0x20000588
 800174c:	20004438 	.word	0x20004438

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001778:	f7ff ffea 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800177c:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800177e:	490d      	ldr	r1, [pc, #52]	@ (80017b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001780:	4a0d      	ldr	r2, [pc, #52]	@ (80017b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001794:	4c0a      	ldr	r4, [pc, #40]	@ (80017c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017a2:	f003 ff63 	bl	800566c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7ff fc59 	bl	800105c <main>
  bx  lr    
 80017aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80017b8:	08007808 	.word	0x08007808
  ldr r2, =_sbss
 80017bc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80017c0:	20004438 	.word	0x20004438

080017c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <HAL_Init+0x40>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <HAL_Init+0x40>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <HAL_Init+0x40>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f8fc 	bl	80019ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	200f      	movs	r0, #15
 80017f8:	f7ff fe32 	bl	8001460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fd94 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_IncTick+0x20>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x24>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <HAL_IncTick+0x24>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008
 8001830:	2000058c 	.word	0x2000058c

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000058c 	.word	0x2000058c

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff ffee 	bl	8001834 <HAL_GetTick>
 8001858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d005      	beq.n	8001872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <HAL_Delay+0x44>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001872:	bf00      	nop
 8001874:	f7ff ffde 	bl	8001834 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d8f7      	bhi.n	8001874 <HAL_Delay+0x28>
  {
  }
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000008 	.word	0x20000008

08001894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c6:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	60d3      	str	r3, [r2, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <__NVIC_GetPriorityGrouping+0x18>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0307 	and.w	r3, r3, #7
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db0b      	blt.n	8001922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f003 021f 	and.w	r2, r3, #31
 8001910:	4907      	ldr	r1, [pc, #28]	@ (8001930 <__NVIC_EnableIRQ+0x38>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2001      	movs	r0, #1
 800191a:	fa00 f202 	lsl.w	r2, r0, r2
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000e100 	.word	0xe000e100

08001934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db0a      	blt.n	800195e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	490c      	ldr	r1, [pc, #48]	@ (8001980 <__NVIC_SetPriority+0x4c>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	0112      	lsls	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	440b      	add	r3, r1
 8001958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800195c:	e00a      	b.n	8001974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	@ (8001984 <__NVIC_SetPriority+0x50>)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	3b04      	subs	r3, #4
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	440b      	add	r3, r1
 8001972:	761a      	strb	r2, [r3, #24]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000e100 	.word	0xe000e100
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	@ 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f1c3 0307 	rsb	r3, r3, #7
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	bf28      	it	cs
 80019a6:	2304      	movcs	r3, #4
 80019a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3304      	adds	r3, #4
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d902      	bls.n	80019b8 <NVIC_EncodePriority+0x30>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3b03      	subs	r3, #3
 80019b6:	e000      	b.n	80019ba <NVIC_EncodePriority+0x32>
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43d9      	mvns	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	4313      	orrs	r3, r2
         );
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	@ 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ff4c 	bl	8001894 <__NVIC_SetPriorityGrouping>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a16:	f7ff ff61 	bl	80018dc <__NVIC_GetPriorityGrouping>
 8001a1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	68b9      	ldr	r1, [r7, #8]
 8001a20:	6978      	ldr	r0, [r7, #20]
 8001a22:	f7ff ffb1 	bl	8001988 <NVIC_EncodePriority>
 8001a26:	4602      	mov	r2, r0
 8001a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff ff80 	bl	8001934 <__NVIC_SetPriority>
}
 8001a34:	bf00      	nop
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff54 	bl	80018f8 <__NVIC_EnableIRQ>
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	@ 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	e159      	b.n	8001d28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f040 8148 	bne.w	8001d22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d005      	beq.n	8001aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d130      	bne.n	8001b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 0201 	and.w	r2, r3, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d017      	beq.n	8001b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d123      	bne.n	8001b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3208      	adds	r2, #8
 8001b96:	69b9      	ldr	r1, [r7, #24]
 8001b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80a2 	beq.w	8001d22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b57      	ldr	r3, [pc, #348]	@ (8001d40 <HAL_GPIO_Init+0x2e8>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	4a56      	ldr	r2, [pc, #344]	@ (8001d40 <HAL_GPIO_Init+0x2e8>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bee:	4b54      	ldr	r3, [pc, #336]	@ (8001d40 <HAL_GPIO_Init+0x2e8>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfa:	4a52      	ldr	r2, [pc, #328]	@ (8001d44 <HAL_GPIO_Init+0x2ec>)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a49      	ldr	r2, [pc, #292]	@ (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x202>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a48      	ldr	r2, [pc, #288]	@ (8001d4c <HAL_GPIO_Init+0x2f4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x1fe>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a47      	ldr	r2, [pc, #284]	@ (8001d50 <HAL_GPIO_Init+0x2f8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x1fa>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a46      	ldr	r2, [pc, #280]	@ (8001d54 <HAL_GPIO_Init+0x2fc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x1f6>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a45      	ldr	r2, [pc, #276]	@ (8001d58 <HAL_GPIO_Init+0x300>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x1f2>
 8001c46:	2304      	movs	r3, #4
 8001c48:	e008      	b.n	8001c5c <HAL_GPIO_Init+0x204>
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x204>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <HAL_GPIO_Init+0x204>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_Init+0x204>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_GPIO_Init+0x204>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f002 0203 	and.w	r2, r2, #3
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	4093      	lsls	r3, r2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c6c:	4935      	ldr	r1, [pc, #212]	@ (8001d44 <HAL_GPIO_Init+0x2ec>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7a:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc8:	4a24      	ldr	r2, [pc, #144]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cce:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf8:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3301      	adds	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	f67f aea2 	bls.w	8001a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3724      	adds	r7, #36	@ 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40013c00 	.word	0x40013c00

08001d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d70:	787b      	ldrb	r3, [r7, #1]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d7c:	e003      	b.n	8001d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	041a      	lsls	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	619a      	str	r2, [r3, #24]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001da4:	887a      	ldrh	r2, [r7, #2]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	041a      	lsls	r2, r3, #16
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	400b      	ands	r3, r1
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e267      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d075      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001de6:	4b88      	ldr	r3, [pc, #544]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d00c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df2:	4b85      	ldr	r3, [pc, #532]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d112      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfe:	4b82      	ldr	r3, [pc, #520]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e0a:	d10b      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d05b      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x108>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d157      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e242      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e2c:	d106      	bne.n	8001e3c <HAL_RCC_OscConfig+0x74>
 8001e2e:	4b76      	ldr	r3, [pc, #472]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a75      	ldr	r2, [pc, #468]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e01d      	b.n	8001e78 <HAL_RCC_OscConfig+0xb0>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x98>
 8001e46:	4b70      	ldr	r3, [pc, #448]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a6f      	ldr	r2, [pc, #444]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b6d      	ldr	r3, [pc, #436]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a6c      	ldr	r2, [pc, #432]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e00b      	b.n	8001e78 <HAL_RCC_OscConfig+0xb0>
 8001e60:	4b69      	ldr	r3, [pc, #420]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a68      	ldr	r2, [pc, #416]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a65      	ldr	r2, [pc, #404]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fcd8 	bl	8001834 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fcd4 	bl	8001834 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	@ 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e207      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0xc0>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fcc4 	bl	8001834 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff fcc0 	bl	8001834 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	@ 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1f3      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	4b51      	ldr	r3, [pc, #324]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xe8>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d063      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ede:	4b4a      	ldr	r3, [pc, #296]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eea:	4b47      	ldr	r3, [pc, #284]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d11c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef6:	4b44      	ldr	r3, [pc, #272]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d116      	bne.n	8001f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	4b41      	ldr	r3, [pc, #260]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_RCC_OscConfig+0x152>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e1c7      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4937      	ldr	r1, [pc, #220]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	e03a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f38:	4b34      	ldr	r3, [pc, #208]	@ (800200c <HAL_RCC_OscConfig+0x244>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fc79 	bl	8001834 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f46:	f7ff fc75 	bl	8001834 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e1a8      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	4b2b      	ldr	r3, [pc, #172]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b28      	ldr	r3, [pc, #160]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4925      	ldr	r1, [pc, #148]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
 8001f78:	e015      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7a:	4b24      	ldr	r3, [pc, #144]	@ (800200c <HAL_RCC_OscConfig+0x244>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7ff fc58 	bl	8001834 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f88:	f7ff fc54 	bl	8001834 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e187      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d036      	beq.n	8002020 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d016      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_RCC_OscConfig+0x248>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff fc38 	bl	8001834 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff fc34 	bl	8001834 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e167      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x200>
 8001fe6:	e01b      	b.n	8002020 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <HAL_RCC_OscConfig+0x248>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fee:	f7ff fc21 	bl	8001834 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	e00e      	b.n	8002014 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff6:	f7ff fc1d 	bl	8001834 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d907      	bls.n	8002014 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e150      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
 8002008:	40023800 	.word	0x40023800
 800200c:	42470000 	.word	0x42470000
 8002010:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	4b88      	ldr	r3, [pc, #544]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ea      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8097 	beq.w	800215c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b81      	ldr	r3, [pc, #516]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10f      	bne.n	800205e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	4b7d      	ldr	r3, [pc, #500]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	4a7c      	ldr	r2, [pc, #496]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	@ 0x40
 800204e:	4b7a      	ldr	r3, [pc, #488]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205a:	2301      	movs	r3, #1
 800205c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205e:	4b77      	ldr	r3, [pc, #476]	@ (800223c <HAL_RCC_OscConfig+0x474>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d118      	bne.n	800209c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206a:	4b74      	ldr	r3, [pc, #464]	@ (800223c <HAL_RCC_OscConfig+0x474>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a73      	ldr	r2, [pc, #460]	@ (800223c <HAL_RCC_OscConfig+0x474>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002076:	f7ff fbdd 	bl	8001834 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207e:	f7ff fbd9 	bl	8001834 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e10c      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	4b6a      	ldr	r3, [pc, #424]	@ (800223c <HAL_RCC_OscConfig+0x474>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x2ea>
 80020a4:	4b64      	ldr	r3, [pc, #400]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a8:	4a63      	ldr	r2, [pc, #396]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b0:	e01c      	b.n	80020ec <HAL_RCC_OscConfig+0x324>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x30c>
 80020ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020be:	4a5e      	ldr	r2, [pc, #376]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0x324>
 80020d4:	4b58      	ldr	r3, [pc, #352]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d8:	4a57      	ldr	r2, [pc, #348]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e0:	4b55      	ldr	r3, [pc, #340]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e4:	4a54      	ldr	r2, [pc, #336]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020e6:	f023 0304 	bic.w	r3, r3, #4
 80020ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d015      	beq.n	8002120 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7ff fb9e 	bl	8001834 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7ff fb9a 	bl	8001834 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0cb      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002112:	4b49      	ldr	r3, [pc, #292]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0ee      	beq.n	80020fc <HAL_RCC_OscConfig+0x334>
 800211e:	e014      	b.n	800214a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7ff fb88 	bl	8001834 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7ff fb84 	bl	8001834 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0b5      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213e:	4b3e      	ldr	r3, [pc, #248]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1ee      	bne.n	8002128 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002150:	4b39      	ldr	r3, [pc, #228]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	4a38      	ldr	r2, [pc, #224]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800215a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a1 	beq.w	80022a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002166:	4b34      	ldr	r3, [pc, #208]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b08      	cmp	r3, #8
 8002170:	d05c      	beq.n	800222c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d141      	bne.n	80021fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b31      	ldr	r3, [pc, #196]	@ (8002240 <HAL_RCC_OscConfig+0x478>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff fb58 	bl	8001834 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff fb54 	bl	8001834 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e087      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	019b      	lsls	r3, r3, #6
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	085b      	lsrs	r3, r3, #1
 80021be:	3b01      	subs	r3, #1
 80021c0:	041b      	lsls	r3, r3, #16
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	491b      	ldr	r1, [pc, #108]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <HAL_RCC_OscConfig+0x478>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7ff fb2d 	bl	8001834 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021de:	f7ff fb29 	bl	8001834 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e05c      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x416>
 80021fc:	e054      	b.n	80022a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fe:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <HAL_RCC_OscConfig+0x478>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff fb16 	bl	8001834 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff fb12 	bl	8001834 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e045      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x444>
 800222a:	e03d      	b.n	80022a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d107      	bne.n	8002244 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e038      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
 8002238:	40023800 	.word	0x40023800
 800223c:	40007000 	.word	0x40007000
 8002240:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002244:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <HAL_RCC_OscConfig+0x4ec>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d028      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d121      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d11a      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002274:	4013      	ands	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800227a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800227c:	4293      	cmp	r3, r2
 800227e:	d111      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228a:	085b      	lsrs	r3, r3, #1
 800228c:	3b01      	subs	r3, #1
 800228e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0cc      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022cc:	4b68      	ldr	r3, [pc, #416]	@ (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d90c      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b65      	ldr	r3, [pc, #404]	@ (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b63      	ldr	r3, [pc, #396]	@ (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0b8      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800230c:	4b59      	ldr	r3, [pc, #356]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a58      	ldr	r2, [pc, #352]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002324:	4b53      	ldr	r3, [pc, #332]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a52      	ldr	r2, [pc, #328]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800232e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002330:	4b50      	ldr	r3, [pc, #320]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	494d      	ldr	r1, [pc, #308]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d044      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	4b47      	ldr	r3, [pc, #284]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d119      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e07f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d003      	beq.n	8002376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002372:	2b03      	cmp	r3, #3
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002376:	4b3f      	ldr	r3, [pc, #252]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e06f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e067      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002396:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f023 0203 	bic.w	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4934      	ldr	r1, [pc, #208]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a8:	f7ff fa44 	bl	8001834 <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b0:	f7ff fa40 	bl	8001834 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e04f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 020c 	and.w	r2, r3, #12
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1eb      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d8:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d20c      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e032      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800240c:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4916      	ldr	r1, [pc, #88]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242a:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	490e      	ldr	r1, [pc, #56]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800243e:	f000 f821 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8002442:	4602      	mov	r2, r0
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	490a      	ldr	r1, [pc, #40]	@ (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	5ccb      	ldrb	r3, [r1, r3]
 8002452:	fa22 f303 	lsr.w	r3, r2, r3
 8002456:	4a09      	ldr	r2, [pc, #36]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800245a:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fffe 	bl	8001460 <HAL_InitTick>

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023c00 	.word	0x40023c00
 8002474:	40023800 	.word	0x40023800
 8002478:	0800746c 	.word	0x0800746c
 800247c:	20000000 	.word	0x20000000
 8002480:	20000004 	.word	0x20000004

08002484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002488:	b090      	sub	sp, #64	@ 0x40
 800248a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002490:	2300      	movs	r3, #0
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002494:	2300      	movs	r3, #0
 8002496:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800249c:	4b59      	ldr	r3, [pc, #356]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x180>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d00d      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x40>
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	f200 80a1 	bhi.w	80025f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x34>
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d003      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0x3a>
 80024b6:	e09b      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024b8:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x184>)
 80024ba:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80024bc:	e09b      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024be:	4b53      	ldr	r3, [pc, #332]	@ (800260c <HAL_RCC_GetSysClockFreq+0x188>)
 80024c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024c2:	e098      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x180>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x180>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d028      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024da:	4b4a      	ldr	r3, [pc, #296]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x180>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	099b      	lsrs	r3, r3, #6
 80024e0:	2200      	movs	r2, #0
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024ec:	2100      	movs	r1, #0
 80024ee:	4b47      	ldr	r3, [pc, #284]	@ (800260c <HAL_RCC_GetSysClockFreq+0x188>)
 80024f0:	fb03 f201 	mul.w	r2, r3, r1
 80024f4:	2300      	movs	r3, #0
 80024f6:	fb00 f303 	mul.w	r3, r0, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	4a43      	ldr	r2, [pc, #268]	@ (800260c <HAL_RCC_GetSysClockFreq+0x188>)
 80024fe:	fba0 1202 	umull	r1, r2, r0, r2
 8002502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002504:	460a      	mov	r2, r1
 8002506:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800250a:	4413      	add	r3, r2
 800250c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800250e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002510:	2200      	movs	r2, #0
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	61fa      	str	r2, [r7, #28]
 8002516:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800251a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800251e:	f7fe fb4b 	bl	8000bb8 <__aeabi_uldivmod>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4613      	mov	r3, r2
 8002528:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800252a:	e053      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252c:	4b35      	ldr	r3, [pc, #212]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x180>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	2200      	movs	r2, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	617a      	str	r2, [r7, #20]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800253e:	f04f 0b00 	mov.w	fp, #0
 8002542:	4652      	mov	r2, sl
 8002544:	465b      	mov	r3, fp
 8002546:	f04f 0000 	mov.w	r0, #0
 800254a:	f04f 0100 	mov.w	r1, #0
 800254e:	0159      	lsls	r1, r3, #5
 8002550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002554:	0150      	lsls	r0, r2, #5
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	ebb2 080a 	subs.w	r8, r2, sl
 800255e:	eb63 090b 	sbc.w	r9, r3, fp
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800256e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002572:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002576:	ebb2 0408 	subs.w	r4, r2, r8
 800257a:	eb63 0509 	sbc.w	r5, r3, r9
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	00eb      	lsls	r3, r5, #3
 8002588:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800258c:	00e2      	lsls	r2, r4, #3
 800258e:	4614      	mov	r4, r2
 8002590:	461d      	mov	r5, r3
 8002592:	eb14 030a 	adds.w	r3, r4, sl
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	eb45 030b 	adc.w	r3, r5, fp
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025aa:	4629      	mov	r1, r5
 80025ac:	028b      	lsls	r3, r1, #10
 80025ae:	4621      	mov	r1, r4
 80025b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025b4:	4621      	mov	r1, r4
 80025b6:	028a      	lsls	r2, r1, #10
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025be:	2200      	movs	r2, #0
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	60fa      	str	r2, [r7, #12]
 80025c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c8:	f7fe faf6 	bl	8000bb8 <__aeabi_uldivmod>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4613      	mov	r3, r2
 80025d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x180>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	3301      	adds	r3, #1
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80025e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025ee:	e002      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b05      	ldr	r3, [pc, #20]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x184>)
 80025f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3740      	adds	r7, #64	@ 0x40
 80025fc:	46bd      	mov	sp, r7
 80025fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	00f42400 	.word	0x00f42400
 800260c:	017d7840 	.word	0x017d7840

08002610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002614:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <HAL_RCC_GetHCLKFreq+0x14>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000000 	.word	0x20000000

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800262c:	f7ff fff0 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0a9b      	lsrs	r3, r3, #10
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	@ (800264c <HAL_RCC_GetPCLK1Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	0800747c 	.word	0x0800747c

08002650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002654:	f7ff ffdc 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	0b5b      	lsrs	r3, r3, #13
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	4903      	ldr	r1, [pc, #12]	@ (8002674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40023800 	.word	0x40023800
 8002674:	0800747c 	.word	0x0800747c

08002678 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	220f      	movs	r2, #15
 8002686:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002688:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <HAL_RCC_GetClockConfig+0x5c>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0203 	and.w	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002694:	4b0f      	ldr	r3, [pc, #60]	@ (80026d4 <HAL_RCC_GetClockConfig+0x5c>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026a0:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <HAL_RCC_GetClockConfig+0x5c>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026ac:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <HAL_RCC_GetClockConfig+0x5c>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026ba:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <HAL_RCC_GetClockConfig+0x60>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0207 	and.w	r2, r3, #7
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	601a      	str	r2, [r3, #0]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40023c00 	.word	0x40023c00

080026dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e041      	b.n	8002772 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe fe3c 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3304      	adds	r3, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4610      	mov	r0, r2
 800271c:	f000 fa02 	bl	8002b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d001      	beq.n	8002794 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e03c      	b.n	800280e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1e      	ldr	r2, [pc, #120]	@ (800281c <HAL_TIM_Base_Start+0xa0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d018      	beq.n	80027d8 <HAL_TIM_Base_Start+0x5c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ae:	d013      	beq.n	80027d8 <HAL_TIM_Base_Start+0x5c>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002820 <HAL_TIM_Base_Start+0xa4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00e      	beq.n	80027d8 <HAL_TIM_Base_Start+0x5c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a19      	ldr	r2, [pc, #100]	@ (8002824 <HAL_TIM_Base_Start+0xa8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d009      	beq.n	80027d8 <HAL_TIM_Base_Start+0x5c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a17      	ldr	r2, [pc, #92]	@ (8002828 <HAL_TIM_Base_Start+0xac>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d004      	beq.n	80027d8 <HAL_TIM_Base_Start+0x5c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a16      	ldr	r2, [pc, #88]	@ (800282c <HAL_TIM_Base_Start+0xb0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d111      	bne.n	80027fc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d010      	beq.n	800280c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fa:	e007      	b.n	800280c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40010000 	.word	0x40010000
 8002820:	40000400 	.word	0x40000400
 8002824:	40000800 	.word	0x40000800
 8002828:	40000c00 	.word	0x40000c00
 800282c:	40014000 	.word	0x40014000

08002830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d001      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e044      	b.n	80028d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1e      	ldr	r2, [pc, #120]	@ (80028e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d018      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x6c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002872:	d013      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x6c>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1a      	ldr	r2, [pc, #104]	@ (80028e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x6c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a19      	ldr	r2, [pc, #100]	@ (80028e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x6c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a17      	ldr	r2, [pc, #92]	@ (80028ec <HAL_TIM_Base_Start_IT+0xbc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x6c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a16      	ldr	r2, [pc, #88]	@ (80028f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d111      	bne.n	80028c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d010      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0201 	orr.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028be:	e007      	b.n	80028d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40010000 	.word	0x40010000
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40000800 	.word	0x40000800
 80028ec:	40000c00 	.word	0x40000c00
 80028f0:	40014000 	.word	0x40014000

080028f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d020      	beq.n	8002958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01b      	beq.n	8002958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0202 	mvn.w	r2, #2
 8002928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8d2 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f8c4 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f8d5 	bl	8002afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d020      	beq.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0204 	mvn.w	r2, #4
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8ac 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f89e 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f8af 	bl	8002afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d020      	beq.n	80029f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01b      	beq.n	80029f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0208 	mvn.w	r2, #8
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2204      	movs	r2, #4
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f886 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f878 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f889 	bl	8002afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d020      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01b      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0210 	mvn.w	r2, #16
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2208      	movs	r2, #8
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f860 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f852 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f863 	bl	8002afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0201 	mvn.w	r2, #1
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe fc4c 	bl	80012f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00c      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8e6 	bl	8002c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d007      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f834 	bl	8002b10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0220 	mvn.w	r2, #32
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f8b8 	bl	8002c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a3a      	ldr	r2, [pc, #232]	@ (8002c20 <TIM_Base_SetConfig+0xfc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00f      	beq.n	8002b5c <TIM_Base_SetConfig+0x38>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b42:	d00b      	beq.n	8002b5c <TIM_Base_SetConfig+0x38>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a37      	ldr	r2, [pc, #220]	@ (8002c24 <TIM_Base_SetConfig+0x100>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d007      	beq.n	8002b5c <TIM_Base_SetConfig+0x38>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a36      	ldr	r2, [pc, #216]	@ (8002c28 <TIM_Base_SetConfig+0x104>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d003      	beq.n	8002b5c <TIM_Base_SetConfig+0x38>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <TIM_Base_SetConfig+0x108>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d108      	bne.n	8002b6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a2b      	ldr	r2, [pc, #172]	@ (8002c20 <TIM_Base_SetConfig+0xfc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01b      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7c:	d017      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a28      	ldr	r2, [pc, #160]	@ (8002c24 <TIM_Base_SetConfig+0x100>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a27      	ldr	r2, [pc, #156]	@ (8002c28 <TIM_Base_SetConfig+0x104>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00f      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a26      	ldr	r2, [pc, #152]	@ (8002c2c <TIM_Base_SetConfig+0x108>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00b      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a25      	ldr	r2, [pc, #148]	@ (8002c30 <TIM_Base_SetConfig+0x10c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a24      	ldr	r2, [pc, #144]	@ (8002c34 <TIM_Base_SetConfig+0x110>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a23      	ldr	r2, [pc, #140]	@ (8002c38 <TIM_Base_SetConfig+0x114>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d108      	bne.n	8002bc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a0e      	ldr	r2, [pc, #56]	@ (8002c20 <TIM_Base_SetConfig+0xfc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d103      	bne.n	8002bf4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f023 0201 	bic.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	611a      	str	r2, [r3, #16]
  }
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40000c00 	.word	0x40000c00
 8002c30:	40014000 	.word	0x40014000
 8002c34:	40014400 	.word	0x40014400
 8002c38:	40014800 	.word	0x40014800

08002c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e042      	b.n	8002cfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe fba0 	bl	80013d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2224      	movs	r2, #36	@ 0x24
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f973 	bl	8002f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	@ 0x28
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d175      	bne.n	8002e10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_UART_Transmit+0x2c>
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e06e      	b.n	8002e12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2221      	movs	r2, #33	@ 0x21
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d42:	f7fe fd77 	bl	8001834 <HAL_GetTick>
 8002d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5c:	d108      	bne.n	8002d70 <HAL_UART_Transmit+0x6c>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d104      	bne.n	8002d70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	e003      	b.n	8002d78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d78:	e02e      	b.n	8002dd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2180      	movs	r1, #128	@ 0x80
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f848 	bl	8002e1a <UART_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e03a      	b.n	8002e12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10b      	bne.n	8002dba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	3302      	adds	r3, #2
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	e007      	b.n	8002dca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1cb      	bne.n	8002d7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	2140      	movs	r1, #64	@ 0x40
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f814 	bl	8002e1a <UART_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e006      	b.n	8002e12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2a:	e03b      	b.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d037      	beq.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e34:	f7fe fcfe 	bl	8001834 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	6a3a      	ldr	r2, [r7, #32]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d302      	bcc.n	8002e4a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e03a      	b.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d023      	beq.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b80      	cmp	r3, #128	@ 0x80
 8002e60:	d020      	beq.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b40      	cmp	r3, #64	@ 0x40
 8002e66:	d01d      	beq.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d116      	bne.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f81d 	bl	8002ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2208      	movs	r2, #8
 8002e96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e00f      	b.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d0b4      	beq.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b095      	sub	sp, #84	@ 0x54
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ede:	e853 3f00 	ldrex	r3, [r3]
 8002ee2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ef4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002efa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002efc:	e841 2300 	strex	r3, r2, [r1]
 8002f00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e5      	bne.n	8002ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3314      	adds	r3, #20
 8002f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	e853 3f00 	ldrex	r3, [r3]
 8002f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3314      	adds	r3, #20
 8002f26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f30:	e841 2300 	strex	r3, r2, [r1]
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e5      	bne.n	8002f08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d119      	bne.n	8002f78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f023 0310 	bic.w	r3, r3, #16
 8002f5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f64:	61ba      	str	r2, [r7, #24]
 8002f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f68:	6979      	ldr	r1, [r7, #20]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	e841 2300 	strex	r3, r2, [r1]
 8002f70:	613b      	str	r3, [r7, #16]
   return(result);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e5      	bne.n	8002f44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f86:	bf00      	nop
 8002f88:	3754      	adds	r7, #84	@ 0x54
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f98:	b0c0      	sub	sp, #256	@ 0x100
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb0:	68d9      	ldr	r1, [r3, #12]
 8002fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	ea40 0301 	orr.w	r3, r0, r1
 8002fbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002fec:	f021 010c 	bic.w	r1, r1, #12
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300e:	6999      	ldr	r1, [r3, #24]
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	ea40 0301 	orr.w	r3, r0, r1
 800301a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4b8f      	ldr	r3, [pc, #572]	@ (8003260 <UART_SetConfig+0x2cc>)
 8003024:	429a      	cmp	r2, r3
 8003026:	d005      	beq.n	8003034 <UART_SetConfig+0xa0>
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b8d      	ldr	r3, [pc, #564]	@ (8003264 <UART_SetConfig+0x2d0>)
 8003030:	429a      	cmp	r2, r3
 8003032:	d104      	bne.n	800303e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003034:	f7ff fb0c 	bl	8002650 <HAL_RCC_GetPCLK2Freq>
 8003038:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800303c:	e003      	b.n	8003046 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800303e:	f7ff faf3 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8003042:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003050:	f040 810c 	bne.w	800326c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003058:	2200      	movs	r2, #0
 800305a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800305e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003062:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003066:	4622      	mov	r2, r4
 8003068:	462b      	mov	r3, r5
 800306a:	1891      	adds	r1, r2, r2
 800306c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800306e:	415b      	adcs	r3, r3
 8003070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003076:	4621      	mov	r1, r4
 8003078:	eb12 0801 	adds.w	r8, r2, r1
 800307c:	4629      	mov	r1, r5
 800307e:	eb43 0901 	adc.w	r9, r3, r1
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800308e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003096:	4690      	mov	r8, r2
 8003098:	4699      	mov	r9, r3
 800309a:	4623      	mov	r3, r4
 800309c:	eb18 0303 	adds.w	r3, r8, r3
 80030a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030a4:	462b      	mov	r3, r5
 80030a6:	eb49 0303 	adc.w	r3, r9, r3
 80030aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030c2:	460b      	mov	r3, r1
 80030c4:	18db      	adds	r3, r3, r3
 80030c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80030c8:	4613      	mov	r3, r2
 80030ca:	eb42 0303 	adc.w	r3, r2, r3
 80030ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80030d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030d8:	f7fd fd6e 	bl	8000bb8 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4b61      	ldr	r3, [pc, #388]	@ (8003268 <UART_SetConfig+0x2d4>)
 80030e2:	fba3 2302 	umull	r2, r3, r3, r2
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	011c      	lsls	r4, r3, #4
 80030ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80030f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80030fc:	4642      	mov	r2, r8
 80030fe:	464b      	mov	r3, r9
 8003100:	1891      	adds	r1, r2, r2
 8003102:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003104:	415b      	adcs	r3, r3
 8003106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003108:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800310c:	4641      	mov	r1, r8
 800310e:	eb12 0a01 	adds.w	sl, r2, r1
 8003112:	4649      	mov	r1, r9
 8003114:	eb43 0b01 	adc.w	fp, r3, r1
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003124:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800312c:	4692      	mov	sl, r2
 800312e:	469b      	mov	fp, r3
 8003130:	4643      	mov	r3, r8
 8003132:	eb1a 0303 	adds.w	r3, sl, r3
 8003136:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800313a:	464b      	mov	r3, r9
 800313c:	eb4b 0303 	adc.w	r3, fp, r3
 8003140:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003150:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003154:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003158:	460b      	mov	r3, r1
 800315a:	18db      	adds	r3, r3, r3
 800315c:	643b      	str	r3, [r7, #64]	@ 0x40
 800315e:	4613      	mov	r3, r2
 8003160:	eb42 0303 	adc.w	r3, r2, r3
 8003164:	647b      	str	r3, [r7, #68]	@ 0x44
 8003166:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800316a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800316e:	f7fd fd23 	bl	8000bb8 <__aeabi_uldivmod>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4611      	mov	r1, r2
 8003178:	4b3b      	ldr	r3, [pc, #236]	@ (8003268 <UART_SetConfig+0x2d4>)
 800317a:	fba3 2301 	umull	r2, r3, r3, r1
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2264      	movs	r2, #100	@ 0x64
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	1acb      	subs	r3, r1, r3
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800318e:	4b36      	ldr	r3, [pc, #216]	@ (8003268 <UART_SetConfig+0x2d4>)
 8003190:	fba3 2302 	umull	r2, r3, r3, r2
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800319c:	441c      	add	r4, r3
 800319e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031b0:	4642      	mov	r2, r8
 80031b2:	464b      	mov	r3, r9
 80031b4:	1891      	adds	r1, r2, r2
 80031b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031b8:	415b      	adcs	r3, r3
 80031ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031c0:	4641      	mov	r1, r8
 80031c2:	1851      	adds	r1, r2, r1
 80031c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80031c6:	4649      	mov	r1, r9
 80031c8:	414b      	adcs	r3, r1
 80031ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031d8:	4659      	mov	r1, fp
 80031da:	00cb      	lsls	r3, r1, #3
 80031dc:	4651      	mov	r1, sl
 80031de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031e2:	4651      	mov	r1, sl
 80031e4:	00ca      	lsls	r2, r1, #3
 80031e6:	4610      	mov	r0, r2
 80031e8:	4619      	mov	r1, r3
 80031ea:	4603      	mov	r3, r0
 80031ec:	4642      	mov	r2, r8
 80031ee:	189b      	adds	r3, r3, r2
 80031f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031f4:	464b      	mov	r3, r9
 80031f6:	460a      	mov	r2, r1
 80031f8:	eb42 0303 	adc.w	r3, r2, r3
 80031fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800320c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003214:	460b      	mov	r3, r1
 8003216:	18db      	adds	r3, r3, r3
 8003218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800321a:	4613      	mov	r3, r2
 800321c:	eb42 0303 	adc.w	r3, r2, r3
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003226:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800322a:	f7fd fcc5 	bl	8000bb8 <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4b0d      	ldr	r3, [pc, #52]	@ (8003268 <UART_SetConfig+0x2d4>)
 8003234:	fba3 1302 	umull	r1, r3, r3, r2
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	2164      	movs	r1, #100	@ 0x64
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	3332      	adds	r3, #50	@ 0x32
 8003246:	4a08      	ldr	r2, [pc, #32]	@ (8003268 <UART_SetConfig+0x2d4>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	f003 0207 	and.w	r2, r3, #7
 8003252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4422      	add	r2, r4
 800325a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800325c:	e106      	b.n	800346c <UART_SetConfig+0x4d8>
 800325e:	bf00      	nop
 8003260:	40011000 	.word	0x40011000
 8003264:	40011400 	.word	0x40011400
 8003268:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800326c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003270:	2200      	movs	r2, #0
 8003272:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003276:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800327a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800327e:	4642      	mov	r2, r8
 8003280:	464b      	mov	r3, r9
 8003282:	1891      	adds	r1, r2, r2
 8003284:	6239      	str	r1, [r7, #32]
 8003286:	415b      	adcs	r3, r3
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
 800328a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800328e:	4641      	mov	r1, r8
 8003290:	1854      	adds	r4, r2, r1
 8003292:	4649      	mov	r1, r9
 8003294:	eb43 0501 	adc.w	r5, r3, r1
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	00eb      	lsls	r3, r5, #3
 80032a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a6:	00e2      	lsls	r2, r4, #3
 80032a8:	4614      	mov	r4, r2
 80032aa:	461d      	mov	r5, r3
 80032ac:	4643      	mov	r3, r8
 80032ae:	18e3      	adds	r3, r4, r3
 80032b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032b4:	464b      	mov	r3, r9
 80032b6:	eb45 0303 	adc.w	r3, r5, r3
 80032ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032da:	4629      	mov	r1, r5
 80032dc:	008b      	lsls	r3, r1, #2
 80032de:	4621      	mov	r1, r4
 80032e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032e4:	4621      	mov	r1, r4
 80032e6:	008a      	lsls	r2, r1, #2
 80032e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032ec:	f7fd fc64 	bl	8000bb8 <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4b60      	ldr	r3, [pc, #384]	@ (8003478 <UART_SetConfig+0x4e4>)
 80032f6:	fba3 2302 	umull	r2, r3, r3, r2
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	011c      	lsls	r4, r3, #4
 80032fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003302:	2200      	movs	r2, #0
 8003304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003308:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800330c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003310:	4642      	mov	r2, r8
 8003312:	464b      	mov	r3, r9
 8003314:	1891      	adds	r1, r2, r2
 8003316:	61b9      	str	r1, [r7, #24]
 8003318:	415b      	adcs	r3, r3
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003320:	4641      	mov	r1, r8
 8003322:	1851      	adds	r1, r2, r1
 8003324:	6139      	str	r1, [r7, #16]
 8003326:	4649      	mov	r1, r9
 8003328:	414b      	adcs	r3, r1
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003338:	4659      	mov	r1, fp
 800333a:	00cb      	lsls	r3, r1, #3
 800333c:	4651      	mov	r1, sl
 800333e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003342:	4651      	mov	r1, sl
 8003344:	00ca      	lsls	r2, r1, #3
 8003346:	4610      	mov	r0, r2
 8003348:	4619      	mov	r1, r3
 800334a:	4603      	mov	r3, r0
 800334c:	4642      	mov	r2, r8
 800334e:	189b      	adds	r3, r3, r2
 8003350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003354:	464b      	mov	r3, r9
 8003356:	460a      	mov	r2, r1
 8003358:	eb42 0303 	adc.w	r3, r2, r3
 800335c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	67bb      	str	r3, [r7, #120]	@ 0x78
 800336a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003378:	4649      	mov	r1, r9
 800337a:	008b      	lsls	r3, r1, #2
 800337c:	4641      	mov	r1, r8
 800337e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003382:	4641      	mov	r1, r8
 8003384:	008a      	lsls	r2, r1, #2
 8003386:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800338a:	f7fd fc15 	bl	8000bb8 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4611      	mov	r1, r2
 8003394:	4b38      	ldr	r3, [pc, #224]	@ (8003478 <UART_SetConfig+0x4e4>)
 8003396:	fba3 2301 	umull	r2, r3, r3, r1
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2264      	movs	r2, #100	@ 0x64
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	1acb      	subs	r3, r1, r3
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	3332      	adds	r3, #50	@ 0x32
 80033a8:	4a33      	ldr	r2, [pc, #204]	@ (8003478 <UART_SetConfig+0x4e4>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033b4:	441c      	add	r4, r3
 80033b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ba:	2200      	movs	r2, #0
 80033bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80033be:	677a      	str	r2, [r7, #116]	@ 0x74
 80033c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033c4:	4642      	mov	r2, r8
 80033c6:	464b      	mov	r3, r9
 80033c8:	1891      	adds	r1, r2, r2
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	415b      	adcs	r3, r3
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033d4:	4641      	mov	r1, r8
 80033d6:	1851      	adds	r1, r2, r1
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	4649      	mov	r1, r9
 80033dc:	414b      	adcs	r3, r1
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033ec:	4659      	mov	r1, fp
 80033ee:	00cb      	lsls	r3, r1, #3
 80033f0:	4651      	mov	r1, sl
 80033f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033f6:	4651      	mov	r1, sl
 80033f8:	00ca      	lsls	r2, r1, #3
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	4642      	mov	r2, r8
 8003402:	189b      	adds	r3, r3, r2
 8003404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003406:	464b      	mov	r3, r9
 8003408:	460a      	mov	r2, r1
 800340a:	eb42 0303 	adc.w	r3, r2, r3
 800340e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	663b      	str	r3, [r7, #96]	@ 0x60
 800341a:	667a      	str	r2, [r7, #100]	@ 0x64
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003428:	4649      	mov	r1, r9
 800342a:	008b      	lsls	r3, r1, #2
 800342c:	4641      	mov	r1, r8
 800342e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003432:	4641      	mov	r1, r8
 8003434:	008a      	lsls	r2, r1, #2
 8003436:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800343a:	f7fd fbbd 	bl	8000bb8 <__aeabi_uldivmod>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4b0d      	ldr	r3, [pc, #52]	@ (8003478 <UART_SetConfig+0x4e4>)
 8003444:	fba3 1302 	umull	r1, r3, r3, r2
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	2164      	movs	r1, #100	@ 0x64
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	3332      	adds	r3, #50	@ 0x32
 8003456:	4a08      	ldr	r2, [pc, #32]	@ (8003478 <UART_SetConfig+0x4e4>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	f003 020f 	and.w	r2, r3, #15
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4422      	add	r2, r4
 800346a:	609a      	str	r2, [r3, #8]
}
 800346c:	bf00      	nop
 800346e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003472:	46bd      	mov	sp, r7
 8003474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003478:	51eb851f 	.word	0x51eb851f

0800347c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800348a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348e:	2b84      	cmp	r3, #132	@ 0x84
 8003490:	d005      	beq.n	800349e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003492:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4413      	add	r3, r2
 800349a:	3303      	adds	r3, #3
 800349c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800349e:	68fb      	ldr	r3, [r7, #12]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80034b0:	f000 fb0a 	bl	8003ac8 <vTaskStartScheduler>
  
  return osOK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	bd80      	pop	{r7, pc}

080034ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80034ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034bc:	b089      	sub	sp, #36	@ 0x24
 80034be:	af04      	add	r7, sp, #16
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <osThreadCreate+0x54>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01c      	beq.n	800350e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685c      	ldr	r4, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691e      	ldr	r6, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ffc8 	bl	800347c <makeFreeRtosPriority>
 80034ec:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034f6:	9202      	str	r2, [sp, #8]
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	9100      	str	r1, [sp, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4632      	mov	r2, r6
 8003500:	4629      	mov	r1, r5
 8003502:	4620      	mov	r0, r4
 8003504:	f000 f8ed 	bl	80036e2 <xTaskCreateStatic>
 8003508:	4603      	mov	r3, r0
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	e01c      	b.n	8003548 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685c      	ldr	r4, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800351a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ffaa 	bl	800347c <makeFreeRtosPriority>
 8003528:	4602      	mov	r2, r0
 800352a:	f107 030c 	add.w	r3, r7, #12
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	9200      	str	r2, [sp, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	4632      	mov	r2, r6
 8003536:	4629      	mov	r1, r5
 8003538:	4620      	mov	r0, r4
 800353a:	f000 f932 	bl	80037a2 <xTaskCreate>
 800353e:	4603      	mov	r3, r0
 8003540:	2b01      	cmp	r3, #1
 8003542:	d001      	beq.n	8003548 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003544:	2300      	movs	r3, #0
 8003546:	e000      	b.n	800354a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003548:	68fb      	ldr	r3, [r7, #12]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003552 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <osDelay+0x16>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	e000      	b.n	800356a <osDelay+0x18>
 8003568:	2301      	movs	r3, #1
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fa76 	bl	8003a5c <vTaskDelay>
  
  return osOK;
 8003570:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f103 0208 	add.w	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f04f 32ff 	mov.w	r2, #4294967295
 8003592:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f103 0208 	add.w	r2, r3, #8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f103 0208 	add.w	r2, r3, #8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	601a      	str	r2, [r3, #0]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d103      	bne.n	800363c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e00c      	b.n	8003656 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3308      	adds	r3, #8
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	e002      	b.n	800364a <vListInsert+0x2e>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	d2f6      	bcs.n	8003644 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	601a      	str	r2, [r3, #0]
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6892      	ldr	r2, [r2, #8]
 80036a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6852      	ldr	r2, [r2, #4]
 80036ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d103      	bne.n	80036c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	1e5a      	subs	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b08e      	sub	sp, #56	@ 0x38
 80036e6:	af04      	add	r7, sp, #16
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10b      	bne.n	800370e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	e7fd      	b.n	800370a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <xTaskCreateStatic+0x4a>
	__asm volatile
 8003714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	61fb      	str	r3, [r7, #28]
}
 8003726:	bf00      	nop
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800372c:	23ac      	movs	r3, #172	@ 0xac
 800372e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2bac      	cmp	r3, #172	@ 0xac
 8003734:	d00b      	beq.n	800374e <xTaskCreateStatic+0x6c>
	__asm volatile
 8003736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	61bb      	str	r3, [r7, #24]
}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	e7fd      	b.n	800374a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800374e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01e      	beq.n	8003794 <xTaskCreateStatic+0xb2>
 8003756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01b      	beq.n	8003794 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003762:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003764:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	2202      	movs	r2, #2
 800376a:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800376e:	2300      	movs	r3, #0
 8003770:	9303      	str	r3, [sp, #12]
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	9302      	str	r3, [sp, #8]
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	9301      	str	r3, [sp, #4]
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f850 	bl	800382c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800378c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800378e:	f000 f8f7 	bl	8003980 <prvAddNewTaskToReadyList>
 8003792:	e001      	b.n	8003798 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003798:	697b      	ldr	r3, [r7, #20]
	}
 800379a:	4618      	mov	r0, r3
 800379c:	3728      	adds	r7, #40	@ 0x28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b08c      	sub	sp, #48	@ 0x30
 80037a6:	af04      	add	r7, sp, #16
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	4613      	mov	r3, r2
 80037b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 ff5e 	bl	8004678 <pvPortMalloc>
 80037bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00e      	beq.n	80037e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037c4:	20ac      	movs	r0, #172	@ 0xac
 80037c6:	f000 ff57 	bl	8004678 <pvPortMalloc>
 80037ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80037d8:	e005      	b.n	80037e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037da:	6978      	ldr	r0, [r7, #20]
 80037dc:	f001 f81a 	bl	8004814 <vPortFree>
 80037e0:	e001      	b.n	80037e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d017      	beq.n	800381c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037f4:	88fa      	ldrh	r2, [r7, #6]
 80037f6:	2300      	movs	r3, #0
 80037f8:	9303      	str	r3, [sp, #12]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	9302      	str	r3, [sp, #8]
 80037fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f80e 	bl	800382c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003810:	69f8      	ldr	r0, [r7, #28]
 8003812:	f000 f8b5 	bl	8003980 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003816:	2301      	movs	r3, #1
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	e002      	b.n	8003822 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800381c:	f04f 33ff 	mov.w	r3, #4294967295
 8003820:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003822:	69bb      	ldr	r3, [r7, #24]
	}
 8003824:	4618      	mov	r0, r3
 8003826:	3720      	adds	r7, #32
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	461a      	mov	r2, r3
 8003844:	21a5      	movs	r1, #165	@ 0xa5
 8003846:	f001 fe62 	bl	800550e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800384a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003854:	3b01      	subs	r3, #1
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f023 0307 	bic.w	r3, r3, #7
 8003862:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	617b      	str	r3, [r7, #20]
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	e7fd      	b.n	8003882 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01f      	beq.n	80038cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	e012      	b.n	80038b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	4413      	add	r3, r2
 8003898:	7819      	ldrb	r1, [r3, #0]
 800389a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	3334      	adds	r3, #52	@ 0x34
 80038a2:	460a      	mov	r2, r1
 80038a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d006      	beq.n	80038c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	d9e9      	bls.n	8003892 <prvInitialiseNewTask+0x66>
 80038be:	e000      	b.n	80038c2 <prvInitialiseNewTask+0x96>
			{
				break;
 80038c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038ca:	e003      	b.n	80038d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d6:	2b06      	cmp	r3, #6
 80038d8:	d901      	bls.n	80038de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038da:	2306      	movs	r3, #6
 80038dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80038ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ec:	2200      	movs	r2, #0
 80038ee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f2:	3304      	adds	r3, #4
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fe60 	bl	80035ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fc:	3318      	adds	r3, #24
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fe5b 	bl	80035ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003908:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800390a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390c:	f1c3 0207 	rsb	r2, r3, #7
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003918:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800391a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391c:	2200      	movs	r2, #0
 800391e:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003922:	2200      	movs	r2, #0
 8003924:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	2200      	movs	r2, #0
 800392c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	3358      	adds	r3, #88	@ 0x58
 8003934:	224c      	movs	r2, #76	@ 0x4c
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f001 fde8 	bl	800550e <memset>
 800393e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003940:	4a0c      	ldr	r2, [pc, #48]	@ (8003974 <prvInitialiseNewTask+0x148>)
 8003942:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003946:	4a0c      	ldr	r2, [pc, #48]	@ (8003978 <prvInitialiseNewTask+0x14c>)
 8003948:	661a      	str	r2, [r3, #96]	@ 0x60
 800394a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394c:	4a0b      	ldr	r2, [pc, #44]	@ (800397c <prvInitialiseNewTask+0x150>)
 800394e:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	68f9      	ldr	r1, [r7, #12]
 8003954:	69b8      	ldr	r0, [r7, #24]
 8003956:	f000 fc7d 	bl	8004254 <pxPortInitialiseStack>
 800395a:	4602      	mov	r2, r0
 800395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800396a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800396c:	bf00      	nop
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	200042ec 	.word	0x200042ec
 8003978:	20004354 	.word	0x20004354
 800397c:	200043bc 	.word	0x200043bc

08003980 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003988:	f000 fd96 	bl	80044b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800398c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a40 <prvAddNewTaskToReadyList+0xc0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	4a2b      	ldr	r2, [pc, #172]	@ (8003a40 <prvAddNewTaskToReadyList+0xc0>)
 8003994:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003996:	4b2b      	ldr	r3, [pc, #172]	@ (8003a44 <prvAddNewTaskToReadyList+0xc4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800399e:	4a29      	ldr	r2, [pc, #164]	@ (8003a44 <prvAddNewTaskToReadyList+0xc4>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039a4:	4b26      	ldr	r3, [pc, #152]	@ (8003a40 <prvAddNewTaskToReadyList+0xc0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d110      	bne.n	80039ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039ac:	f000 fb18 	bl	8003fe0 <prvInitialiseTaskLists>
 80039b0:	e00d      	b.n	80039ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039b2:	4b25      	ldr	r3, [pc, #148]	@ (8003a48 <prvAddNewTaskToReadyList+0xc8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039ba:	4b22      	ldr	r3, [pc, #136]	@ (8003a44 <prvAddNewTaskToReadyList+0xc4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d802      	bhi.n	80039ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a44 <prvAddNewTaskToReadyList+0xc4>)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039ce:	4b1f      	ldr	r3, [pc, #124]	@ (8003a4c <prvAddNewTaskToReadyList+0xcc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3301      	adds	r3, #1
 80039d4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a4c <prvAddNewTaskToReadyList+0xcc>)
 80039d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039d8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a4c <prvAddNewTaskToReadyList+0xcc>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e4:	2201      	movs	r2, #1
 80039e6:	409a      	lsls	r2, r3
 80039e8:	4b19      	ldr	r3, [pc, #100]	@ (8003a50 <prvAddNewTaskToReadyList+0xd0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	4a18      	ldr	r2, [pc, #96]	@ (8003a50 <prvAddNewTaskToReadyList+0xd0>)
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4a15      	ldr	r2, [pc, #84]	@ (8003a54 <prvAddNewTaskToReadyList+0xd4>)
 8003a00:	441a      	add	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f7ff fde3 	bl	80035d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a0e:	f000 fd85 	bl	800451c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a12:	4b0d      	ldr	r3, [pc, #52]	@ (8003a48 <prvAddNewTaskToReadyList+0xc8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00e      	beq.n	8003a38 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <prvAddNewTaskToReadyList+0xc4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d207      	bcs.n	8003a38 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a28:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <prvAddNewTaskToReadyList+0xd8>)
 8003a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20000690 	.word	0x20000690
 8003a44:	20000590 	.word	0x20000590
 8003a48:	2000069c 	.word	0x2000069c
 8003a4c:	200006ac 	.word	0x200006ac
 8003a50:	20000698 	.word	0x20000698
 8003a54:	20000594 	.word	0x20000594
 8003a58:	e000ed04 	.word	0xe000ed04

08003a5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d018      	beq.n	8003aa0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a6e:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <vTaskDelay+0x64>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <vTaskDelay+0x32>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	60bb      	str	r3, [r7, #8]
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	e7fd      	b.n	8003a8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a8e:	f000 f889 	bl	8003ba4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a92:	2100      	movs	r1, #0
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fb77 	bl	8004188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a9a:	f000 f891 	bl	8003bc0 <xTaskResumeAll>
 8003a9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d107      	bne.n	8003ab6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003aa6:	4b07      	ldr	r3, [pc, #28]	@ (8003ac4 <vTaskDelay+0x68>)
 8003aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200006b8 	.word	0x200006b8
 8003ac4:	e000ed04 	.word	0xe000ed04

08003ac8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	@ 0x28
 8003acc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ad6:	463a      	mov	r2, r7
 8003ad8:	1d39      	adds	r1, r7, #4
 8003ada:	f107 0308 	add.w	r3, r7, #8
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fd fa90 	bl	8001004 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ae4:	6839      	ldr	r1, [r7, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	9202      	str	r2, [sp, #8]
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	2300      	movs	r3, #0
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2300      	movs	r3, #0
 8003af4:	460a      	mov	r2, r1
 8003af6:	4923      	ldr	r1, [pc, #140]	@ (8003b84 <vTaskStartScheduler+0xbc>)
 8003af8:	4823      	ldr	r0, [pc, #140]	@ (8003b88 <vTaskStartScheduler+0xc0>)
 8003afa:	f7ff fdf2 	bl	80036e2 <xTaskCreateStatic>
 8003afe:	4603      	mov	r3, r0
 8003b00:	4a22      	ldr	r2, [pc, #136]	@ (8003b8c <vTaskStartScheduler+0xc4>)
 8003b02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b04:	4b21      	ldr	r3, [pc, #132]	@ (8003b8c <vTaskStartScheduler+0xc4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e001      	b.n	8003b16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d11f      	bne.n	8003b5c <vTaskStartScheduler+0x94>
	__asm volatile
 8003b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	613b      	str	r3, [r7, #16]
}
 8003b2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b30:	4b17      	ldr	r3, [pc, #92]	@ (8003b90 <vTaskStartScheduler+0xc8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3358      	adds	r3, #88	@ 0x58
 8003b36:	4a17      	ldr	r2, [pc, #92]	@ (8003b94 <vTaskStartScheduler+0xcc>)
 8003b38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b3a:	4b17      	ldr	r3, [pc, #92]	@ (8003b98 <vTaskStartScheduler+0xd0>)
 8003b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b42:	4b16      	ldr	r3, [pc, #88]	@ (8003b9c <vTaskStartScheduler+0xd4>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b48:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <vTaskStartScheduler+0xd8>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003b4e:	f7fd fa43 	bl	8000fd8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 8003b52:	f7fd f9a9 	bl	8000ea8 <taskSwitchedIn>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b56:	f000 fc0b 	bl	8004370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b5a:	e00f      	b.n	8003b7c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d10b      	bne.n	8003b7c <vTaskStartScheduler+0xb4>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	60fb      	str	r3, [r7, #12]
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <vTaskStartScheduler+0xb0>
}
 8003b7c:	bf00      	nop
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	0800743c 	.word	0x0800743c
 8003b88:	08003fb1 	.word	0x08003fb1
 8003b8c:	200006b4 	.word	0x200006b4
 8003b90:	20000590 	.word	0x20000590
 8003b94:	2000001c 	.word	0x2000001c
 8003b98:	200006b0 	.word	0x200006b0
 8003b9c:	2000069c 	.word	0x2000069c
 8003ba0:	20000694 	.word	0x20000694

08003ba4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ba8:	4b04      	ldr	r3, [pc, #16]	@ (8003bbc <vTaskSuspendAll+0x18>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3301      	adds	r3, #1
 8003bae:	4a03      	ldr	r2, [pc, #12]	@ (8003bbc <vTaskSuspendAll+0x18>)
 8003bb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	200006b8 	.word	0x200006b8

08003bc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bce:	4b42      	ldr	r3, [pc, #264]	@ (8003cd8 <xTaskResumeAll+0x118>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <xTaskResumeAll+0x2e>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	603b      	str	r3, [r7, #0]
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	e7fd      	b.n	8003bea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bee:	f000 fc63 	bl	80044b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bf2:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <xTaskResumeAll+0x118>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	4a37      	ldr	r2, [pc, #220]	@ (8003cd8 <xTaskResumeAll+0x118>)
 8003bfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bfc:	4b36      	ldr	r3, [pc, #216]	@ (8003cd8 <xTaskResumeAll+0x118>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d161      	bne.n	8003cc8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c04:	4b35      	ldr	r3, [pc, #212]	@ (8003cdc <xTaskResumeAll+0x11c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d05d      	beq.n	8003cc8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c0c:	e02e      	b.n	8003c6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c0e:	4b34      	ldr	r3, [pc, #208]	@ (8003ce0 <xTaskResumeAll+0x120>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3318      	adds	r3, #24
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fd37 	bl	800368e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fd32 	bl	800368e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	2201      	movs	r2, #1
 8003c30:	409a      	lsls	r2, r3
 8003c32:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce4 <xTaskResumeAll+0x124>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce4 <xTaskResumeAll+0x124>)
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4a27      	ldr	r2, [pc, #156]	@ (8003ce8 <xTaskResumeAll+0x128>)
 8003c4a:	441a      	add	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f7ff fcbe 	bl	80035d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c5c:	4b23      	ldr	r3, [pc, #140]	@ (8003cec <xTaskResumeAll+0x12c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c66:	4b22      	ldr	r3, [pc, #136]	@ (8003cf0 <xTaskResumeAll+0x130>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce0 <xTaskResumeAll+0x120>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1cc      	bne.n	8003c0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c7a:	f000 fa55 	bl	8004128 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf4 <xTaskResumeAll+0x134>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d010      	beq.n	8003cac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c8a:	f000 f855 	bl	8003d38 <xTaskIncrementTick>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c94:	4b16      	ldr	r3, [pc, #88]	@ (8003cf0 <xTaskResumeAll+0x130>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f1      	bne.n	8003c8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ca6:	4b13      	ldr	r3, [pc, #76]	@ (8003cf4 <xTaskResumeAll+0x134>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cac:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <xTaskResumeAll+0x130>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <xTaskResumeAll+0x138>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cc8:	f000 fc28 	bl	800451c <vPortExitCritical>

	return xAlreadyYielded;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200006b8 	.word	0x200006b8
 8003cdc:	20000690 	.word	0x20000690
 8003ce0:	20000650 	.word	0x20000650
 8003ce4:	20000698 	.word	0x20000698
 8003ce8:	20000594 	.word	0x20000594
 8003cec:	20000590 	.word	0x20000590
 8003cf0:	200006a4 	.word	0x200006a4
 8003cf4:	200006a0 	.word	0x200006a0
 8003cf8:	e000ed04 	.word	0xe000ed04

08003cfc <xTaskGetIdleTaskHandle>:
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )

	TaskHandle_t xTaskGetIdleTaskHandle( void )
	{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
 8003d02:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <xTaskGetIdleTaskHandle+0x38>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10b      	bne.n	8003d22 <xTaskGetIdleTaskHandle+0x26>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	607b      	str	r3, [r7, #4]
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	e7fd      	b.n	8003d1e <xTaskGetIdleTaskHandle+0x22>
		return xIdleTaskHandle;
 8003d22:	4b04      	ldr	r3, [pc, #16]	@ (8003d34 <xTaskGetIdleTaskHandle+0x38>)
 8003d24:	681b      	ldr	r3, [r3, #0]
	}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	200006b4 	.word	0x200006b4

08003d38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d42:	4b4f      	ldr	r3, [pc, #316]	@ (8003e80 <xTaskIncrementTick+0x148>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 808f 	bne.w	8003e6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8003e84 <xTaskIncrementTick+0x14c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d54:	4a4b      	ldr	r2, [pc, #300]	@ (8003e84 <xTaskIncrementTick+0x14c>)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d121      	bne.n	8003da4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d60:	4b49      	ldr	r3, [pc, #292]	@ (8003e88 <xTaskIncrementTick+0x150>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	603b      	str	r3, [r7, #0]
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	e7fd      	b.n	8003d7e <xTaskIncrementTick+0x46>
 8003d82:	4b41      	ldr	r3, [pc, #260]	@ (8003e88 <xTaskIncrementTick+0x150>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	4b40      	ldr	r3, [pc, #256]	@ (8003e8c <xTaskIncrementTick+0x154>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a3e      	ldr	r2, [pc, #248]	@ (8003e88 <xTaskIncrementTick+0x150>)
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	4a3e      	ldr	r2, [pc, #248]	@ (8003e8c <xTaskIncrementTick+0x154>)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b3e      	ldr	r3, [pc, #248]	@ (8003e90 <xTaskIncrementTick+0x158>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e90 <xTaskIncrementTick+0x158>)
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	f000 f9c2 	bl	8004128 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003da4:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <xTaskIncrementTick+0x15c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d348      	bcc.n	8003e40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dae:	4b36      	ldr	r3, [pc, #216]	@ (8003e88 <xTaskIncrementTick+0x150>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db8:	4b36      	ldr	r3, [pc, #216]	@ (8003e94 <xTaskIncrementTick+0x15c>)
 8003dba:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbe:	601a      	str	r2, [r3, #0]
					break;
 8003dc0:	e03e      	b.n	8003e40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc2:	4b31      	ldr	r3, [pc, #196]	@ (8003e88 <xTaskIncrementTick+0x150>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d203      	bcs.n	8003de2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dda:	4a2e      	ldr	r2, [pc, #184]	@ (8003e94 <xTaskIncrementTick+0x15c>)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003de0:	e02e      	b.n	8003e40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fc51 	bl	800368e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	3318      	adds	r3, #24
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fc48 	bl	800368e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	2201      	movs	r2, #1
 8003e04:	409a      	lsls	r2, r3
 8003e06:	4b24      	ldr	r3, [pc, #144]	@ (8003e98 <xTaskIncrementTick+0x160>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	4a22      	ldr	r2, [pc, #136]	@ (8003e98 <xTaskIncrementTick+0x160>)
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003e9c <xTaskIncrementTick+0x164>)
 8003e1e:	441a      	add	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4610      	mov	r0, r2
 8003e28:	f7ff fbd4 	bl	80035d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <xTaskIncrementTick+0x168>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d3b9      	bcc.n	8003dae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e3e:	e7b6      	b.n	8003dae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e40:	4b17      	ldr	r3, [pc, #92]	@ (8003ea0 <xTaskIncrementTick+0x168>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e46:	4915      	ldr	r1, [pc, #84]	@ (8003e9c <xTaskIncrementTick+0x164>)
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d901      	bls.n	8003e5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ea4 <xTaskIncrementTick+0x16c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003e64:	2301      	movs	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	e004      	b.n	8003e74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea8 <xTaskIncrementTick+0x170>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea8 <xTaskIncrementTick+0x170>)
 8003e72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e74:	697b      	ldr	r3, [r7, #20]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	200006b8 	.word	0x200006b8
 8003e84:	20000694 	.word	0x20000694
 8003e88:	20000648 	.word	0x20000648
 8003e8c:	2000064c 	.word	0x2000064c
 8003e90:	200006a8 	.word	0x200006a8
 8003e94:	200006b0 	.word	0x200006b0
 8003e98:	20000698 	.word	0x20000698
 8003e9c:	20000594 	.word	0x20000594
 8003ea0:	20000590 	.word	0x20000590
 8003ea4:	200006a4 	.word	0x200006a4
 8003ea8:	200006a0 	.word	0x200006a0

08003eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eb2:	4b37      	ldr	r3, [pc, #220]	@ (8003f90 <vTaskSwitchContext+0xe4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eba:	4b36      	ldr	r3, [pc, #216]	@ (8003f94 <vTaskSwitchContext+0xe8>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ec0:	e062      	b.n	8003f88 <vTaskSwitchContext+0xdc>
		xYieldPending = pdFALSE;
 8003ec2:	4b34      	ldr	r3, [pc, #208]	@ (8003f94 <vTaskSwitchContext+0xe8>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8003ec8:	f7fd f808 	bl	8000edc <taskSwitchedOut>
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003ecc:	f7fd f88e 	bl	8000fec <getRunTimeCounterValue>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4a31      	ldr	r2, [pc, #196]	@ (8003f98 <vTaskSwitchContext+0xec>)
 8003ed4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8003ed6:	4b30      	ldr	r3, [pc, #192]	@ (8003f98 <vTaskSwitchContext+0xec>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b30      	ldr	r3, [pc, #192]	@ (8003f9c <vTaskSwitchContext+0xf0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d909      	bls.n	8003ef6 <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8003ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa0 <vTaskSwitchContext+0xf4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f98 <vTaskSwitchContext+0xec>)
 8003eea:	6810      	ldr	r0, [r2, #0]
 8003eec:	4a2b      	ldr	r2, [pc, #172]	@ (8003f9c <vTaskSwitchContext+0xf0>)
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	1a82      	subs	r2, r0, r2
 8003ef2:	440a      	add	r2, r1
 8003ef4:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8003ef6:	4b28      	ldr	r3, [pc, #160]	@ (8003f98 <vTaskSwitchContext+0xec>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a28      	ldr	r2, [pc, #160]	@ (8003f9c <vTaskSwitchContext+0xf0>)
 8003efc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efe:	4b29      	ldr	r3, [pc, #164]	@ (8003fa4 <vTaskSwitchContext+0xf8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	fab3 f383 	clz	r3, r3
 8003f0a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f0c:	7afb      	ldrb	r3, [r7, #11]
 8003f0e:	f1c3 031f 	rsb	r3, r3, #31
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	4924      	ldr	r1, [pc, #144]	@ (8003fa8 <vTaskSwitchContext+0xfc>)
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10b      	bne.n	8003f40 <vTaskSwitchContext+0x94>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	607b      	str	r3, [r7, #4]
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	e7fd      	b.n	8003f3c <vTaskSwitchContext+0x90>
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4a17      	ldr	r2, [pc, #92]	@ (8003fa8 <vTaskSwitchContext+0xfc>)
 8003f4c:	4413      	add	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3308      	adds	r3, #8
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d104      	bne.n	8003f70 <vTaskSwitchContext+0xc4>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa0 <vTaskSwitchContext+0xf4>)
 8003f78:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003f7a:	f7fc ff95 	bl	8000ea8 <taskSwitchedIn>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <vTaskSwitchContext+0xf4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3358      	adds	r3, #88	@ 0x58
 8003f84:	4a09      	ldr	r2, [pc, #36]	@ (8003fac <vTaskSwitchContext+0x100>)
 8003f86:	6013      	str	r3, [r2, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	200006b8 	.word	0x200006b8
 8003f94:	200006a4 	.word	0x200006a4
 8003f98:	200006c0 	.word	0x200006c0
 8003f9c:	200006bc 	.word	0x200006bc
 8003fa0:	20000590 	.word	0x20000590
 8003fa4:	20000698 	.word	0x20000698
 8003fa8:	20000594 	.word	0x20000594
 8003fac:	2000001c 	.word	0x2000001c

08003fb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fb8:	f000 f852 	bl	8004060 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fbc:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <prvIdleTask+0x28>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d9f9      	bls.n	8003fb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fc4:	4b05      	ldr	r3, [pc, #20]	@ (8003fdc <prvIdleTask+0x2c>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fd4:	e7f0      	b.n	8003fb8 <prvIdleTask+0x8>
 8003fd6:	bf00      	nop
 8003fd8:	20000594 	.word	0x20000594
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	e00c      	b.n	8004006 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4a12      	ldr	r2, [pc, #72]	@ (8004040 <prvInitialiseTaskLists+0x60>)
 8003ff8:	4413      	add	r3, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fabd 	bl	800357a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3301      	adds	r3, #1
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b06      	cmp	r3, #6
 800400a:	d9ef      	bls.n	8003fec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800400c:	480d      	ldr	r0, [pc, #52]	@ (8004044 <prvInitialiseTaskLists+0x64>)
 800400e:	f7ff fab4 	bl	800357a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004012:	480d      	ldr	r0, [pc, #52]	@ (8004048 <prvInitialiseTaskLists+0x68>)
 8004014:	f7ff fab1 	bl	800357a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004018:	480c      	ldr	r0, [pc, #48]	@ (800404c <prvInitialiseTaskLists+0x6c>)
 800401a:	f7ff faae 	bl	800357a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800401e:	480c      	ldr	r0, [pc, #48]	@ (8004050 <prvInitialiseTaskLists+0x70>)
 8004020:	f7ff faab 	bl	800357a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004024:	480b      	ldr	r0, [pc, #44]	@ (8004054 <prvInitialiseTaskLists+0x74>)
 8004026:	f7ff faa8 	bl	800357a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800402a:	4b0b      	ldr	r3, [pc, #44]	@ (8004058 <prvInitialiseTaskLists+0x78>)
 800402c:	4a05      	ldr	r2, [pc, #20]	@ (8004044 <prvInitialiseTaskLists+0x64>)
 800402e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004030:	4b0a      	ldr	r3, [pc, #40]	@ (800405c <prvInitialiseTaskLists+0x7c>)
 8004032:	4a05      	ldr	r2, [pc, #20]	@ (8004048 <prvInitialiseTaskLists+0x68>)
 8004034:	601a      	str	r2, [r3, #0]
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000594 	.word	0x20000594
 8004044:	20000620 	.word	0x20000620
 8004048:	20000634 	.word	0x20000634
 800404c:	20000650 	.word	0x20000650
 8004050:	20000664 	.word	0x20000664
 8004054:	2000067c 	.word	0x2000067c
 8004058:	20000648 	.word	0x20000648
 800405c:	2000064c 	.word	0x2000064c

08004060 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004066:	e019      	b.n	800409c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004068:	f000 fa26 	bl	80044b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800406c:	4b10      	ldr	r3, [pc, #64]	@ (80040b0 <prvCheckTasksWaitingTermination+0x50>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fb08 	bl	800368e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800407e:	4b0d      	ldr	r3, [pc, #52]	@ (80040b4 <prvCheckTasksWaitingTermination+0x54>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3b01      	subs	r3, #1
 8004084:	4a0b      	ldr	r2, [pc, #44]	@ (80040b4 <prvCheckTasksWaitingTermination+0x54>)
 8004086:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <prvCheckTasksWaitingTermination+0x58>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3b01      	subs	r3, #1
 800408e:	4a0a      	ldr	r2, [pc, #40]	@ (80040b8 <prvCheckTasksWaitingTermination+0x58>)
 8004090:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004092:	f000 fa43 	bl	800451c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f810 	bl	80040bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800409c:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <prvCheckTasksWaitingTermination+0x58>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e1      	bne.n	8004068 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000664 	.word	0x20000664
 80040b4:	20000690 	.word	0x20000690
 80040b8:	20000678 	.word	0x20000678

080040bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3358      	adds	r3, #88	@ 0x58
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 fa3d 	bl	8005548 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d108      	bne.n	80040ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fb99 	bl	8004814 <vPortFree>
				vPortFree( pxTCB );
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fb96 	bl	8004814 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040e8:	e019      	b.n	800411e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d103      	bne.n	80040fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fb8d 	bl	8004814 <vPortFree>
	}
 80040fa:	e010      	b.n	800411e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8004102:	2b02      	cmp	r3, #2
 8004104:	d00b      	beq.n	800411e <prvDeleteTCB+0x62>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60fb      	str	r3, [r7, #12]
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	e7fd      	b.n	800411a <prvDeleteTCB+0x5e>
	}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800412e:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <prvResetNextTaskUnblockTime+0x38>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004138:	4b0a      	ldr	r3, [pc, #40]	@ (8004164 <prvResetNextTaskUnblockTime+0x3c>)
 800413a:	f04f 32ff 	mov.w	r2, #4294967295
 800413e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004140:	e008      	b.n	8004154 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004142:	4b07      	ldr	r3, [pc, #28]	@ (8004160 <prvResetNextTaskUnblockTime+0x38>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a04      	ldr	r2, [pc, #16]	@ (8004164 <prvResetNextTaskUnblockTime+0x3c>)
 8004152:	6013      	str	r3, [r2, #0]
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	20000648 	.word	0x20000648
 8004164:	200006b0 	.word	0x200006b0

08004168 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800416e:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <xTaskGetCurrentTaskHandle+0x1c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004174:	687b      	ldr	r3, [r7, #4]
	}
 8004176:	4618      	mov	r0, r3
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000590 	.word	0x20000590

08004188 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004192:	4b29      	ldr	r3, [pc, #164]	@ (8004238 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004198:	4b28      	ldr	r3, [pc, #160]	@ (800423c <prvAddCurrentTaskToDelayedList+0xb4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3304      	adds	r3, #4
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fa75 	bl	800368e <uxListRemove>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80041aa:	4b24      	ldr	r3, [pc, #144]	@ (800423c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	2201      	movs	r2, #1
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43da      	mvns	r2, r3
 80041b8:	4b21      	ldr	r3, [pc, #132]	@ (8004240 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4013      	ands	r3, r2
 80041be:	4a20      	ldr	r2, [pc, #128]	@ (8004240 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d10a      	bne.n	80041e0 <prvAddCurrentTaskToDelayedList+0x58>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041d0:	4b1a      	ldr	r3, [pc, #104]	@ (800423c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3304      	adds	r3, #4
 80041d6:	4619      	mov	r1, r3
 80041d8:	481a      	ldr	r0, [pc, #104]	@ (8004244 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041da:	f7ff f9fb 	bl	80035d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041de:	e026      	b.n	800422e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4413      	add	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041e8:	4b14      	ldr	r3, [pc, #80]	@ (800423c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d209      	bcs.n	800420c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041f8:	4b13      	ldr	r3, [pc, #76]	@ (8004248 <prvAddCurrentTaskToDelayedList+0xc0>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4b0f      	ldr	r3, [pc, #60]	@ (800423c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3304      	adds	r3, #4
 8004202:	4619      	mov	r1, r3
 8004204:	4610      	mov	r0, r2
 8004206:	f7ff fa09 	bl	800361c <vListInsert>
}
 800420a:	e010      	b.n	800422e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800420c:	4b0f      	ldr	r3, [pc, #60]	@ (800424c <prvAddCurrentTaskToDelayedList+0xc4>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3304      	adds	r3, #4
 8004216:	4619      	mov	r1, r3
 8004218:	4610      	mov	r0, r2
 800421a:	f7ff f9ff 	bl	800361c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800421e:	4b0c      	ldr	r3, [pc, #48]	@ (8004250 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	429a      	cmp	r2, r3
 8004226:	d202      	bcs.n	800422e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004228:	4a09      	ldr	r2, [pc, #36]	@ (8004250 <prvAddCurrentTaskToDelayedList+0xc8>)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6013      	str	r3, [r2, #0]
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20000694 	.word	0x20000694
 800423c:	20000590 	.word	0x20000590
 8004240:	20000698 	.word	0x20000698
 8004244:	2000067c 	.word	0x2000067c
 8004248:	2000064c 	.word	0x2000064c
 800424c:	20000648 	.word	0x20000648
 8004250:	200006b0 	.word	0x200006b0

08004254 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3b04      	subs	r3, #4
 8004264:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800426c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3b04      	subs	r3, #4
 8004272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b04      	subs	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004284:	4a0c      	ldr	r2, [pc, #48]	@ (80042b8 <pxPortInitialiseStack+0x64>)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b14      	subs	r3, #20
 800428e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3b04      	subs	r3, #4
 800429a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f06f 0202 	mvn.w	r2, #2
 80042a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3b20      	subs	r3, #32
 80042a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042aa:	68fb      	ldr	r3, [r7, #12]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	080042bd 	.word	0x080042bd

080042bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042c6:	4b13      	ldr	r3, [pc, #76]	@ (8004314 <prvTaskExitError+0x58>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d00b      	beq.n	80042e8 <prvTaskExitError+0x2c>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60fb      	str	r3, [r7, #12]
}
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <prvTaskExitError+0x28>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	60bb      	str	r3, [r7, #8]
}
 80042fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042fc:	bf00      	nop
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0fc      	beq.n	80042fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	2000000c 	.word	0x2000000c
	...

08004320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004320:	4b07      	ldr	r3, [pc, #28]	@ (8004340 <pxCurrentTCBConst2>)
 8004322:	6819      	ldr	r1, [r3, #0]
 8004324:	6808      	ldr	r0, [r1, #0]
 8004326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432a:	f380 8809 	msr	PSP, r0
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8811 	msr	BASEPRI, r0
 800433a:	4770      	bx	lr
 800433c:	f3af 8000 	nop.w

08004340 <pxCurrentTCBConst2>:
 8004340:	20000590 	.word	0x20000590
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop

08004348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004348:	4808      	ldr	r0, [pc, #32]	@ (800436c <prvPortStartFirstTask+0x24>)
 800434a:	6800      	ldr	r0, [r0, #0]
 800434c:	6800      	ldr	r0, [r0, #0]
 800434e:	f380 8808 	msr	MSP, r0
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f380 8814 	msr	CONTROL, r0
 800435a:	b662      	cpsie	i
 800435c:	b661      	cpsie	f
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	df00      	svc	0
 8004368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800436a:	bf00      	nop
 800436c:	e000ed08 	.word	0xe000ed08

08004370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004376:	4b47      	ldr	r3, [pc, #284]	@ (8004494 <xPortStartScheduler+0x124>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a47      	ldr	r2, [pc, #284]	@ (8004498 <xPortStartScheduler+0x128>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d10b      	bne.n	8004398 <xPortStartScheduler+0x28>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	613b      	str	r3, [r7, #16]
}
 8004392:	bf00      	nop
 8004394:	bf00      	nop
 8004396:	e7fd      	b.n	8004394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004398:	4b3e      	ldr	r3, [pc, #248]	@ (8004494 <xPortStartScheduler+0x124>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a3f      	ldr	r2, [pc, #252]	@ (800449c <xPortStartScheduler+0x12c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10b      	bne.n	80043ba <xPortStartScheduler+0x4a>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	60fb      	str	r3, [r7, #12]
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	e7fd      	b.n	80043b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043ba:	4b39      	ldr	r3, [pc, #228]	@ (80044a0 <xPortStartScheduler+0x130>)
 80043bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	22ff      	movs	r2, #255	@ 0xff
 80043ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <xPortStartScheduler+0x134>)
 80043e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043e2:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <xPortStartScheduler+0x138>)
 80043e4:	2207      	movs	r2, #7
 80043e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043e8:	e009      	b.n	80043fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80043ea:	4b2f      	ldr	r3, [pc, #188]	@ (80044a8 <xPortStartScheduler+0x138>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	4a2d      	ldr	r2, [pc, #180]	@ (80044a8 <xPortStartScheduler+0x138>)
 80043f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004406:	2b80      	cmp	r3, #128	@ 0x80
 8004408:	d0ef      	beq.n	80043ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800440a:	4b27      	ldr	r3, [pc, #156]	@ (80044a8 <xPortStartScheduler+0x138>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f1c3 0307 	rsb	r3, r3, #7
 8004412:	2b04      	cmp	r3, #4
 8004414:	d00b      	beq.n	800442e <xPortStartScheduler+0xbe>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	60bb      	str	r3, [r7, #8]
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	e7fd      	b.n	800442a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800442e:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <xPortStartScheduler+0x138>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	4a1c      	ldr	r2, [pc, #112]	@ (80044a8 <xPortStartScheduler+0x138>)
 8004436:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004438:	4b1b      	ldr	r3, [pc, #108]	@ (80044a8 <xPortStartScheduler+0x138>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004440:	4a19      	ldr	r2, [pc, #100]	@ (80044a8 <xPortStartScheduler+0x138>)
 8004442:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800444c:	4b17      	ldr	r3, [pc, #92]	@ (80044ac <xPortStartScheduler+0x13c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a16      	ldr	r2, [pc, #88]	@ (80044ac <xPortStartScheduler+0x13c>)
 8004452:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004456:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004458:	4b14      	ldr	r3, [pc, #80]	@ (80044ac <xPortStartScheduler+0x13c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a13      	ldr	r2, [pc, #76]	@ (80044ac <xPortStartScheduler+0x13c>)
 800445e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004462:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004464:	f000 f8da 	bl	800461c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004468:	4b11      	ldr	r3, [pc, #68]	@ (80044b0 <xPortStartScheduler+0x140>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800446e:	f000 f8f9 	bl	8004664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004472:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <xPortStartScheduler+0x144>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a0f      	ldr	r2, [pc, #60]	@ (80044b4 <xPortStartScheduler+0x144>)
 8004478:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800447c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800447e:	f7ff ff63 	bl	8004348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004482:	f7ff fd13 	bl	8003eac <vTaskSwitchContext>
	prvTaskExitError();
 8004486:	f7ff ff19 	bl	80042bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	e000ed00 	.word	0xe000ed00
 8004498:	410fc271 	.word	0x410fc271
 800449c:	410fc270 	.word	0x410fc270
 80044a0:	e000e400 	.word	0xe000e400
 80044a4:	200006c4 	.word	0x200006c4
 80044a8:	200006c8 	.word	0x200006c8
 80044ac:	e000ed20 	.word	0xe000ed20
 80044b0:	2000000c 	.word	0x2000000c
 80044b4:	e000ef34 	.word	0xe000ef34

080044b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	607b      	str	r3, [r7, #4]
}
 80044d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044d2:	4b10      	ldr	r3, [pc, #64]	@ (8004514 <vPortEnterCritical+0x5c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3301      	adds	r3, #1
 80044d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004514 <vPortEnterCritical+0x5c>)
 80044da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <vPortEnterCritical+0x5c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d110      	bne.n	8004506 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004518 <vPortEnterCritical+0x60>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <vPortEnterCritical+0x4e>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	603b      	str	r3, [r7, #0]
}
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	e7fd      	b.n	8004502 <vPortEnterCritical+0x4a>
	}
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	2000000c 	.word	0x2000000c
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004522:	4b12      	ldr	r3, [pc, #72]	@ (800456c <vPortExitCritical+0x50>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <vPortExitCritical+0x26>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	607b      	str	r3, [r7, #4]
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	e7fd      	b.n	800453e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <vPortExitCritical+0x50>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3b01      	subs	r3, #1
 8004548:	4a08      	ldr	r2, [pc, #32]	@ (800456c <vPortExitCritical+0x50>)
 800454a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800454c:	4b07      	ldr	r3, [pc, #28]	@ (800456c <vPortExitCritical+0x50>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d105      	bne.n	8004560 <vPortExitCritical+0x44>
 8004554:	2300      	movs	r3, #0
 8004556:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800455e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	2000000c 	.word	0x2000000c

08004570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004570:	f3ef 8009 	mrs	r0, PSP
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	4b15      	ldr	r3, [pc, #84]	@ (80045d0 <pxCurrentTCBConst>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f01e 0f10 	tst.w	lr, #16
 8004580:	bf08      	it	eq
 8004582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800458a:	6010      	str	r0, [r2, #0]
 800458c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004590:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004594:	f380 8811 	msr	BASEPRI, r0
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f7ff fc84 	bl	8003eac <vTaskSwitchContext>
 80045a4:	f04f 0000 	mov.w	r0, #0
 80045a8:	f380 8811 	msr	BASEPRI, r0
 80045ac:	bc09      	pop	{r0, r3}
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	6808      	ldr	r0, [r1, #0]
 80045b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b6:	f01e 0f10 	tst.w	lr, #16
 80045ba:	bf08      	it	eq
 80045bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045c0:	f380 8809 	msr	PSP, r0
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	f3af 8000 	nop.w

080045d0 <pxCurrentTCBConst>:
 80045d0:	20000590 	.word	0x20000590
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop

080045d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
}
 80045f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045f2:	f7ff fba1 	bl	8003d38 <xTaskIncrementTick>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045fc:	4b06      	ldr	r3, [pc, #24]	@ (8004618 <SysTick_Handler+0x40>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	2300      	movs	r3, #0
 8004606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f383 8811 	msr	BASEPRI, r3
}
 800460e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <vPortSetupTimerInterrupt+0x34>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004626:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <vPortSetupTimerInterrupt+0x38>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800462c:	4b0a      	ldr	r3, [pc, #40]	@ (8004658 <vPortSetupTimerInterrupt+0x3c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a0a      	ldr	r2, [pc, #40]	@ (800465c <vPortSetupTimerInterrupt+0x40>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <vPortSetupTimerInterrupt+0x44>)
 800463a:	3b01      	subs	r3, #1
 800463c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800463e:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <vPortSetupTimerInterrupt+0x34>)
 8004640:	2207      	movs	r2, #7
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000e010 	.word	0xe000e010
 8004654:	e000e018 	.word	0xe000e018
 8004658:	20000000 	.word	0x20000000
 800465c:	10624dd3 	.word	0x10624dd3
 8004660:	e000e014 	.word	0xe000e014

08004664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004664:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004674 <vPortEnableVFP+0x10>
 8004668:	6801      	ldr	r1, [r0, #0]
 800466a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800466e:	6001      	str	r1, [r0, #0]
 8004670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004672:	bf00      	nop
 8004674:	e000ed88 	.word	0xe000ed88

08004678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	@ 0x28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004684:	f7ff fa8e 	bl	8003ba4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004688:	4b5c      	ldr	r3, [pc, #368]	@ (80047fc <pvPortMalloc+0x184>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004690:	f000 f924 	bl	80048dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004694:	4b5a      	ldr	r3, [pc, #360]	@ (8004800 <pvPortMalloc+0x188>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	f040 8095 	bne.w	80047cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01e      	beq.n	80046e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80046a8:	2208      	movs	r2, #8
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d015      	beq.n	80046e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f023 0307 	bic.w	r3, r3, #7
 80046c0:	3308      	adds	r3, #8
 80046c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <pvPortMalloc+0x6e>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	617b      	str	r3, [r7, #20]
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d06f      	beq.n	80047cc <pvPortMalloc+0x154>
 80046ec:	4b45      	ldr	r3, [pc, #276]	@ (8004804 <pvPortMalloc+0x18c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d86a      	bhi.n	80047cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046f6:	4b44      	ldr	r3, [pc, #272]	@ (8004808 <pvPortMalloc+0x190>)
 80046f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046fa:	4b43      	ldr	r3, [pc, #268]	@ (8004808 <pvPortMalloc+0x190>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004700:	e004      	b.n	800470c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d903      	bls.n	800471e <pvPortMalloc+0xa6>
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f1      	bne.n	8004702 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800471e:	4b37      	ldr	r3, [pc, #220]	@ (80047fc <pvPortMalloc+0x184>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004724:	429a      	cmp	r2, r3
 8004726:	d051      	beq.n	80047cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2208      	movs	r2, #8
 800472e:	4413      	add	r3, r2
 8004730:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	1ad2      	subs	r2, r2, r3
 8004742:	2308      	movs	r3, #8
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	429a      	cmp	r2, r3
 8004748:	d920      	bls.n	800478c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800474a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4413      	add	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <pvPortMalloc+0xfc>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	613b      	str	r3, [r7, #16]
}
 800476e:	bf00      	nop
 8004770:	bf00      	nop
 8004772:	e7fd      	b.n	8004770 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004786:	69b8      	ldr	r0, [r7, #24]
 8004788:	f000 f90a 	bl	80049a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800478c:	4b1d      	ldr	r3, [pc, #116]	@ (8004804 <pvPortMalloc+0x18c>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	4a1b      	ldr	r2, [pc, #108]	@ (8004804 <pvPortMalloc+0x18c>)
 8004798:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800479a:	4b1a      	ldr	r3, [pc, #104]	@ (8004804 <pvPortMalloc+0x18c>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <pvPortMalloc+0x194>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d203      	bcs.n	80047ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047a6:	4b17      	ldr	r3, [pc, #92]	@ (8004804 <pvPortMalloc+0x18c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a18      	ldr	r2, [pc, #96]	@ (800480c <pvPortMalloc+0x194>)
 80047ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	4b13      	ldr	r3, [pc, #76]	@ (8004800 <pvPortMalloc+0x188>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80047c2:	4b13      	ldr	r3, [pc, #76]	@ (8004810 <pvPortMalloc+0x198>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3301      	adds	r3, #1
 80047c8:	4a11      	ldr	r2, [pc, #68]	@ (8004810 <pvPortMalloc+0x198>)
 80047ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047cc:	f7ff f9f8 	bl	8003bc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00b      	beq.n	80047f2 <pvPortMalloc+0x17a>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	60fb      	str	r3, [r7, #12]
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	e7fd      	b.n	80047ee <pvPortMalloc+0x176>
	return pvReturn;
 80047f2:	69fb      	ldr	r3, [r7, #28]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3728      	adds	r7, #40	@ 0x28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	200042d4 	.word	0x200042d4
 8004800:	200042e8 	.word	0x200042e8
 8004804:	200042d8 	.word	0x200042d8
 8004808:	200042cc 	.word	0x200042cc
 800480c:	200042dc 	.word	0x200042dc
 8004810:	200042e0 	.word	0x200042e0

08004814 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d04f      	beq.n	80048c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004826:	2308      	movs	r3, #8
 8004828:	425b      	negs	r3, r3
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4413      	add	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	4b25      	ldr	r3, [pc, #148]	@ (80048d0 <vPortFree+0xbc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4013      	ands	r3, r2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10b      	bne.n	800485a <vPortFree+0x46>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	60fb      	str	r3, [r7, #12]
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	e7fd      	b.n	8004856 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00b      	beq.n	800487a <vPortFree+0x66>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	60bb      	str	r3, [r7, #8]
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	4b14      	ldr	r3, [pc, #80]	@ (80048d0 <vPortFree+0xbc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4013      	ands	r3, r2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01e      	beq.n	80048c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11a      	bne.n	80048c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	4b0e      	ldr	r3, [pc, #56]	@ (80048d0 <vPortFree+0xbc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	43db      	mvns	r3, r3
 800489a:	401a      	ands	r2, r3
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048a0:	f7ff f980 	bl	8003ba4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <vPortFree+0xc0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4413      	add	r3, r2
 80048ae:	4a09      	ldr	r2, [pc, #36]	@ (80048d4 <vPortFree+0xc0>)
 80048b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048b2:	6938      	ldr	r0, [r7, #16]
 80048b4:	f000 f874 	bl	80049a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80048b8:	4b07      	ldr	r3, [pc, #28]	@ (80048d8 <vPortFree+0xc4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a06      	ldr	r2, [pc, #24]	@ (80048d8 <vPortFree+0xc4>)
 80048c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80048c2:	f7ff f97d 	bl	8003bc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048c6:	bf00      	nop
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	200042e8 	.word	0x200042e8
 80048d4:	200042d8 	.word	0x200042d8
 80048d8:	200042e4 	.word	0x200042e4

080048dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80048e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048e8:	4b27      	ldr	r3, [pc, #156]	@ (8004988 <prvHeapInit+0xac>)
 80048ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3307      	adds	r3, #7
 80048fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0307 	bic.w	r3, r3, #7
 8004902:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <prvHeapInit+0xac>)
 800490c:	4413      	add	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004914:	4a1d      	ldr	r2, [pc, #116]	@ (800498c <prvHeapInit+0xb0>)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800491a:	4b1c      	ldr	r3, [pc, #112]	@ (800498c <prvHeapInit+0xb0>)
 800491c:	2200      	movs	r2, #0
 800491e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	4413      	add	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004928:	2208      	movs	r2, #8
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0307 	bic.w	r3, r3, #7
 8004936:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4a15      	ldr	r2, [pc, #84]	@ (8004990 <prvHeapInit+0xb4>)
 800493c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800493e:	4b14      	ldr	r3, [pc, #80]	@ (8004990 <prvHeapInit+0xb4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2200      	movs	r2, #0
 8004944:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004946:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <prvHeapInit+0xb4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	1ad2      	subs	r2, r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800495c:	4b0c      	ldr	r3, [pc, #48]	@ (8004990 <prvHeapInit+0xb4>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4a0a      	ldr	r2, [pc, #40]	@ (8004994 <prvHeapInit+0xb8>)
 800496a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	4a09      	ldr	r2, [pc, #36]	@ (8004998 <prvHeapInit+0xbc>)
 8004972:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004974:	4b09      	ldr	r3, [pc, #36]	@ (800499c <prvHeapInit+0xc0>)
 8004976:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800497a:	601a      	str	r2, [r3, #0]
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	200006cc 	.word	0x200006cc
 800498c:	200042cc 	.word	0x200042cc
 8004990:	200042d4 	.word	0x200042d4
 8004994:	200042dc 	.word	0x200042dc
 8004998:	200042d8 	.word	0x200042d8
 800499c:	200042e8 	.word	0x200042e8

080049a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049a8:	4b28      	ldr	r3, [pc, #160]	@ (8004a4c <prvInsertBlockIntoFreeList+0xac>)
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e002      	b.n	80049b4 <prvInsertBlockIntoFreeList+0x14>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d8f7      	bhi.n	80049ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	4413      	add	r3, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d108      	bne.n	80049e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	441a      	add	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	441a      	add	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d118      	bne.n	8004a28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b15      	ldr	r3, [pc, #84]	@ (8004a50 <prvInsertBlockIntoFreeList+0xb0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d00d      	beq.n	8004a1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	441a      	add	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	e008      	b.n	8004a30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a50 <prvInsertBlockIntoFreeList+0xb0>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	e003      	b.n	8004a30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d002      	beq.n	8004a3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	200042cc 	.word	0x200042cc
 8004a50:	200042d4 	.word	0x200042d4

08004a54 <__cvt>:
 8004a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a58:	ec57 6b10 	vmov	r6, r7, d0
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	4619      	mov	r1, r3
 8004a62:	463b      	mov	r3, r7
 8004a64:	bfbb      	ittet	lt
 8004a66:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004a6a:	461f      	movlt	r7, r3
 8004a6c:	2300      	movge	r3, #0
 8004a6e:	232d      	movlt	r3, #45	@ 0x2d
 8004a70:	700b      	strb	r3, [r1, #0]
 8004a72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a74:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004a78:	4691      	mov	r9, r2
 8004a7a:	f023 0820 	bic.w	r8, r3, #32
 8004a7e:	bfbc      	itt	lt
 8004a80:	4632      	movlt	r2, r6
 8004a82:	4616      	movlt	r6, r2
 8004a84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a88:	d005      	beq.n	8004a96 <__cvt+0x42>
 8004a8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a8e:	d100      	bne.n	8004a92 <__cvt+0x3e>
 8004a90:	3401      	adds	r4, #1
 8004a92:	2102      	movs	r1, #2
 8004a94:	e000      	b.n	8004a98 <__cvt+0x44>
 8004a96:	2103      	movs	r1, #3
 8004a98:	ab03      	add	r3, sp, #12
 8004a9a:	9301      	str	r3, [sp, #4]
 8004a9c:	ab02      	add	r3, sp, #8
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	ec47 6b10 	vmov	d0, r6, r7
 8004aa4:	4653      	mov	r3, sl
 8004aa6:	4622      	mov	r2, r4
 8004aa8:	f000 fe9e 	bl	80057e8 <_dtoa_r>
 8004aac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	d119      	bne.n	8004ae8 <__cvt+0x94>
 8004ab4:	f019 0f01 	tst.w	r9, #1
 8004ab8:	d00e      	beq.n	8004ad8 <__cvt+0x84>
 8004aba:	eb00 0904 	add.w	r9, r0, r4
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	f7fc f807 	bl	8000ad8 <__aeabi_dcmpeq>
 8004aca:	b108      	cbz	r0, 8004ad0 <__cvt+0x7c>
 8004acc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ad0:	2230      	movs	r2, #48	@ 0x30
 8004ad2:	9b03      	ldr	r3, [sp, #12]
 8004ad4:	454b      	cmp	r3, r9
 8004ad6:	d31e      	bcc.n	8004b16 <__cvt+0xc2>
 8004ad8:	9b03      	ldr	r3, [sp, #12]
 8004ada:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004adc:	1b5b      	subs	r3, r3, r5
 8004ade:	4628      	mov	r0, r5
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	b004      	add	sp, #16
 8004ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004aec:	eb00 0904 	add.w	r9, r0, r4
 8004af0:	d1e5      	bne.n	8004abe <__cvt+0x6a>
 8004af2:	7803      	ldrb	r3, [r0, #0]
 8004af4:	2b30      	cmp	r3, #48	@ 0x30
 8004af6:	d10a      	bne.n	8004b0e <__cvt+0xba>
 8004af8:	2200      	movs	r2, #0
 8004afa:	2300      	movs	r3, #0
 8004afc:	4630      	mov	r0, r6
 8004afe:	4639      	mov	r1, r7
 8004b00:	f7fb ffea 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b04:	b918      	cbnz	r0, 8004b0e <__cvt+0xba>
 8004b06:	f1c4 0401 	rsb	r4, r4, #1
 8004b0a:	f8ca 4000 	str.w	r4, [sl]
 8004b0e:	f8da 3000 	ldr.w	r3, [sl]
 8004b12:	4499      	add	r9, r3
 8004b14:	e7d3      	b.n	8004abe <__cvt+0x6a>
 8004b16:	1c59      	adds	r1, r3, #1
 8004b18:	9103      	str	r1, [sp, #12]
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e7d9      	b.n	8004ad2 <__cvt+0x7e>

08004b1e <__exponent>:
 8004b1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b20:	2900      	cmp	r1, #0
 8004b22:	bfba      	itte	lt
 8004b24:	4249      	neglt	r1, r1
 8004b26:	232d      	movlt	r3, #45	@ 0x2d
 8004b28:	232b      	movge	r3, #43	@ 0x2b
 8004b2a:	2909      	cmp	r1, #9
 8004b2c:	7002      	strb	r2, [r0, #0]
 8004b2e:	7043      	strb	r3, [r0, #1]
 8004b30:	dd29      	ble.n	8004b86 <__exponent+0x68>
 8004b32:	f10d 0307 	add.w	r3, sp, #7
 8004b36:	461d      	mov	r5, r3
 8004b38:	270a      	movs	r7, #10
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b40:	fb07 1416 	mls	r4, r7, r6, r1
 8004b44:	3430      	adds	r4, #48	@ 0x30
 8004b46:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	2c63      	cmp	r4, #99	@ 0x63
 8004b4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b52:	4631      	mov	r1, r6
 8004b54:	dcf1      	bgt.n	8004b3a <__exponent+0x1c>
 8004b56:	3130      	adds	r1, #48	@ 0x30
 8004b58:	1e94      	subs	r4, r2, #2
 8004b5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b5e:	1c41      	adds	r1, r0, #1
 8004b60:	4623      	mov	r3, r4
 8004b62:	42ab      	cmp	r3, r5
 8004b64:	d30a      	bcc.n	8004b7c <__exponent+0x5e>
 8004b66:	f10d 0309 	add.w	r3, sp, #9
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	42ac      	cmp	r4, r5
 8004b6e:	bf88      	it	hi
 8004b70:	2300      	movhi	r3, #0
 8004b72:	3302      	adds	r3, #2
 8004b74:	4403      	add	r3, r0
 8004b76:	1a18      	subs	r0, r3, r0
 8004b78:	b003      	add	sp, #12
 8004b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b80:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b84:	e7ed      	b.n	8004b62 <__exponent+0x44>
 8004b86:	2330      	movs	r3, #48	@ 0x30
 8004b88:	3130      	adds	r1, #48	@ 0x30
 8004b8a:	7083      	strb	r3, [r0, #2]
 8004b8c:	70c1      	strb	r1, [r0, #3]
 8004b8e:	1d03      	adds	r3, r0, #4
 8004b90:	e7f1      	b.n	8004b76 <__exponent+0x58>
	...

08004b94 <_printf_float>:
 8004b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	b08d      	sub	sp, #52	@ 0x34
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ba0:	4616      	mov	r6, r2
 8004ba2:	461f      	mov	r7, r3
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	f000 fcbb 	bl	8005520 <_localeconv_r>
 8004baa:	6803      	ldr	r3, [r0, #0]
 8004bac:	9304      	str	r3, [sp, #16]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fb fb66 	bl	8000280 <strlen>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8004bbc:	9005      	str	r0, [sp, #20]
 8004bbe:	3307      	adds	r3, #7
 8004bc0:	f023 0307 	bic.w	r3, r3, #7
 8004bc4:	f103 0208 	add.w	r2, r3, #8
 8004bc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004bcc:	f8d4 b000 	ldr.w	fp, [r4]
 8004bd0:	f8c8 2000 	str.w	r2, [r8]
 8004bd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004bdc:	9307      	str	r3, [sp, #28]
 8004bde:	f8cd 8018 	str.w	r8, [sp, #24]
 8004be2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004be6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bea:	4b9c      	ldr	r3, [pc, #624]	@ (8004e5c <_printf_float+0x2c8>)
 8004bec:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf0:	f7fb ffa4 	bl	8000b3c <__aeabi_dcmpun>
 8004bf4:	bb70      	cbnz	r0, 8004c54 <_printf_float+0xc0>
 8004bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bfa:	4b98      	ldr	r3, [pc, #608]	@ (8004e5c <_printf_float+0x2c8>)
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	f7fb ff7e 	bl	8000b00 <__aeabi_dcmple>
 8004c04:	bb30      	cbnz	r0, 8004c54 <_printf_float+0xc0>
 8004c06:	2200      	movs	r2, #0
 8004c08:	2300      	movs	r3, #0
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	f7fb ff6d 	bl	8000aec <__aeabi_dcmplt>
 8004c12:	b110      	cbz	r0, 8004c1a <_printf_float+0x86>
 8004c14:	232d      	movs	r3, #45	@ 0x2d
 8004c16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c1a:	4a91      	ldr	r2, [pc, #580]	@ (8004e60 <_printf_float+0x2cc>)
 8004c1c:	4b91      	ldr	r3, [pc, #580]	@ (8004e64 <_printf_float+0x2d0>)
 8004c1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c22:	bf94      	ite	ls
 8004c24:	4690      	movls	r8, r2
 8004c26:	4698      	movhi	r8, r3
 8004c28:	2303      	movs	r3, #3
 8004c2a:	6123      	str	r3, [r4, #16]
 8004c2c:	f02b 0304 	bic.w	r3, fp, #4
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	f04f 0900 	mov.w	r9, #0
 8004c36:	9700      	str	r7, [sp, #0]
 8004c38:	4633      	mov	r3, r6
 8004c3a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f000 f9d2 	bl	8004fe8 <_printf_common>
 8004c44:	3001      	adds	r0, #1
 8004c46:	f040 808d 	bne.w	8004d64 <_printf_float+0x1d0>
 8004c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4e:	b00d      	add	sp, #52	@ 0x34
 8004c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c54:	4642      	mov	r2, r8
 8004c56:	464b      	mov	r3, r9
 8004c58:	4640      	mov	r0, r8
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	f7fb ff6e 	bl	8000b3c <__aeabi_dcmpun>
 8004c60:	b140      	cbz	r0, 8004c74 <_printf_float+0xe0>
 8004c62:	464b      	mov	r3, r9
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bfbc      	itt	lt
 8004c68:	232d      	movlt	r3, #45	@ 0x2d
 8004c6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c6e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e68 <_printf_float+0x2d4>)
 8004c70:	4b7e      	ldr	r3, [pc, #504]	@ (8004e6c <_printf_float+0x2d8>)
 8004c72:	e7d4      	b.n	8004c1e <_printf_float+0x8a>
 8004c74:	6863      	ldr	r3, [r4, #4]
 8004c76:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004c7a:	9206      	str	r2, [sp, #24]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	d13b      	bne.n	8004cf8 <_printf_float+0x164>
 8004c80:	2306      	movs	r3, #6
 8004c82:	6063      	str	r3, [r4, #4]
 8004c84:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004c88:	2300      	movs	r3, #0
 8004c8a:	6022      	str	r2, [r4, #0]
 8004c8c:	9303      	str	r3, [sp, #12]
 8004c8e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004c90:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004c94:	ab09      	add	r3, sp, #36	@ 0x24
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	6861      	ldr	r1, [r4, #4]
 8004c9a:	ec49 8b10 	vmov	d0, r8, r9
 8004c9e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f7ff fed6 	bl	8004a54 <__cvt>
 8004ca8:	9b06      	ldr	r3, [sp, #24]
 8004caa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004cac:	2b47      	cmp	r3, #71	@ 0x47
 8004cae:	4680      	mov	r8, r0
 8004cb0:	d129      	bne.n	8004d06 <_printf_float+0x172>
 8004cb2:	1cc8      	adds	r0, r1, #3
 8004cb4:	db02      	blt.n	8004cbc <_printf_float+0x128>
 8004cb6:	6863      	ldr	r3, [r4, #4]
 8004cb8:	4299      	cmp	r1, r3
 8004cba:	dd41      	ble.n	8004d40 <_printf_float+0x1ac>
 8004cbc:	f1aa 0a02 	sub.w	sl, sl, #2
 8004cc0:	fa5f fa8a 	uxtb.w	sl, sl
 8004cc4:	3901      	subs	r1, #1
 8004cc6:	4652      	mov	r2, sl
 8004cc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ccc:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cce:	f7ff ff26 	bl	8004b1e <__exponent>
 8004cd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004cd4:	1813      	adds	r3, r2, r0
 8004cd6:	2a01      	cmp	r2, #1
 8004cd8:	4681      	mov	r9, r0
 8004cda:	6123      	str	r3, [r4, #16]
 8004cdc:	dc02      	bgt.n	8004ce4 <_printf_float+0x150>
 8004cde:	6822      	ldr	r2, [r4, #0]
 8004ce0:	07d2      	lsls	r2, r2, #31
 8004ce2:	d501      	bpl.n	8004ce8 <_printf_float+0x154>
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	6123      	str	r3, [r4, #16]
 8004ce8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0a2      	beq.n	8004c36 <_printf_float+0xa2>
 8004cf0:	232d      	movs	r3, #45	@ 0x2d
 8004cf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cf6:	e79e      	b.n	8004c36 <_printf_float+0xa2>
 8004cf8:	9a06      	ldr	r2, [sp, #24]
 8004cfa:	2a47      	cmp	r2, #71	@ 0x47
 8004cfc:	d1c2      	bne.n	8004c84 <_printf_float+0xf0>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1c0      	bne.n	8004c84 <_printf_float+0xf0>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e7bd      	b.n	8004c82 <_printf_float+0xee>
 8004d06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d0a:	d9db      	bls.n	8004cc4 <_printf_float+0x130>
 8004d0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d10:	d118      	bne.n	8004d44 <_printf_float+0x1b0>
 8004d12:	2900      	cmp	r1, #0
 8004d14:	6863      	ldr	r3, [r4, #4]
 8004d16:	dd0b      	ble.n	8004d30 <_printf_float+0x19c>
 8004d18:	6121      	str	r1, [r4, #16]
 8004d1a:	b913      	cbnz	r3, 8004d22 <_printf_float+0x18e>
 8004d1c:	6822      	ldr	r2, [r4, #0]
 8004d1e:	07d0      	lsls	r0, r2, #31
 8004d20:	d502      	bpl.n	8004d28 <_printf_float+0x194>
 8004d22:	3301      	adds	r3, #1
 8004d24:	440b      	add	r3, r1
 8004d26:	6123      	str	r3, [r4, #16]
 8004d28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d2a:	f04f 0900 	mov.w	r9, #0
 8004d2e:	e7db      	b.n	8004ce8 <_printf_float+0x154>
 8004d30:	b913      	cbnz	r3, 8004d38 <_printf_float+0x1a4>
 8004d32:	6822      	ldr	r2, [r4, #0]
 8004d34:	07d2      	lsls	r2, r2, #31
 8004d36:	d501      	bpl.n	8004d3c <_printf_float+0x1a8>
 8004d38:	3302      	adds	r3, #2
 8004d3a:	e7f4      	b.n	8004d26 <_printf_float+0x192>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e7f2      	b.n	8004d26 <_printf_float+0x192>
 8004d40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d46:	4299      	cmp	r1, r3
 8004d48:	db05      	blt.n	8004d56 <_printf_float+0x1c2>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	6121      	str	r1, [r4, #16]
 8004d4e:	07d8      	lsls	r0, r3, #31
 8004d50:	d5ea      	bpl.n	8004d28 <_printf_float+0x194>
 8004d52:	1c4b      	adds	r3, r1, #1
 8004d54:	e7e7      	b.n	8004d26 <_printf_float+0x192>
 8004d56:	2900      	cmp	r1, #0
 8004d58:	bfd4      	ite	le
 8004d5a:	f1c1 0202 	rsble	r2, r1, #2
 8004d5e:	2201      	movgt	r2, #1
 8004d60:	4413      	add	r3, r2
 8004d62:	e7e0      	b.n	8004d26 <_printf_float+0x192>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	055a      	lsls	r2, r3, #21
 8004d68:	d407      	bmi.n	8004d7a <_printf_float+0x1e6>
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	d12b      	bne.n	8004dd0 <_printf_float+0x23c>
 8004d78:	e767      	b.n	8004c4a <_printf_float+0xb6>
 8004d7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d7e:	f240 80dd 	bls.w	8004f3c <_printf_float+0x3a8>
 8004d82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d86:	2200      	movs	r2, #0
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f7fb fea5 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d033      	beq.n	8004dfa <_printf_float+0x266>
 8004d92:	4a37      	ldr	r2, [pc, #220]	@ (8004e70 <_printf_float+0x2dc>)
 8004d94:	2301      	movs	r3, #1
 8004d96:	4631      	mov	r1, r6
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b8      	blx	r7
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	f43f af54 	beq.w	8004c4a <_printf_float+0xb6>
 8004da2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004da6:	4543      	cmp	r3, r8
 8004da8:	db02      	blt.n	8004db0 <_printf_float+0x21c>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	07d8      	lsls	r0, r3, #31
 8004dae:	d50f      	bpl.n	8004dd0 <_printf_float+0x23c>
 8004db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004db4:	4631      	mov	r1, r6
 8004db6:	4628      	mov	r0, r5
 8004db8:	47b8      	blx	r7
 8004dba:	3001      	adds	r0, #1
 8004dbc:	f43f af45 	beq.w	8004c4a <_printf_float+0xb6>
 8004dc0:	f04f 0900 	mov.w	r9, #0
 8004dc4:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dc8:	f104 0a1a 	add.w	sl, r4, #26
 8004dcc:	45c8      	cmp	r8, r9
 8004dce:	dc09      	bgt.n	8004de4 <_printf_float+0x250>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	079b      	lsls	r3, r3, #30
 8004dd4:	f100 8103 	bmi.w	8004fde <_printf_float+0x44a>
 8004dd8:	68e0      	ldr	r0, [r4, #12]
 8004dda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ddc:	4298      	cmp	r0, r3
 8004dde:	bfb8      	it	lt
 8004de0:	4618      	movlt	r0, r3
 8004de2:	e734      	b.n	8004c4e <_printf_float+0xba>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4652      	mov	r2, sl
 8004de8:	4631      	mov	r1, r6
 8004dea:	4628      	mov	r0, r5
 8004dec:	47b8      	blx	r7
 8004dee:	3001      	adds	r0, #1
 8004df0:	f43f af2b 	beq.w	8004c4a <_printf_float+0xb6>
 8004df4:	f109 0901 	add.w	r9, r9, #1
 8004df8:	e7e8      	b.n	8004dcc <_printf_float+0x238>
 8004dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	dc39      	bgt.n	8004e74 <_printf_float+0x2e0>
 8004e00:	4a1b      	ldr	r2, [pc, #108]	@ (8004e70 <_printf_float+0x2dc>)
 8004e02:	2301      	movs	r3, #1
 8004e04:	4631      	mov	r1, r6
 8004e06:	4628      	mov	r0, r5
 8004e08:	47b8      	blx	r7
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	f43f af1d 	beq.w	8004c4a <_printf_float+0xb6>
 8004e10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004e14:	ea59 0303 	orrs.w	r3, r9, r3
 8004e18:	d102      	bne.n	8004e20 <_printf_float+0x28c>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	07d9      	lsls	r1, r3, #31
 8004e1e:	d5d7      	bpl.n	8004dd0 <_printf_float+0x23c>
 8004e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e24:	4631      	mov	r1, r6
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f43f af0d 	beq.w	8004c4a <_printf_float+0xb6>
 8004e30:	f04f 0a00 	mov.w	sl, #0
 8004e34:	f104 0b1a 	add.w	fp, r4, #26
 8004e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e3a:	425b      	negs	r3, r3
 8004e3c:	4553      	cmp	r3, sl
 8004e3e:	dc01      	bgt.n	8004e44 <_printf_float+0x2b0>
 8004e40:	464b      	mov	r3, r9
 8004e42:	e793      	b.n	8004d6c <_printf_float+0x1d8>
 8004e44:	2301      	movs	r3, #1
 8004e46:	465a      	mov	r2, fp
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	47b8      	blx	r7
 8004e4e:	3001      	adds	r0, #1
 8004e50:	f43f aefb 	beq.w	8004c4a <_printf_float+0xb6>
 8004e54:	f10a 0a01 	add.w	sl, sl, #1
 8004e58:	e7ee      	b.n	8004e38 <_printf_float+0x2a4>
 8004e5a:	bf00      	nop
 8004e5c:	7fefffff 	.word	0x7fefffff
 8004e60:	08007484 	.word	0x08007484
 8004e64:	08007488 	.word	0x08007488
 8004e68:	0800748c 	.word	0x0800748c
 8004e6c:	08007490 	.word	0x08007490
 8004e70:	08007494 	.word	0x08007494
 8004e74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e7a:	4553      	cmp	r3, sl
 8004e7c:	bfa8      	it	ge
 8004e7e:	4653      	movge	r3, sl
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	4699      	mov	r9, r3
 8004e84:	dc36      	bgt.n	8004ef4 <_printf_float+0x360>
 8004e86:	f04f 0b00 	mov.w	fp, #0
 8004e8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e8e:	f104 021a 	add.w	r2, r4, #26
 8004e92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e94:	9306      	str	r3, [sp, #24]
 8004e96:	eba3 0309 	sub.w	r3, r3, r9
 8004e9a:	455b      	cmp	r3, fp
 8004e9c:	dc31      	bgt.n	8004f02 <_printf_float+0x36e>
 8004e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ea0:	459a      	cmp	sl, r3
 8004ea2:	dc3a      	bgt.n	8004f1a <_printf_float+0x386>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	07da      	lsls	r2, r3, #31
 8004ea8:	d437      	bmi.n	8004f1a <_printf_float+0x386>
 8004eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eac:	ebaa 0903 	sub.w	r9, sl, r3
 8004eb0:	9b06      	ldr	r3, [sp, #24]
 8004eb2:	ebaa 0303 	sub.w	r3, sl, r3
 8004eb6:	4599      	cmp	r9, r3
 8004eb8:	bfa8      	it	ge
 8004eba:	4699      	movge	r9, r3
 8004ebc:	f1b9 0f00 	cmp.w	r9, #0
 8004ec0:	dc33      	bgt.n	8004f2a <_printf_float+0x396>
 8004ec2:	f04f 0800 	mov.w	r8, #0
 8004ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eca:	f104 0b1a 	add.w	fp, r4, #26
 8004ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ed0:	ebaa 0303 	sub.w	r3, sl, r3
 8004ed4:	eba3 0309 	sub.w	r3, r3, r9
 8004ed8:	4543      	cmp	r3, r8
 8004eda:	f77f af79 	ble.w	8004dd0 <_printf_float+0x23c>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	465a      	mov	r2, fp
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	47b8      	blx	r7
 8004ee8:	3001      	adds	r0, #1
 8004eea:	f43f aeae 	beq.w	8004c4a <_printf_float+0xb6>
 8004eee:	f108 0801 	add.w	r8, r8, #1
 8004ef2:	e7ec      	b.n	8004ece <_printf_float+0x33a>
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	4628      	mov	r0, r5
 8004efa:	47b8      	blx	r7
 8004efc:	3001      	adds	r0, #1
 8004efe:	d1c2      	bne.n	8004e86 <_printf_float+0x2f2>
 8004f00:	e6a3      	b.n	8004c4a <_printf_float+0xb6>
 8004f02:	2301      	movs	r3, #1
 8004f04:	4631      	mov	r1, r6
 8004f06:	4628      	mov	r0, r5
 8004f08:	9206      	str	r2, [sp, #24]
 8004f0a:	47b8      	blx	r7
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	f43f ae9c 	beq.w	8004c4a <_printf_float+0xb6>
 8004f12:	9a06      	ldr	r2, [sp, #24]
 8004f14:	f10b 0b01 	add.w	fp, fp, #1
 8004f18:	e7bb      	b.n	8004e92 <_printf_float+0x2fe>
 8004f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	47b8      	blx	r7
 8004f24:	3001      	adds	r0, #1
 8004f26:	d1c0      	bne.n	8004eaa <_printf_float+0x316>
 8004f28:	e68f      	b.n	8004c4a <_printf_float+0xb6>
 8004f2a:	9a06      	ldr	r2, [sp, #24]
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	4442      	add	r2, r8
 8004f30:	4631      	mov	r1, r6
 8004f32:	4628      	mov	r0, r5
 8004f34:	47b8      	blx	r7
 8004f36:	3001      	adds	r0, #1
 8004f38:	d1c3      	bne.n	8004ec2 <_printf_float+0x32e>
 8004f3a:	e686      	b.n	8004c4a <_printf_float+0xb6>
 8004f3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f40:	f1ba 0f01 	cmp.w	sl, #1
 8004f44:	dc01      	bgt.n	8004f4a <_printf_float+0x3b6>
 8004f46:	07db      	lsls	r3, r3, #31
 8004f48:	d536      	bpl.n	8004fb8 <_printf_float+0x424>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	4631      	mov	r1, r6
 8004f50:	4628      	mov	r0, r5
 8004f52:	47b8      	blx	r7
 8004f54:	3001      	adds	r0, #1
 8004f56:	f43f ae78 	beq.w	8004c4a <_printf_float+0xb6>
 8004f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4628      	mov	r0, r5
 8004f62:	47b8      	blx	r7
 8004f64:	3001      	adds	r0, #1
 8004f66:	f43f ae70 	beq.w	8004c4a <_printf_float+0xb6>
 8004f6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2300      	movs	r3, #0
 8004f72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f76:	f7fb fdaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f7a:	b9c0      	cbnz	r0, 8004fae <_printf_float+0x41a>
 8004f7c:	4653      	mov	r3, sl
 8004f7e:	f108 0201 	add.w	r2, r8, #1
 8004f82:	4631      	mov	r1, r6
 8004f84:	4628      	mov	r0, r5
 8004f86:	47b8      	blx	r7
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d10c      	bne.n	8004fa6 <_printf_float+0x412>
 8004f8c:	e65d      	b.n	8004c4a <_printf_float+0xb6>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	465a      	mov	r2, fp
 8004f92:	4631      	mov	r1, r6
 8004f94:	4628      	mov	r0, r5
 8004f96:	47b8      	blx	r7
 8004f98:	3001      	adds	r0, #1
 8004f9a:	f43f ae56 	beq.w	8004c4a <_printf_float+0xb6>
 8004f9e:	f108 0801 	add.w	r8, r8, #1
 8004fa2:	45d0      	cmp	r8, sl
 8004fa4:	dbf3      	blt.n	8004f8e <_printf_float+0x3fa>
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004fac:	e6df      	b.n	8004d6e <_printf_float+0x1da>
 8004fae:	f04f 0800 	mov.w	r8, #0
 8004fb2:	f104 0b1a 	add.w	fp, r4, #26
 8004fb6:	e7f4      	b.n	8004fa2 <_printf_float+0x40e>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	4642      	mov	r2, r8
 8004fbc:	e7e1      	b.n	8004f82 <_printf_float+0x3ee>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	464a      	mov	r2, r9
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	47b8      	blx	r7
 8004fc8:	3001      	adds	r0, #1
 8004fca:	f43f ae3e 	beq.w	8004c4a <_printf_float+0xb6>
 8004fce:	f108 0801 	add.w	r8, r8, #1
 8004fd2:	68e3      	ldr	r3, [r4, #12]
 8004fd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004fd6:	1a5b      	subs	r3, r3, r1
 8004fd8:	4543      	cmp	r3, r8
 8004fda:	dcf0      	bgt.n	8004fbe <_printf_float+0x42a>
 8004fdc:	e6fc      	b.n	8004dd8 <_printf_float+0x244>
 8004fde:	f04f 0800 	mov.w	r8, #0
 8004fe2:	f104 0919 	add.w	r9, r4, #25
 8004fe6:	e7f4      	b.n	8004fd2 <_printf_float+0x43e>

08004fe8 <_printf_common>:
 8004fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	4616      	mov	r6, r2
 8004fee:	4698      	mov	r8, r3
 8004ff0:	688a      	ldr	r2, [r1, #8]
 8004ff2:	690b      	ldr	r3, [r1, #16]
 8004ff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	bfb8      	it	lt
 8004ffc:	4613      	movlt	r3, r2
 8004ffe:	6033      	str	r3, [r6, #0]
 8005000:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005004:	4607      	mov	r7, r0
 8005006:	460c      	mov	r4, r1
 8005008:	b10a      	cbz	r2, 800500e <_printf_common+0x26>
 800500a:	3301      	adds	r3, #1
 800500c:	6033      	str	r3, [r6, #0]
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	0699      	lsls	r1, r3, #26
 8005012:	bf42      	ittt	mi
 8005014:	6833      	ldrmi	r3, [r6, #0]
 8005016:	3302      	addmi	r3, #2
 8005018:	6033      	strmi	r3, [r6, #0]
 800501a:	6825      	ldr	r5, [r4, #0]
 800501c:	f015 0506 	ands.w	r5, r5, #6
 8005020:	d106      	bne.n	8005030 <_printf_common+0x48>
 8005022:	f104 0a19 	add.w	sl, r4, #25
 8005026:	68e3      	ldr	r3, [r4, #12]
 8005028:	6832      	ldr	r2, [r6, #0]
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	42ab      	cmp	r3, r5
 800502e:	dc26      	bgt.n	800507e <_printf_common+0x96>
 8005030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	3b00      	subs	r3, #0
 8005038:	bf18      	it	ne
 800503a:	2301      	movne	r3, #1
 800503c:	0692      	lsls	r2, r2, #26
 800503e:	d42b      	bmi.n	8005098 <_printf_common+0xb0>
 8005040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005044:	4641      	mov	r1, r8
 8005046:	4638      	mov	r0, r7
 8005048:	47c8      	blx	r9
 800504a:	3001      	adds	r0, #1
 800504c:	d01e      	beq.n	800508c <_printf_common+0xa4>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	6922      	ldr	r2, [r4, #16]
 8005052:	f003 0306 	and.w	r3, r3, #6
 8005056:	2b04      	cmp	r3, #4
 8005058:	bf02      	ittt	eq
 800505a:	68e5      	ldreq	r5, [r4, #12]
 800505c:	6833      	ldreq	r3, [r6, #0]
 800505e:	1aed      	subeq	r5, r5, r3
 8005060:	68a3      	ldr	r3, [r4, #8]
 8005062:	bf0c      	ite	eq
 8005064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005068:	2500      	movne	r5, #0
 800506a:	4293      	cmp	r3, r2
 800506c:	bfc4      	itt	gt
 800506e:	1a9b      	subgt	r3, r3, r2
 8005070:	18ed      	addgt	r5, r5, r3
 8005072:	2600      	movs	r6, #0
 8005074:	341a      	adds	r4, #26
 8005076:	42b5      	cmp	r5, r6
 8005078:	d11a      	bne.n	80050b0 <_printf_common+0xc8>
 800507a:	2000      	movs	r0, #0
 800507c:	e008      	b.n	8005090 <_printf_common+0xa8>
 800507e:	2301      	movs	r3, #1
 8005080:	4652      	mov	r2, sl
 8005082:	4641      	mov	r1, r8
 8005084:	4638      	mov	r0, r7
 8005086:	47c8      	blx	r9
 8005088:	3001      	adds	r0, #1
 800508a:	d103      	bne.n	8005094 <_printf_common+0xac>
 800508c:	f04f 30ff 	mov.w	r0, #4294967295
 8005090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005094:	3501      	adds	r5, #1
 8005096:	e7c6      	b.n	8005026 <_printf_common+0x3e>
 8005098:	18e1      	adds	r1, r4, r3
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	2030      	movs	r0, #48	@ 0x30
 800509e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050a2:	4422      	add	r2, r4
 80050a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050ac:	3302      	adds	r3, #2
 80050ae:	e7c7      	b.n	8005040 <_printf_common+0x58>
 80050b0:	2301      	movs	r3, #1
 80050b2:	4622      	mov	r2, r4
 80050b4:	4641      	mov	r1, r8
 80050b6:	4638      	mov	r0, r7
 80050b8:	47c8      	blx	r9
 80050ba:	3001      	adds	r0, #1
 80050bc:	d0e6      	beq.n	800508c <_printf_common+0xa4>
 80050be:	3601      	adds	r6, #1
 80050c0:	e7d9      	b.n	8005076 <_printf_common+0x8e>
	...

080050c4 <_printf_i>:
 80050c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050c8:	7e0f      	ldrb	r7, [r1, #24]
 80050ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050cc:	2f78      	cmp	r7, #120	@ 0x78
 80050ce:	4691      	mov	r9, r2
 80050d0:	4680      	mov	r8, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	469a      	mov	sl, r3
 80050d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050da:	d807      	bhi.n	80050ec <_printf_i+0x28>
 80050dc:	2f62      	cmp	r7, #98	@ 0x62
 80050de:	d80a      	bhi.n	80050f6 <_printf_i+0x32>
 80050e0:	2f00      	cmp	r7, #0
 80050e2:	f000 80d2 	beq.w	800528a <_printf_i+0x1c6>
 80050e6:	2f58      	cmp	r7, #88	@ 0x58
 80050e8:	f000 80b9 	beq.w	800525e <_printf_i+0x19a>
 80050ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050f4:	e03a      	b.n	800516c <_printf_i+0xa8>
 80050f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050fa:	2b15      	cmp	r3, #21
 80050fc:	d8f6      	bhi.n	80050ec <_printf_i+0x28>
 80050fe:	a101      	add	r1, pc, #4	@ (adr r1, 8005104 <_printf_i+0x40>)
 8005100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005104:	0800515d 	.word	0x0800515d
 8005108:	08005171 	.word	0x08005171
 800510c:	080050ed 	.word	0x080050ed
 8005110:	080050ed 	.word	0x080050ed
 8005114:	080050ed 	.word	0x080050ed
 8005118:	080050ed 	.word	0x080050ed
 800511c:	08005171 	.word	0x08005171
 8005120:	080050ed 	.word	0x080050ed
 8005124:	080050ed 	.word	0x080050ed
 8005128:	080050ed 	.word	0x080050ed
 800512c:	080050ed 	.word	0x080050ed
 8005130:	08005271 	.word	0x08005271
 8005134:	0800519b 	.word	0x0800519b
 8005138:	0800522b 	.word	0x0800522b
 800513c:	080050ed 	.word	0x080050ed
 8005140:	080050ed 	.word	0x080050ed
 8005144:	08005293 	.word	0x08005293
 8005148:	080050ed 	.word	0x080050ed
 800514c:	0800519b 	.word	0x0800519b
 8005150:	080050ed 	.word	0x080050ed
 8005154:	080050ed 	.word	0x080050ed
 8005158:	08005233 	.word	0x08005233
 800515c:	6833      	ldr	r3, [r6, #0]
 800515e:	1d1a      	adds	r2, r3, #4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6032      	str	r2, [r6, #0]
 8005164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800516c:	2301      	movs	r3, #1
 800516e:	e09d      	b.n	80052ac <_printf_i+0x1e8>
 8005170:	6833      	ldr	r3, [r6, #0]
 8005172:	6820      	ldr	r0, [r4, #0]
 8005174:	1d19      	adds	r1, r3, #4
 8005176:	6031      	str	r1, [r6, #0]
 8005178:	0606      	lsls	r6, r0, #24
 800517a:	d501      	bpl.n	8005180 <_printf_i+0xbc>
 800517c:	681d      	ldr	r5, [r3, #0]
 800517e:	e003      	b.n	8005188 <_printf_i+0xc4>
 8005180:	0645      	lsls	r5, r0, #25
 8005182:	d5fb      	bpl.n	800517c <_printf_i+0xb8>
 8005184:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005188:	2d00      	cmp	r5, #0
 800518a:	da03      	bge.n	8005194 <_printf_i+0xd0>
 800518c:	232d      	movs	r3, #45	@ 0x2d
 800518e:	426d      	negs	r5, r5
 8005190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005194:	4859      	ldr	r0, [pc, #356]	@ (80052fc <_printf_i+0x238>)
 8005196:	230a      	movs	r3, #10
 8005198:	e011      	b.n	80051be <_printf_i+0xfa>
 800519a:	6821      	ldr	r1, [r4, #0]
 800519c:	6833      	ldr	r3, [r6, #0]
 800519e:	0608      	lsls	r0, r1, #24
 80051a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80051a4:	d402      	bmi.n	80051ac <_printf_i+0xe8>
 80051a6:	0649      	lsls	r1, r1, #25
 80051a8:	bf48      	it	mi
 80051aa:	b2ad      	uxthmi	r5, r5
 80051ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80051ae:	4853      	ldr	r0, [pc, #332]	@ (80052fc <_printf_i+0x238>)
 80051b0:	6033      	str	r3, [r6, #0]
 80051b2:	bf14      	ite	ne
 80051b4:	230a      	movne	r3, #10
 80051b6:	2308      	moveq	r3, #8
 80051b8:	2100      	movs	r1, #0
 80051ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051be:	6866      	ldr	r6, [r4, #4]
 80051c0:	60a6      	str	r6, [r4, #8]
 80051c2:	2e00      	cmp	r6, #0
 80051c4:	bfa2      	ittt	ge
 80051c6:	6821      	ldrge	r1, [r4, #0]
 80051c8:	f021 0104 	bicge.w	r1, r1, #4
 80051cc:	6021      	strge	r1, [r4, #0]
 80051ce:	b90d      	cbnz	r5, 80051d4 <_printf_i+0x110>
 80051d0:	2e00      	cmp	r6, #0
 80051d2:	d04b      	beq.n	800526c <_printf_i+0x1a8>
 80051d4:	4616      	mov	r6, r2
 80051d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80051da:	fb03 5711 	mls	r7, r3, r1, r5
 80051de:	5dc7      	ldrb	r7, [r0, r7]
 80051e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051e4:	462f      	mov	r7, r5
 80051e6:	42bb      	cmp	r3, r7
 80051e8:	460d      	mov	r5, r1
 80051ea:	d9f4      	bls.n	80051d6 <_printf_i+0x112>
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d10b      	bne.n	8005208 <_printf_i+0x144>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	07df      	lsls	r7, r3, #31
 80051f4:	d508      	bpl.n	8005208 <_printf_i+0x144>
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	6861      	ldr	r1, [r4, #4]
 80051fa:	4299      	cmp	r1, r3
 80051fc:	bfde      	ittt	le
 80051fe:	2330      	movle	r3, #48	@ 0x30
 8005200:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005204:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005208:	1b92      	subs	r2, r2, r6
 800520a:	6122      	str	r2, [r4, #16]
 800520c:	f8cd a000 	str.w	sl, [sp]
 8005210:	464b      	mov	r3, r9
 8005212:	aa03      	add	r2, sp, #12
 8005214:	4621      	mov	r1, r4
 8005216:	4640      	mov	r0, r8
 8005218:	f7ff fee6 	bl	8004fe8 <_printf_common>
 800521c:	3001      	adds	r0, #1
 800521e:	d14a      	bne.n	80052b6 <_printf_i+0x1f2>
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	b004      	add	sp, #16
 8005226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	f043 0320 	orr.w	r3, r3, #32
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	4833      	ldr	r0, [pc, #204]	@ (8005300 <_printf_i+0x23c>)
 8005234:	2778      	movs	r7, #120	@ 0x78
 8005236:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	6831      	ldr	r1, [r6, #0]
 800523e:	061f      	lsls	r7, r3, #24
 8005240:	f851 5b04 	ldr.w	r5, [r1], #4
 8005244:	d402      	bmi.n	800524c <_printf_i+0x188>
 8005246:	065f      	lsls	r7, r3, #25
 8005248:	bf48      	it	mi
 800524a:	b2ad      	uxthmi	r5, r5
 800524c:	6031      	str	r1, [r6, #0]
 800524e:	07d9      	lsls	r1, r3, #31
 8005250:	bf44      	itt	mi
 8005252:	f043 0320 	orrmi.w	r3, r3, #32
 8005256:	6023      	strmi	r3, [r4, #0]
 8005258:	b11d      	cbz	r5, 8005262 <_printf_i+0x19e>
 800525a:	2310      	movs	r3, #16
 800525c:	e7ac      	b.n	80051b8 <_printf_i+0xf4>
 800525e:	4827      	ldr	r0, [pc, #156]	@ (80052fc <_printf_i+0x238>)
 8005260:	e7e9      	b.n	8005236 <_printf_i+0x172>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	f023 0320 	bic.w	r3, r3, #32
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	e7f6      	b.n	800525a <_printf_i+0x196>
 800526c:	4616      	mov	r6, r2
 800526e:	e7bd      	b.n	80051ec <_printf_i+0x128>
 8005270:	6833      	ldr	r3, [r6, #0]
 8005272:	6825      	ldr	r5, [r4, #0]
 8005274:	6961      	ldr	r1, [r4, #20]
 8005276:	1d18      	adds	r0, r3, #4
 8005278:	6030      	str	r0, [r6, #0]
 800527a:	062e      	lsls	r6, r5, #24
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	d501      	bpl.n	8005284 <_printf_i+0x1c0>
 8005280:	6019      	str	r1, [r3, #0]
 8005282:	e002      	b.n	800528a <_printf_i+0x1c6>
 8005284:	0668      	lsls	r0, r5, #25
 8005286:	d5fb      	bpl.n	8005280 <_printf_i+0x1bc>
 8005288:	8019      	strh	r1, [r3, #0]
 800528a:	2300      	movs	r3, #0
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	4616      	mov	r6, r2
 8005290:	e7bc      	b.n	800520c <_printf_i+0x148>
 8005292:	6833      	ldr	r3, [r6, #0]
 8005294:	1d1a      	adds	r2, r3, #4
 8005296:	6032      	str	r2, [r6, #0]
 8005298:	681e      	ldr	r6, [r3, #0]
 800529a:	6862      	ldr	r2, [r4, #4]
 800529c:	2100      	movs	r1, #0
 800529e:	4630      	mov	r0, r6
 80052a0:	f7fa ff9e 	bl	80001e0 <memchr>
 80052a4:	b108      	cbz	r0, 80052aa <_printf_i+0x1e6>
 80052a6:	1b80      	subs	r0, r0, r6
 80052a8:	6060      	str	r0, [r4, #4]
 80052aa:	6863      	ldr	r3, [r4, #4]
 80052ac:	6123      	str	r3, [r4, #16]
 80052ae:	2300      	movs	r3, #0
 80052b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b4:	e7aa      	b.n	800520c <_printf_i+0x148>
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	4632      	mov	r2, r6
 80052ba:	4649      	mov	r1, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	47d0      	blx	sl
 80052c0:	3001      	adds	r0, #1
 80052c2:	d0ad      	beq.n	8005220 <_printf_i+0x15c>
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	079b      	lsls	r3, r3, #30
 80052c8:	d413      	bmi.n	80052f2 <_printf_i+0x22e>
 80052ca:	68e0      	ldr	r0, [r4, #12]
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	4298      	cmp	r0, r3
 80052d0:	bfb8      	it	lt
 80052d2:	4618      	movlt	r0, r3
 80052d4:	e7a6      	b.n	8005224 <_printf_i+0x160>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4632      	mov	r2, r6
 80052da:	4649      	mov	r1, r9
 80052dc:	4640      	mov	r0, r8
 80052de:	47d0      	blx	sl
 80052e0:	3001      	adds	r0, #1
 80052e2:	d09d      	beq.n	8005220 <_printf_i+0x15c>
 80052e4:	3501      	adds	r5, #1
 80052e6:	68e3      	ldr	r3, [r4, #12]
 80052e8:	9903      	ldr	r1, [sp, #12]
 80052ea:	1a5b      	subs	r3, r3, r1
 80052ec:	42ab      	cmp	r3, r5
 80052ee:	dcf2      	bgt.n	80052d6 <_printf_i+0x212>
 80052f0:	e7eb      	b.n	80052ca <_printf_i+0x206>
 80052f2:	2500      	movs	r5, #0
 80052f4:	f104 0619 	add.w	r6, r4, #25
 80052f8:	e7f5      	b.n	80052e6 <_printf_i+0x222>
 80052fa:	bf00      	nop
 80052fc:	08007496 	.word	0x08007496
 8005300:	080074a7 	.word	0x080074a7

08005304 <std>:
 8005304:	2300      	movs	r3, #0
 8005306:	b510      	push	{r4, lr}
 8005308:	4604      	mov	r4, r0
 800530a:	e9c0 3300 	strd	r3, r3, [r0]
 800530e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005312:	6083      	str	r3, [r0, #8]
 8005314:	8181      	strh	r1, [r0, #12]
 8005316:	6643      	str	r3, [r0, #100]	@ 0x64
 8005318:	81c2      	strh	r2, [r0, #14]
 800531a:	6183      	str	r3, [r0, #24]
 800531c:	4619      	mov	r1, r3
 800531e:	2208      	movs	r2, #8
 8005320:	305c      	adds	r0, #92	@ 0x5c
 8005322:	f000 f8f4 	bl	800550e <memset>
 8005326:	4b0d      	ldr	r3, [pc, #52]	@ (800535c <std+0x58>)
 8005328:	6263      	str	r3, [r4, #36]	@ 0x24
 800532a:	4b0d      	ldr	r3, [pc, #52]	@ (8005360 <std+0x5c>)
 800532c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800532e:	4b0d      	ldr	r3, [pc, #52]	@ (8005364 <std+0x60>)
 8005330:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005332:	4b0d      	ldr	r3, [pc, #52]	@ (8005368 <std+0x64>)
 8005334:	6323      	str	r3, [r4, #48]	@ 0x30
 8005336:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <std+0x68>)
 8005338:	6224      	str	r4, [r4, #32]
 800533a:	429c      	cmp	r4, r3
 800533c:	d006      	beq.n	800534c <std+0x48>
 800533e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005342:	4294      	cmp	r4, r2
 8005344:	d002      	beq.n	800534c <std+0x48>
 8005346:	33d0      	adds	r3, #208	@ 0xd0
 8005348:	429c      	cmp	r4, r3
 800534a:	d105      	bne.n	8005358 <std+0x54>
 800534c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005354:	f000 b9ae 	b.w	80056b4 <__retarget_lock_init_recursive>
 8005358:	bd10      	pop	{r4, pc}
 800535a:	bf00      	nop
 800535c:	08005489 	.word	0x08005489
 8005360:	080054ab 	.word	0x080054ab
 8005364:	080054e3 	.word	0x080054e3
 8005368:	08005507 	.word	0x08005507
 800536c:	200042ec 	.word	0x200042ec

08005370 <stdio_exit_handler>:
 8005370:	4a02      	ldr	r2, [pc, #8]	@ (800537c <stdio_exit_handler+0xc>)
 8005372:	4903      	ldr	r1, [pc, #12]	@ (8005380 <stdio_exit_handler+0x10>)
 8005374:	4803      	ldr	r0, [pc, #12]	@ (8005384 <stdio_exit_handler+0x14>)
 8005376:	f000 b869 	b.w	800544c <_fwalk_sglue>
 800537a:	bf00      	nop
 800537c:	20000010 	.word	0x20000010
 8005380:	08006d7d 	.word	0x08006d7d
 8005384:	20000020 	.word	0x20000020

08005388 <cleanup_stdio>:
 8005388:	6841      	ldr	r1, [r0, #4]
 800538a:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <cleanup_stdio+0x34>)
 800538c:	4299      	cmp	r1, r3
 800538e:	b510      	push	{r4, lr}
 8005390:	4604      	mov	r4, r0
 8005392:	d001      	beq.n	8005398 <cleanup_stdio+0x10>
 8005394:	f001 fcf2 	bl	8006d7c <_fflush_r>
 8005398:	68a1      	ldr	r1, [r4, #8]
 800539a:	4b09      	ldr	r3, [pc, #36]	@ (80053c0 <cleanup_stdio+0x38>)
 800539c:	4299      	cmp	r1, r3
 800539e:	d002      	beq.n	80053a6 <cleanup_stdio+0x1e>
 80053a0:	4620      	mov	r0, r4
 80053a2:	f001 fceb 	bl	8006d7c <_fflush_r>
 80053a6:	68e1      	ldr	r1, [r4, #12]
 80053a8:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <cleanup_stdio+0x3c>)
 80053aa:	4299      	cmp	r1, r3
 80053ac:	d004      	beq.n	80053b8 <cleanup_stdio+0x30>
 80053ae:	4620      	mov	r0, r4
 80053b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b4:	f001 bce2 	b.w	8006d7c <_fflush_r>
 80053b8:	bd10      	pop	{r4, pc}
 80053ba:	bf00      	nop
 80053bc:	200042ec 	.word	0x200042ec
 80053c0:	20004354 	.word	0x20004354
 80053c4:	200043bc 	.word	0x200043bc

080053c8 <global_stdio_init.part.0>:
 80053c8:	b510      	push	{r4, lr}
 80053ca:	4b0b      	ldr	r3, [pc, #44]	@ (80053f8 <global_stdio_init.part.0+0x30>)
 80053cc:	4c0b      	ldr	r4, [pc, #44]	@ (80053fc <global_stdio_init.part.0+0x34>)
 80053ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005400 <global_stdio_init.part.0+0x38>)
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	4620      	mov	r0, r4
 80053d4:	2200      	movs	r2, #0
 80053d6:	2104      	movs	r1, #4
 80053d8:	f7ff ff94 	bl	8005304 <std>
 80053dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053e0:	2201      	movs	r2, #1
 80053e2:	2109      	movs	r1, #9
 80053e4:	f7ff ff8e 	bl	8005304 <std>
 80053e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053ec:	2202      	movs	r2, #2
 80053ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f2:	2112      	movs	r1, #18
 80053f4:	f7ff bf86 	b.w	8005304 <std>
 80053f8:	20004424 	.word	0x20004424
 80053fc:	200042ec 	.word	0x200042ec
 8005400:	08005371 	.word	0x08005371

08005404 <__sfp_lock_acquire>:
 8005404:	4801      	ldr	r0, [pc, #4]	@ (800540c <__sfp_lock_acquire+0x8>)
 8005406:	f000 b956 	b.w	80056b6 <__retarget_lock_acquire_recursive>
 800540a:	bf00      	nop
 800540c:	2000442d 	.word	0x2000442d

08005410 <__sfp_lock_release>:
 8005410:	4801      	ldr	r0, [pc, #4]	@ (8005418 <__sfp_lock_release+0x8>)
 8005412:	f000 b951 	b.w	80056b8 <__retarget_lock_release_recursive>
 8005416:	bf00      	nop
 8005418:	2000442d 	.word	0x2000442d

0800541c <__sinit>:
 800541c:	b510      	push	{r4, lr}
 800541e:	4604      	mov	r4, r0
 8005420:	f7ff fff0 	bl	8005404 <__sfp_lock_acquire>
 8005424:	6a23      	ldr	r3, [r4, #32]
 8005426:	b11b      	cbz	r3, 8005430 <__sinit+0x14>
 8005428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800542c:	f7ff bff0 	b.w	8005410 <__sfp_lock_release>
 8005430:	4b04      	ldr	r3, [pc, #16]	@ (8005444 <__sinit+0x28>)
 8005432:	6223      	str	r3, [r4, #32]
 8005434:	4b04      	ldr	r3, [pc, #16]	@ (8005448 <__sinit+0x2c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f5      	bne.n	8005428 <__sinit+0xc>
 800543c:	f7ff ffc4 	bl	80053c8 <global_stdio_init.part.0>
 8005440:	e7f2      	b.n	8005428 <__sinit+0xc>
 8005442:	bf00      	nop
 8005444:	08005389 	.word	0x08005389
 8005448:	20004424 	.word	0x20004424

0800544c <_fwalk_sglue>:
 800544c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005450:	4607      	mov	r7, r0
 8005452:	4688      	mov	r8, r1
 8005454:	4614      	mov	r4, r2
 8005456:	2600      	movs	r6, #0
 8005458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800545c:	f1b9 0901 	subs.w	r9, r9, #1
 8005460:	d505      	bpl.n	800546e <_fwalk_sglue+0x22>
 8005462:	6824      	ldr	r4, [r4, #0]
 8005464:	2c00      	cmp	r4, #0
 8005466:	d1f7      	bne.n	8005458 <_fwalk_sglue+0xc>
 8005468:	4630      	mov	r0, r6
 800546a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800546e:	89ab      	ldrh	r3, [r5, #12]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d907      	bls.n	8005484 <_fwalk_sglue+0x38>
 8005474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005478:	3301      	adds	r3, #1
 800547a:	d003      	beq.n	8005484 <_fwalk_sglue+0x38>
 800547c:	4629      	mov	r1, r5
 800547e:	4638      	mov	r0, r7
 8005480:	47c0      	blx	r8
 8005482:	4306      	orrs	r6, r0
 8005484:	3568      	adds	r5, #104	@ 0x68
 8005486:	e7e9      	b.n	800545c <_fwalk_sglue+0x10>

08005488 <__sread>:
 8005488:	b510      	push	{r4, lr}
 800548a:	460c      	mov	r4, r1
 800548c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005490:	f000 f8c2 	bl	8005618 <_read_r>
 8005494:	2800      	cmp	r0, #0
 8005496:	bfab      	itete	ge
 8005498:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800549a:	89a3      	ldrhlt	r3, [r4, #12]
 800549c:	181b      	addge	r3, r3, r0
 800549e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054a2:	bfac      	ite	ge
 80054a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054a6:	81a3      	strhlt	r3, [r4, #12]
 80054a8:	bd10      	pop	{r4, pc}

080054aa <__swrite>:
 80054aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ae:	461f      	mov	r7, r3
 80054b0:	898b      	ldrh	r3, [r1, #12]
 80054b2:	05db      	lsls	r3, r3, #23
 80054b4:	4605      	mov	r5, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	4616      	mov	r6, r2
 80054ba:	d505      	bpl.n	80054c8 <__swrite+0x1e>
 80054bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c0:	2302      	movs	r3, #2
 80054c2:	2200      	movs	r2, #0
 80054c4:	f000 f896 	bl	80055f4 <_lseek_r>
 80054c8:	89a3      	ldrh	r3, [r4, #12]
 80054ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054d2:	81a3      	strh	r3, [r4, #12]
 80054d4:	4632      	mov	r2, r6
 80054d6:	463b      	mov	r3, r7
 80054d8:	4628      	mov	r0, r5
 80054da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054de:	f000 b8ad 	b.w	800563c <_write_r>

080054e2 <__sseek>:
 80054e2:	b510      	push	{r4, lr}
 80054e4:	460c      	mov	r4, r1
 80054e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ea:	f000 f883 	bl	80055f4 <_lseek_r>
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	bf15      	itete	ne
 80054f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054fe:	81a3      	strheq	r3, [r4, #12]
 8005500:	bf18      	it	ne
 8005502:	81a3      	strhne	r3, [r4, #12]
 8005504:	bd10      	pop	{r4, pc}

08005506 <__sclose>:
 8005506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550a:	f000 b80d 	b.w	8005528 <_close_r>

0800550e <memset>:
 800550e:	4402      	add	r2, r0
 8005510:	4603      	mov	r3, r0
 8005512:	4293      	cmp	r3, r2
 8005514:	d100      	bne.n	8005518 <memset+0xa>
 8005516:	4770      	bx	lr
 8005518:	f803 1b01 	strb.w	r1, [r3], #1
 800551c:	e7f9      	b.n	8005512 <memset+0x4>
	...

08005520 <_localeconv_r>:
 8005520:	4800      	ldr	r0, [pc, #0]	@ (8005524 <_localeconv_r+0x4>)
 8005522:	4770      	bx	lr
 8005524:	2000015c 	.word	0x2000015c

08005528 <_close_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4d06      	ldr	r5, [pc, #24]	@ (8005544 <_close_r+0x1c>)
 800552c:	2300      	movs	r3, #0
 800552e:	4604      	mov	r4, r0
 8005530:	4608      	mov	r0, r1
 8005532:	602b      	str	r3, [r5, #0]
 8005534:	f7fc f8a2 	bl	800167c <_close>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_close_r+0x1a>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_close_r+0x1a>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	20004428 	.word	0x20004428

08005548 <_reclaim_reent>:
 8005548:	4b29      	ldr	r3, [pc, #164]	@ (80055f0 <_reclaim_reent+0xa8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4283      	cmp	r3, r0
 800554e:	b570      	push	{r4, r5, r6, lr}
 8005550:	4604      	mov	r4, r0
 8005552:	d04b      	beq.n	80055ec <_reclaim_reent+0xa4>
 8005554:	69c3      	ldr	r3, [r0, #28]
 8005556:	b1ab      	cbz	r3, 8005584 <_reclaim_reent+0x3c>
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	b16b      	cbz	r3, 8005578 <_reclaim_reent+0x30>
 800555c:	2500      	movs	r5, #0
 800555e:	69e3      	ldr	r3, [r4, #28]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	5959      	ldr	r1, [r3, r5]
 8005564:	2900      	cmp	r1, #0
 8005566:	d13b      	bne.n	80055e0 <_reclaim_reent+0x98>
 8005568:	3504      	adds	r5, #4
 800556a:	2d80      	cmp	r5, #128	@ 0x80
 800556c:	d1f7      	bne.n	800555e <_reclaim_reent+0x16>
 800556e:	69e3      	ldr	r3, [r4, #28]
 8005570:	4620      	mov	r0, r4
 8005572:	68d9      	ldr	r1, [r3, #12]
 8005574:	f000 fefc 	bl	8006370 <_free_r>
 8005578:	69e3      	ldr	r3, [r4, #28]
 800557a:	6819      	ldr	r1, [r3, #0]
 800557c:	b111      	cbz	r1, 8005584 <_reclaim_reent+0x3c>
 800557e:	4620      	mov	r0, r4
 8005580:	f000 fef6 	bl	8006370 <_free_r>
 8005584:	6961      	ldr	r1, [r4, #20]
 8005586:	b111      	cbz	r1, 800558e <_reclaim_reent+0x46>
 8005588:	4620      	mov	r0, r4
 800558a:	f000 fef1 	bl	8006370 <_free_r>
 800558e:	69e1      	ldr	r1, [r4, #28]
 8005590:	b111      	cbz	r1, 8005598 <_reclaim_reent+0x50>
 8005592:	4620      	mov	r0, r4
 8005594:	f000 feec 	bl	8006370 <_free_r>
 8005598:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800559a:	b111      	cbz	r1, 80055a2 <_reclaim_reent+0x5a>
 800559c:	4620      	mov	r0, r4
 800559e:	f000 fee7 	bl	8006370 <_free_r>
 80055a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055a4:	b111      	cbz	r1, 80055ac <_reclaim_reent+0x64>
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 fee2 	bl	8006370 <_free_r>
 80055ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80055ae:	b111      	cbz	r1, 80055b6 <_reclaim_reent+0x6e>
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 fedd 	bl	8006370 <_free_r>
 80055b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80055b8:	b111      	cbz	r1, 80055c0 <_reclaim_reent+0x78>
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 fed8 	bl	8006370 <_free_r>
 80055c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80055c2:	b111      	cbz	r1, 80055ca <_reclaim_reent+0x82>
 80055c4:	4620      	mov	r0, r4
 80055c6:	f000 fed3 	bl	8006370 <_free_r>
 80055ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80055cc:	b111      	cbz	r1, 80055d4 <_reclaim_reent+0x8c>
 80055ce:	4620      	mov	r0, r4
 80055d0:	f000 fece 	bl	8006370 <_free_r>
 80055d4:	6a23      	ldr	r3, [r4, #32]
 80055d6:	b14b      	cbz	r3, 80055ec <_reclaim_reent+0xa4>
 80055d8:	4620      	mov	r0, r4
 80055da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055de:	4718      	bx	r3
 80055e0:	680e      	ldr	r6, [r1, #0]
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 fec4 	bl	8006370 <_free_r>
 80055e8:	4631      	mov	r1, r6
 80055ea:	e7bb      	b.n	8005564 <_reclaim_reent+0x1c>
 80055ec:	bd70      	pop	{r4, r5, r6, pc}
 80055ee:	bf00      	nop
 80055f0:	2000001c 	.word	0x2000001c

080055f4 <_lseek_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d07      	ldr	r5, [pc, #28]	@ (8005614 <_lseek_r+0x20>)
 80055f8:	4604      	mov	r4, r0
 80055fa:	4608      	mov	r0, r1
 80055fc:	4611      	mov	r1, r2
 80055fe:	2200      	movs	r2, #0
 8005600:	602a      	str	r2, [r5, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f7fc f861 	bl	80016ca <_lseek>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_lseek_r+0x1e>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_lseek_r+0x1e>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20004428 	.word	0x20004428

08005618 <_read_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d07      	ldr	r5, [pc, #28]	@ (8005638 <_read_r+0x20>)
 800561c:	4604      	mov	r4, r0
 800561e:	4608      	mov	r0, r1
 8005620:	4611      	mov	r1, r2
 8005622:	2200      	movs	r2, #0
 8005624:	602a      	str	r2, [r5, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f7fb ffef 	bl	800160a <_read>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_read_r+0x1e>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_read_r+0x1e>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20004428 	.word	0x20004428

0800563c <_write_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d07      	ldr	r5, [pc, #28]	@ (800565c <_write_r+0x20>)
 8005640:	4604      	mov	r4, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fb fffa 	bl	8001644 <_write>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_write_r+0x1e>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_write_r+0x1e>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20004428 	.word	0x20004428

08005660 <__errno>:
 8005660:	4b01      	ldr	r3, [pc, #4]	@ (8005668 <__errno+0x8>)
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	2000001c 	.word	0x2000001c

0800566c <__libc_init_array>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4d0d      	ldr	r5, [pc, #52]	@ (80056a4 <__libc_init_array+0x38>)
 8005670:	4c0d      	ldr	r4, [pc, #52]	@ (80056a8 <__libc_init_array+0x3c>)
 8005672:	1b64      	subs	r4, r4, r5
 8005674:	10a4      	asrs	r4, r4, #2
 8005676:	2600      	movs	r6, #0
 8005678:	42a6      	cmp	r6, r4
 800567a:	d109      	bne.n	8005690 <__libc_init_array+0x24>
 800567c:	4d0b      	ldr	r5, [pc, #44]	@ (80056ac <__libc_init_array+0x40>)
 800567e:	4c0c      	ldr	r4, [pc, #48]	@ (80056b0 <__libc_init_array+0x44>)
 8005680:	f001 febc 	bl	80073fc <_init>
 8005684:	1b64      	subs	r4, r4, r5
 8005686:	10a4      	asrs	r4, r4, #2
 8005688:	2600      	movs	r6, #0
 800568a:	42a6      	cmp	r6, r4
 800568c:	d105      	bne.n	800569a <__libc_init_array+0x2e>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	f855 3b04 	ldr.w	r3, [r5], #4
 8005694:	4798      	blx	r3
 8005696:	3601      	adds	r6, #1
 8005698:	e7ee      	b.n	8005678 <__libc_init_array+0xc>
 800569a:	f855 3b04 	ldr.w	r3, [r5], #4
 800569e:	4798      	blx	r3
 80056a0:	3601      	adds	r6, #1
 80056a2:	e7f2      	b.n	800568a <__libc_init_array+0x1e>
 80056a4:	08007800 	.word	0x08007800
 80056a8:	08007800 	.word	0x08007800
 80056ac:	08007800 	.word	0x08007800
 80056b0:	08007804 	.word	0x08007804

080056b4 <__retarget_lock_init_recursive>:
 80056b4:	4770      	bx	lr

080056b6 <__retarget_lock_acquire_recursive>:
 80056b6:	4770      	bx	lr

080056b8 <__retarget_lock_release_recursive>:
 80056b8:	4770      	bx	lr

080056ba <memcpy>:
 80056ba:	440a      	add	r2, r1
 80056bc:	4291      	cmp	r1, r2
 80056be:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c2:	d100      	bne.n	80056c6 <memcpy+0xc>
 80056c4:	4770      	bx	lr
 80056c6:	b510      	push	{r4, lr}
 80056c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d0:	4291      	cmp	r1, r2
 80056d2:	d1f9      	bne.n	80056c8 <memcpy+0xe>
 80056d4:	bd10      	pop	{r4, pc}

080056d6 <quorem>:
 80056d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056da:	6903      	ldr	r3, [r0, #16]
 80056dc:	690c      	ldr	r4, [r1, #16]
 80056de:	42a3      	cmp	r3, r4
 80056e0:	4607      	mov	r7, r0
 80056e2:	db7e      	blt.n	80057e2 <quorem+0x10c>
 80056e4:	3c01      	subs	r4, #1
 80056e6:	f101 0814 	add.w	r8, r1, #20
 80056ea:	00a3      	lsls	r3, r4, #2
 80056ec:	f100 0514 	add.w	r5, r0, #20
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056f6:	9301      	str	r3, [sp, #4]
 80056f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005700:	3301      	adds	r3, #1
 8005702:	429a      	cmp	r2, r3
 8005704:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005708:	fbb2 f6f3 	udiv	r6, r2, r3
 800570c:	d32e      	bcc.n	800576c <quorem+0x96>
 800570e:	f04f 0a00 	mov.w	sl, #0
 8005712:	46c4      	mov	ip, r8
 8005714:	46ae      	mov	lr, r5
 8005716:	46d3      	mov	fp, sl
 8005718:	f85c 3b04 	ldr.w	r3, [ip], #4
 800571c:	b298      	uxth	r0, r3
 800571e:	fb06 a000 	mla	r0, r6, r0, sl
 8005722:	0c02      	lsrs	r2, r0, #16
 8005724:	0c1b      	lsrs	r3, r3, #16
 8005726:	fb06 2303 	mla	r3, r6, r3, r2
 800572a:	f8de 2000 	ldr.w	r2, [lr]
 800572e:	b280      	uxth	r0, r0
 8005730:	b292      	uxth	r2, r2
 8005732:	1a12      	subs	r2, r2, r0
 8005734:	445a      	add	r2, fp
 8005736:	f8de 0000 	ldr.w	r0, [lr]
 800573a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800573e:	b29b      	uxth	r3, r3
 8005740:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005744:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005748:	b292      	uxth	r2, r2
 800574a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800574e:	45e1      	cmp	r9, ip
 8005750:	f84e 2b04 	str.w	r2, [lr], #4
 8005754:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005758:	d2de      	bcs.n	8005718 <quorem+0x42>
 800575a:	9b00      	ldr	r3, [sp, #0]
 800575c:	58eb      	ldr	r3, [r5, r3]
 800575e:	b92b      	cbnz	r3, 800576c <quorem+0x96>
 8005760:	9b01      	ldr	r3, [sp, #4]
 8005762:	3b04      	subs	r3, #4
 8005764:	429d      	cmp	r5, r3
 8005766:	461a      	mov	r2, r3
 8005768:	d32f      	bcc.n	80057ca <quorem+0xf4>
 800576a:	613c      	str	r4, [r7, #16]
 800576c:	4638      	mov	r0, r7
 800576e:	f001 f979 	bl	8006a64 <__mcmp>
 8005772:	2800      	cmp	r0, #0
 8005774:	db25      	blt.n	80057c2 <quorem+0xec>
 8005776:	4629      	mov	r1, r5
 8005778:	2000      	movs	r0, #0
 800577a:	f858 2b04 	ldr.w	r2, [r8], #4
 800577e:	f8d1 c000 	ldr.w	ip, [r1]
 8005782:	fa1f fe82 	uxth.w	lr, r2
 8005786:	fa1f f38c 	uxth.w	r3, ip
 800578a:	eba3 030e 	sub.w	r3, r3, lr
 800578e:	4403      	add	r3, r0
 8005790:	0c12      	lsrs	r2, r2, #16
 8005792:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005796:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800579a:	b29b      	uxth	r3, r3
 800579c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057a0:	45c1      	cmp	r9, r8
 80057a2:	f841 3b04 	str.w	r3, [r1], #4
 80057a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057aa:	d2e6      	bcs.n	800577a <quorem+0xa4>
 80057ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057b4:	b922      	cbnz	r2, 80057c0 <quorem+0xea>
 80057b6:	3b04      	subs	r3, #4
 80057b8:	429d      	cmp	r5, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	d30b      	bcc.n	80057d6 <quorem+0x100>
 80057be:	613c      	str	r4, [r7, #16]
 80057c0:	3601      	adds	r6, #1
 80057c2:	4630      	mov	r0, r6
 80057c4:	b003      	add	sp, #12
 80057c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	3b04      	subs	r3, #4
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d1cb      	bne.n	800576a <quorem+0x94>
 80057d2:	3c01      	subs	r4, #1
 80057d4:	e7c6      	b.n	8005764 <quorem+0x8e>
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	3b04      	subs	r3, #4
 80057da:	2a00      	cmp	r2, #0
 80057dc:	d1ef      	bne.n	80057be <quorem+0xe8>
 80057de:	3c01      	subs	r4, #1
 80057e0:	e7ea      	b.n	80057b8 <quorem+0xe2>
 80057e2:	2000      	movs	r0, #0
 80057e4:	e7ee      	b.n	80057c4 <quorem+0xee>
	...

080057e8 <_dtoa_r>:
 80057e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	69c7      	ldr	r7, [r0, #28]
 80057ee:	b099      	sub	sp, #100	@ 0x64
 80057f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80057f4:	ec55 4b10 	vmov	r4, r5, d0
 80057f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80057fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80057fc:	4683      	mov	fp, r0
 80057fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8005800:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005802:	b97f      	cbnz	r7, 8005824 <_dtoa_r+0x3c>
 8005804:	2010      	movs	r0, #16
 8005806:	f000 fdfd 	bl	8006404 <malloc>
 800580a:	4602      	mov	r2, r0
 800580c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005810:	b920      	cbnz	r0, 800581c <_dtoa_r+0x34>
 8005812:	4ba7      	ldr	r3, [pc, #668]	@ (8005ab0 <_dtoa_r+0x2c8>)
 8005814:	21ef      	movs	r1, #239	@ 0xef
 8005816:	48a7      	ldr	r0, [pc, #668]	@ (8005ab4 <_dtoa_r+0x2cc>)
 8005818:	f001 fae8 	bl	8006dec <__assert_func>
 800581c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005820:	6007      	str	r7, [r0, #0]
 8005822:	60c7      	str	r7, [r0, #12]
 8005824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005828:	6819      	ldr	r1, [r3, #0]
 800582a:	b159      	cbz	r1, 8005844 <_dtoa_r+0x5c>
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	604a      	str	r2, [r1, #4]
 8005830:	2301      	movs	r3, #1
 8005832:	4093      	lsls	r3, r2
 8005834:	608b      	str	r3, [r1, #8]
 8005836:	4658      	mov	r0, fp
 8005838:	f000 feda 	bl	80065f0 <_Bfree>
 800583c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	1e2b      	subs	r3, r5, #0
 8005846:	bfb9      	ittee	lt
 8005848:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800584c:	9303      	strlt	r3, [sp, #12]
 800584e:	2300      	movge	r3, #0
 8005850:	6033      	strge	r3, [r6, #0]
 8005852:	9f03      	ldr	r7, [sp, #12]
 8005854:	4b98      	ldr	r3, [pc, #608]	@ (8005ab8 <_dtoa_r+0x2d0>)
 8005856:	bfbc      	itt	lt
 8005858:	2201      	movlt	r2, #1
 800585a:	6032      	strlt	r2, [r6, #0]
 800585c:	43bb      	bics	r3, r7
 800585e:	d112      	bne.n	8005886 <_dtoa_r+0x9e>
 8005860:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005862:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800586c:	4323      	orrs	r3, r4
 800586e:	f000 854d 	beq.w	800630c <_dtoa_r+0xb24>
 8005872:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005874:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005acc <_dtoa_r+0x2e4>
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 854f 	beq.w	800631c <_dtoa_r+0xb34>
 800587e:	f10a 0303 	add.w	r3, sl, #3
 8005882:	f000 bd49 	b.w	8006318 <_dtoa_r+0xb30>
 8005886:	ed9d 7b02 	vldr	d7, [sp, #8]
 800588a:	2200      	movs	r2, #0
 800588c:	ec51 0b17 	vmov	r0, r1, d7
 8005890:	2300      	movs	r3, #0
 8005892:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005896:	f7fb f91f 	bl	8000ad8 <__aeabi_dcmpeq>
 800589a:	4680      	mov	r8, r0
 800589c:	b158      	cbz	r0, 80058b6 <_dtoa_r+0xce>
 800589e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80058a0:	2301      	movs	r3, #1
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058a6:	b113      	cbz	r3, 80058ae <_dtoa_r+0xc6>
 80058a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80058aa:	4b84      	ldr	r3, [pc, #528]	@ (8005abc <_dtoa_r+0x2d4>)
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005ad0 <_dtoa_r+0x2e8>
 80058b2:	f000 bd33 	b.w	800631c <_dtoa_r+0xb34>
 80058b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80058ba:	aa16      	add	r2, sp, #88	@ 0x58
 80058bc:	a917      	add	r1, sp, #92	@ 0x5c
 80058be:	4658      	mov	r0, fp
 80058c0:	f001 f980 	bl	8006bc4 <__d2b>
 80058c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80058c8:	4681      	mov	r9, r0
 80058ca:	2e00      	cmp	r6, #0
 80058cc:	d077      	beq.n	80059be <_dtoa_r+0x1d6>
 80058ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80058d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80058e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80058e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80058e8:	4619      	mov	r1, r3
 80058ea:	2200      	movs	r2, #0
 80058ec:	4b74      	ldr	r3, [pc, #464]	@ (8005ac0 <_dtoa_r+0x2d8>)
 80058ee:	f7fa fcd3 	bl	8000298 <__aeabi_dsub>
 80058f2:	a369      	add	r3, pc, #420	@ (adr r3, 8005a98 <_dtoa_r+0x2b0>)
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f7fa fe86 	bl	8000608 <__aeabi_dmul>
 80058fc:	a368      	add	r3, pc, #416	@ (adr r3, 8005aa0 <_dtoa_r+0x2b8>)
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	f7fa fccb 	bl	800029c <__adddf3>
 8005906:	4604      	mov	r4, r0
 8005908:	4630      	mov	r0, r6
 800590a:	460d      	mov	r5, r1
 800590c:	f7fa fe12 	bl	8000534 <__aeabi_i2d>
 8005910:	a365      	add	r3, pc, #404	@ (adr r3, 8005aa8 <_dtoa_r+0x2c0>)
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	f7fa fe77 	bl	8000608 <__aeabi_dmul>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4620      	mov	r0, r4
 8005920:	4629      	mov	r1, r5
 8005922:	f7fa fcbb 	bl	800029c <__adddf3>
 8005926:	4604      	mov	r4, r0
 8005928:	460d      	mov	r5, r1
 800592a:	f7fb f91d 	bl	8000b68 <__aeabi_d2iz>
 800592e:	2200      	movs	r2, #0
 8005930:	4607      	mov	r7, r0
 8005932:	2300      	movs	r3, #0
 8005934:	4620      	mov	r0, r4
 8005936:	4629      	mov	r1, r5
 8005938:	f7fb f8d8 	bl	8000aec <__aeabi_dcmplt>
 800593c:	b140      	cbz	r0, 8005950 <_dtoa_r+0x168>
 800593e:	4638      	mov	r0, r7
 8005940:	f7fa fdf8 	bl	8000534 <__aeabi_i2d>
 8005944:	4622      	mov	r2, r4
 8005946:	462b      	mov	r3, r5
 8005948:	f7fb f8c6 	bl	8000ad8 <__aeabi_dcmpeq>
 800594c:	b900      	cbnz	r0, 8005950 <_dtoa_r+0x168>
 800594e:	3f01      	subs	r7, #1
 8005950:	2f16      	cmp	r7, #22
 8005952:	d851      	bhi.n	80059f8 <_dtoa_r+0x210>
 8005954:	4b5b      	ldr	r3, [pc, #364]	@ (8005ac4 <_dtoa_r+0x2dc>)
 8005956:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005962:	f7fb f8c3 	bl	8000aec <__aeabi_dcmplt>
 8005966:	2800      	cmp	r0, #0
 8005968:	d048      	beq.n	80059fc <_dtoa_r+0x214>
 800596a:	3f01      	subs	r7, #1
 800596c:	2300      	movs	r3, #0
 800596e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005970:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005972:	1b9b      	subs	r3, r3, r6
 8005974:	1e5a      	subs	r2, r3, #1
 8005976:	bf44      	itt	mi
 8005978:	f1c3 0801 	rsbmi	r8, r3, #1
 800597c:	2300      	movmi	r3, #0
 800597e:	9208      	str	r2, [sp, #32]
 8005980:	bf54      	ite	pl
 8005982:	f04f 0800 	movpl.w	r8, #0
 8005986:	9308      	strmi	r3, [sp, #32]
 8005988:	2f00      	cmp	r7, #0
 800598a:	db39      	blt.n	8005a00 <_dtoa_r+0x218>
 800598c:	9b08      	ldr	r3, [sp, #32]
 800598e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005990:	443b      	add	r3, r7
 8005992:	9308      	str	r3, [sp, #32]
 8005994:	2300      	movs	r3, #0
 8005996:	930a      	str	r3, [sp, #40]	@ 0x28
 8005998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800599a:	2b09      	cmp	r3, #9
 800599c:	d864      	bhi.n	8005a68 <_dtoa_r+0x280>
 800599e:	2b05      	cmp	r3, #5
 80059a0:	bfc4      	itt	gt
 80059a2:	3b04      	subgt	r3, #4
 80059a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80059a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059a8:	f1a3 0302 	sub.w	r3, r3, #2
 80059ac:	bfcc      	ite	gt
 80059ae:	2400      	movgt	r4, #0
 80059b0:	2401      	movle	r4, #1
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d863      	bhi.n	8005a7e <_dtoa_r+0x296>
 80059b6:	e8df f003 	tbb	[pc, r3]
 80059ba:	372a      	.short	0x372a
 80059bc:	5535      	.short	0x5535
 80059be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80059c2:	441e      	add	r6, r3
 80059c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	bfc1      	itttt	gt
 80059cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80059d0:	409f      	lslgt	r7, r3
 80059d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80059d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80059da:	bfd6      	itet	le
 80059dc:	f1c3 0320 	rsble	r3, r3, #32
 80059e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80059e4:	fa04 f003 	lslle.w	r0, r4, r3
 80059e8:	f7fa fd94 	bl	8000514 <__aeabi_ui2d>
 80059ec:	2201      	movs	r2, #1
 80059ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80059f2:	3e01      	subs	r6, #1
 80059f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80059f6:	e777      	b.n	80058e8 <_dtoa_r+0x100>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e7b8      	b.n	800596e <_dtoa_r+0x186>
 80059fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80059fe:	e7b7      	b.n	8005970 <_dtoa_r+0x188>
 8005a00:	427b      	negs	r3, r7
 8005a02:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a04:	2300      	movs	r3, #0
 8005a06:	eba8 0807 	sub.w	r8, r8, r7
 8005a0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a0c:	e7c4      	b.n	8005998 <_dtoa_r+0x1b0>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	dc35      	bgt.n	8005a84 <_dtoa_r+0x29c>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	9307      	str	r3, [sp, #28]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a22:	e00b      	b.n	8005a3c <_dtoa_r+0x254>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e7f3      	b.n	8005a10 <_dtoa_r+0x228>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	3301      	adds	r3, #1
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	9307      	str	r3, [sp, #28]
 8005a38:	bfb8      	it	lt
 8005a3a:	2301      	movlt	r3, #1
 8005a3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005a40:	2100      	movs	r1, #0
 8005a42:	2204      	movs	r2, #4
 8005a44:	f102 0514 	add.w	r5, r2, #20
 8005a48:	429d      	cmp	r5, r3
 8005a4a:	d91f      	bls.n	8005a8c <_dtoa_r+0x2a4>
 8005a4c:	6041      	str	r1, [r0, #4]
 8005a4e:	4658      	mov	r0, fp
 8005a50:	f000 fd8e 	bl	8006570 <_Balloc>
 8005a54:	4682      	mov	sl, r0
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d13c      	bne.n	8005ad4 <_dtoa_r+0x2ec>
 8005a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac8 <_dtoa_r+0x2e0>)
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a62:	e6d8      	b.n	8005816 <_dtoa_r+0x2e>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e7e0      	b.n	8005a2a <_dtoa_r+0x242>
 8005a68:	2401      	movs	r4, #1
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a70:	f04f 33ff 	mov.w	r3, #4294967295
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	9307      	str	r3, [sp, #28]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2312      	movs	r3, #18
 8005a7c:	e7d0      	b.n	8005a20 <_dtoa_r+0x238>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a82:	e7f5      	b.n	8005a70 <_dtoa_r+0x288>
 8005a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	9307      	str	r3, [sp, #28]
 8005a8a:	e7d7      	b.n	8005a3c <_dtoa_r+0x254>
 8005a8c:	3101      	adds	r1, #1
 8005a8e:	0052      	lsls	r2, r2, #1
 8005a90:	e7d8      	b.n	8005a44 <_dtoa_r+0x25c>
 8005a92:	bf00      	nop
 8005a94:	f3af 8000 	nop.w
 8005a98:	636f4361 	.word	0x636f4361
 8005a9c:	3fd287a7 	.word	0x3fd287a7
 8005aa0:	8b60c8b3 	.word	0x8b60c8b3
 8005aa4:	3fc68a28 	.word	0x3fc68a28
 8005aa8:	509f79fb 	.word	0x509f79fb
 8005aac:	3fd34413 	.word	0x3fd34413
 8005ab0:	080074c5 	.word	0x080074c5
 8005ab4:	080074dc 	.word	0x080074dc
 8005ab8:	7ff00000 	.word	0x7ff00000
 8005abc:	08007495 	.word	0x08007495
 8005ac0:	3ff80000 	.word	0x3ff80000
 8005ac4:	080075d8 	.word	0x080075d8
 8005ac8:	08007534 	.word	0x08007534
 8005acc:	080074c1 	.word	0x080074c1
 8005ad0:	08007494 	.word	0x08007494
 8005ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ad8:	6018      	str	r0, [r3, #0]
 8005ada:	9b07      	ldr	r3, [sp, #28]
 8005adc:	2b0e      	cmp	r3, #14
 8005ade:	f200 80a4 	bhi.w	8005c2a <_dtoa_r+0x442>
 8005ae2:	2c00      	cmp	r4, #0
 8005ae4:	f000 80a1 	beq.w	8005c2a <_dtoa_r+0x442>
 8005ae8:	2f00      	cmp	r7, #0
 8005aea:	dd33      	ble.n	8005b54 <_dtoa_r+0x36c>
 8005aec:	4bad      	ldr	r3, [pc, #692]	@ (8005da4 <_dtoa_r+0x5bc>)
 8005aee:	f007 020f 	and.w	r2, r7, #15
 8005af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005af6:	ed93 7b00 	vldr	d7, [r3]
 8005afa:	05f8      	lsls	r0, r7, #23
 8005afc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005b00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005b04:	d516      	bpl.n	8005b34 <_dtoa_r+0x34c>
 8005b06:	4ba8      	ldr	r3, [pc, #672]	@ (8005da8 <_dtoa_r+0x5c0>)
 8005b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b10:	f7fa fea4 	bl	800085c <__aeabi_ddiv>
 8005b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b18:	f004 040f 	and.w	r4, r4, #15
 8005b1c:	2603      	movs	r6, #3
 8005b1e:	4da2      	ldr	r5, [pc, #648]	@ (8005da8 <_dtoa_r+0x5c0>)
 8005b20:	b954      	cbnz	r4, 8005b38 <_dtoa_r+0x350>
 8005b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b2a:	f7fa fe97 	bl	800085c <__aeabi_ddiv>
 8005b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b32:	e028      	b.n	8005b86 <_dtoa_r+0x39e>
 8005b34:	2602      	movs	r6, #2
 8005b36:	e7f2      	b.n	8005b1e <_dtoa_r+0x336>
 8005b38:	07e1      	lsls	r1, r4, #31
 8005b3a:	d508      	bpl.n	8005b4e <_dtoa_r+0x366>
 8005b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b44:	f7fa fd60 	bl	8000608 <__aeabi_dmul>
 8005b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b4c:	3601      	adds	r6, #1
 8005b4e:	1064      	asrs	r4, r4, #1
 8005b50:	3508      	adds	r5, #8
 8005b52:	e7e5      	b.n	8005b20 <_dtoa_r+0x338>
 8005b54:	f000 80d2 	beq.w	8005cfc <_dtoa_r+0x514>
 8005b58:	427c      	negs	r4, r7
 8005b5a:	4b92      	ldr	r3, [pc, #584]	@ (8005da4 <_dtoa_r+0x5bc>)
 8005b5c:	4d92      	ldr	r5, [pc, #584]	@ (8005da8 <_dtoa_r+0x5c0>)
 8005b5e:	f004 020f 	and.w	r2, r4, #15
 8005b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b6e:	f7fa fd4b 	bl	8000608 <__aeabi_dmul>
 8005b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b76:	1124      	asrs	r4, r4, #4
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2602      	movs	r6, #2
 8005b7c:	2c00      	cmp	r4, #0
 8005b7e:	f040 80b2 	bne.w	8005ce6 <_dtoa_r+0x4fe>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1d3      	bne.n	8005b2e <_dtoa_r+0x346>
 8005b86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005b88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 80b7 	beq.w	8005d00 <_dtoa_r+0x518>
 8005b92:	4b86      	ldr	r3, [pc, #536]	@ (8005dac <_dtoa_r+0x5c4>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	4620      	mov	r0, r4
 8005b98:	4629      	mov	r1, r5
 8005b9a:	f7fa ffa7 	bl	8000aec <__aeabi_dcmplt>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	f000 80ae 	beq.w	8005d00 <_dtoa_r+0x518>
 8005ba4:	9b07      	ldr	r3, [sp, #28]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 80aa 	beq.w	8005d00 <_dtoa_r+0x518>
 8005bac:	9b00      	ldr	r3, [sp, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	dd37      	ble.n	8005c22 <_dtoa_r+0x43a>
 8005bb2:	1e7b      	subs	r3, r7, #1
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	4b7d      	ldr	r3, [pc, #500]	@ (8005db0 <_dtoa_r+0x5c8>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	f7fa fd23 	bl	8000608 <__aeabi_dmul>
 8005bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bc6:	9c00      	ldr	r4, [sp, #0]
 8005bc8:	3601      	adds	r6, #1
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f7fa fcb2 	bl	8000534 <__aeabi_i2d>
 8005bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bd4:	f7fa fd18 	bl	8000608 <__aeabi_dmul>
 8005bd8:	4b76      	ldr	r3, [pc, #472]	@ (8005db4 <_dtoa_r+0x5cc>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f7fa fb5e 	bl	800029c <__adddf3>
 8005be0:	4605      	mov	r5, r0
 8005be2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005be6:	2c00      	cmp	r4, #0
 8005be8:	f040 808d 	bne.w	8005d06 <_dtoa_r+0x51e>
 8005bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf0:	4b71      	ldr	r3, [pc, #452]	@ (8005db8 <_dtoa_r+0x5d0>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f7fa fb50 	bl	8000298 <__aeabi_dsub>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c00:	462a      	mov	r2, r5
 8005c02:	4633      	mov	r3, r6
 8005c04:	f7fa ff90 	bl	8000b28 <__aeabi_dcmpgt>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	f040 828b 	bne.w	8006124 <_dtoa_r+0x93c>
 8005c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c12:	462a      	mov	r2, r5
 8005c14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005c18:	f7fa ff68 	bl	8000aec <__aeabi_dcmplt>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	f040 8128 	bne.w	8005e72 <_dtoa_r+0x68a>
 8005c22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005c26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005c2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f2c0 815a 	blt.w	8005ee6 <_dtoa_r+0x6fe>
 8005c32:	2f0e      	cmp	r7, #14
 8005c34:	f300 8157 	bgt.w	8005ee6 <_dtoa_r+0x6fe>
 8005c38:	4b5a      	ldr	r3, [pc, #360]	@ (8005da4 <_dtoa_r+0x5bc>)
 8005c3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c3e:	ed93 7b00 	vldr	d7, [r3]
 8005c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	ed8d 7b00 	vstr	d7, [sp]
 8005c4a:	da03      	bge.n	8005c54 <_dtoa_r+0x46c>
 8005c4c:	9b07      	ldr	r3, [sp, #28]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f340 8101 	ble.w	8005e56 <_dtoa_r+0x66e>
 8005c54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c58:	4656      	mov	r6, sl
 8005c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c5e:	4620      	mov	r0, r4
 8005c60:	4629      	mov	r1, r5
 8005c62:	f7fa fdfb 	bl	800085c <__aeabi_ddiv>
 8005c66:	f7fa ff7f 	bl	8000b68 <__aeabi_d2iz>
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	f7fa fc62 	bl	8000534 <__aeabi_i2d>
 8005c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c74:	f7fa fcc8 	bl	8000608 <__aeabi_dmul>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	4629      	mov	r1, r5
 8005c80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c84:	f7fa fb08 	bl	8000298 <__aeabi_dsub>
 8005c88:	f806 4b01 	strb.w	r4, [r6], #1
 8005c8c:	9d07      	ldr	r5, [sp, #28]
 8005c8e:	eba6 040a 	sub.w	r4, r6, sl
 8005c92:	42a5      	cmp	r5, r4
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	f040 8117 	bne.w	8005eca <_dtoa_r+0x6e2>
 8005c9c:	f7fa fafe 	bl	800029c <__adddf3>
 8005ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	460d      	mov	r5, r1
 8005ca8:	f7fa ff3e 	bl	8000b28 <__aeabi_dcmpgt>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	f040 80f9 	bne.w	8005ea4 <_dtoa_r+0x6bc>
 8005cb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	4629      	mov	r1, r5
 8005cba:	f7fa ff0d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cbe:	b118      	cbz	r0, 8005cc8 <_dtoa_r+0x4e0>
 8005cc0:	f018 0f01 	tst.w	r8, #1
 8005cc4:	f040 80ee 	bne.w	8005ea4 <_dtoa_r+0x6bc>
 8005cc8:	4649      	mov	r1, r9
 8005cca:	4658      	mov	r0, fp
 8005ccc:	f000 fc90 	bl	80065f0 <_Bfree>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	7033      	strb	r3, [r6, #0]
 8005cd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005cd6:	3701      	adds	r7, #1
 8005cd8:	601f      	str	r7, [r3, #0]
 8005cda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 831d 	beq.w	800631c <_dtoa_r+0xb34>
 8005ce2:	601e      	str	r6, [r3, #0]
 8005ce4:	e31a      	b.n	800631c <_dtoa_r+0xb34>
 8005ce6:	07e2      	lsls	r2, r4, #31
 8005ce8:	d505      	bpl.n	8005cf6 <_dtoa_r+0x50e>
 8005cea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cee:	f7fa fc8b 	bl	8000608 <__aeabi_dmul>
 8005cf2:	3601      	adds	r6, #1
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	1064      	asrs	r4, r4, #1
 8005cf8:	3508      	adds	r5, #8
 8005cfa:	e73f      	b.n	8005b7c <_dtoa_r+0x394>
 8005cfc:	2602      	movs	r6, #2
 8005cfe:	e742      	b.n	8005b86 <_dtoa_r+0x39e>
 8005d00:	9c07      	ldr	r4, [sp, #28]
 8005d02:	9704      	str	r7, [sp, #16]
 8005d04:	e761      	b.n	8005bca <_dtoa_r+0x3e2>
 8005d06:	4b27      	ldr	r3, [pc, #156]	@ (8005da4 <_dtoa_r+0x5bc>)
 8005d08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d12:	4454      	add	r4, sl
 8005d14:	2900      	cmp	r1, #0
 8005d16:	d053      	beq.n	8005dc0 <_dtoa_r+0x5d8>
 8005d18:	4928      	ldr	r1, [pc, #160]	@ (8005dbc <_dtoa_r+0x5d4>)
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f7fa fd9e 	bl	800085c <__aeabi_ddiv>
 8005d20:	4633      	mov	r3, r6
 8005d22:	462a      	mov	r2, r5
 8005d24:	f7fa fab8 	bl	8000298 <__aeabi_dsub>
 8005d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d2c:	4656      	mov	r6, sl
 8005d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d32:	f7fa ff19 	bl	8000b68 <__aeabi_d2iz>
 8005d36:	4605      	mov	r5, r0
 8005d38:	f7fa fbfc 	bl	8000534 <__aeabi_i2d>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d44:	f7fa faa8 	bl	8000298 <__aeabi_dsub>
 8005d48:	3530      	adds	r5, #48	@ 0x30
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d52:	f806 5b01 	strb.w	r5, [r6], #1
 8005d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d5a:	f7fa fec7 	bl	8000aec <__aeabi_dcmplt>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d171      	bne.n	8005e46 <_dtoa_r+0x65e>
 8005d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d66:	4911      	ldr	r1, [pc, #68]	@ (8005dac <_dtoa_r+0x5c4>)
 8005d68:	2000      	movs	r0, #0
 8005d6a:	f7fa fa95 	bl	8000298 <__aeabi_dsub>
 8005d6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d72:	f7fa febb 	bl	8000aec <__aeabi_dcmplt>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	f040 8095 	bne.w	8005ea6 <_dtoa_r+0x6be>
 8005d7c:	42a6      	cmp	r6, r4
 8005d7e:	f43f af50 	beq.w	8005c22 <_dtoa_r+0x43a>
 8005d82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d86:	4b0a      	ldr	r3, [pc, #40]	@ (8005db0 <_dtoa_r+0x5c8>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f7fa fc3d 	bl	8000608 <__aeabi_dmul>
 8005d8e:	4b08      	ldr	r3, [pc, #32]	@ (8005db0 <_dtoa_r+0x5c8>)
 8005d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d94:	2200      	movs	r2, #0
 8005d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d9a:	f7fa fc35 	bl	8000608 <__aeabi_dmul>
 8005d9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005da2:	e7c4      	b.n	8005d2e <_dtoa_r+0x546>
 8005da4:	080075d8 	.word	0x080075d8
 8005da8:	080075b0 	.word	0x080075b0
 8005dac:	3ff00000 	.word	0x3ff00000
 8005db0:	40240000 	.word	0x40240000
 8005db4:	401c0000 	.word	0x401c0000
 8005db8:	40140000 	.word	0x40140000
 8005dbc:	3fe00000 	.word	0x3fe00000
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f7fa fc20 	bl	8000608 <__aeabi_dmul>
 8005dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005dcc:	9415      	str	r4, [sp, #84]	@ 0x54
 8005dce:	4656      	mov	r6, sl
 8005dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dd4:	f7fa fec8 	bl	8000b68 <__aeabi_d2iz>
 8005dd8:	4605      	mov	r5, r0
 8005dda:	f7fa fbab 	bl	8000534 <__aeabi_i2d>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005de6:	f7fa fa57 	bl	8000298 <__aeabi_dsub>
 8005dea:	3530      	adds	r5, #48	@ 0x30
 8005dec:	f806 5b01 	strb.w	r5, [r6], #1
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	42a6      	cmp	r6, r4
 8005df6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	d124      	bne.n	8005e4a <_dtoa_r+0x662>
 8005e00:	4bac      	ldr	r3, [pc, #688]	@ (80060b4 <_dtoa_r+0x8cc>)
 8005e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e06:	f7fa fa49 	bl	800029c <__adddf3>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e12:	f7fa fe89 	bl	8000b28 <__aeabi_dcmpgt>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d145      	bne.n	8005ea6 <_dtoa_r+0x6be>
 8005e1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e1e:	49a5      	ldr	r1, [pc, #660]	@ (80060b4 <_dtoa_r+0x8cc>)
 8005e20:	2000      	movs	r0, #0
 8005e22:	f7fa fa39 	bl	8000298 <__aeabi_dsub>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e2e:	f7fa fe5d 	bl	8000aec <__aeabi_dcmplt>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	f43f aef5 	beq.w	8005c22 <_dtoa_r+0x43a>
 8005e38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005e3a:	1e73      	subs	r3, r6, #1
 8005e3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8005e3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e42:	2b30      	cmp	r3, #48	@ 0x30
 8005e44:	d0f8      	beq.n	8005e38 <_dtoa_r+0x650>
 8005e46:	9f04      	ldr	r7, [sp, #16]
 8005e48:	e73e      	b.n	8005cc8 <_dtoa_r+0x4e0>
 8005e4a:	4b9b      	ldr	r3, [pc, #620]	@ (80060b8 <_dtoa_r+0x8d0>)
 8005e4c:	f7fa fbdc 	bl	8000608 <__aeabi_dmul>
 8005e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e54:	e7bc      	b.n	8005dd0 <_dtoa_r+0x5e8>
 8005e56:	d10c      	bne.n	8005e72 <_dtoa_r+0x68a>
 8005e58:	4b98      	ldr	r3, [pc, #608]	@ (80060bc <_dtoa_r+0x8d4>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e60:	f7fa fbd2 	bl	8000608 <__aeabi_dmul>
 8005e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e68:	f7fa fe54 	bl	8000b14 <__aeabi_dcmpge>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	f000 8157 	beq.w	8006120 <_dtoa_r+0x938>
 8005e72:	2400      	movs	r4, #0
 8005e74:	4625      	mov	r5, r4
 8005e76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	9304      	str	r3, [sp, #16]
 8005e7c:	4656      	mov	r6, sl
 8005e7e:	2700      	movs	r7, #0
 8005e80:	4621      	mov	r1, r4
 8005e82:	4658      	mov	r0, fp
 8005e84:	f000 fbb4 	bl	80065f0 <_Bfree>
 8005e88:	2d00      	cmp	r5, #0
 8005e8a:	d0dc      	beq.n	8005e46 <_dtoa_r+0x65e>
 8005e8c:	b12f      	cbz	r7, 8005e9a <_dtoa_r+0x6b2>
 8005e8e:	42af      	cmp	r7, r5
 8005e90:	d003      	beq.n	8005e9a <_dtoa_r+0x6b2>
 8005e92:	4639      	mov	r1, r7
 8005e94:	4658      	mov	r0, fp
 8005e96:	f000 fbab 	bl	80065f0 <_Bfree>
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	4658      	mov	r0, fp
 8005e9e:	f000 fba7 	bl	80065f0 <_Bfree>
 8005ea2:	e7d0      	b.n	8005e46 <_dtoa_r+0x65e>
 8005ea4:	9704      	str	r7, [sp, #16]
 8005ea6:	4633      	mov	r3, r6
 8005ea8:	461e      	mov	r6, r3
 8005eaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005eae:	2a39      	cmp	r2, #57	@ 0x39
 8005eb0:	d107      	bne.n	8005ec2 <_dtoa_r+0x6da>
 8005eb2:	459a      	cmp	sl, r3
 8005eb4:	d1f8      	bne.n	8005ea8 <_dtoa_r+0x6c0>
 8005eb6:	9a04      	ldr	r2, [sp, #16]
 8005eb8:	3201      	adds	r2, #1
 8005eba:	9204      	str	r2, [sp, #16]
 8005ebc:	2230      	movs	r2, #48	@ 0x30
 8005ebe:	f88a 2000 	strb.w	r2, [sl]
 8005ec2:	781a      	ldrb	r2, [r3, #0]
 8005ec4:	3201      	adds	r2, #1
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	e7bd      	b.n	8005e46 <_dtoa_r+0x65e>
 8005eca:	4b7b      	ldr	r3, [pc, #492]	@ (80060b8 <_dtoa_r+0x8d0>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f7fa fb9b 	bl	8000608 <__aeabi_dmul>
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	460d      	mov	r5, r1
 8005eda:	f7fa fdfd 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	f43f aebb 	beq.w	8005c5a <_dtoa_r+0x472>
 8005ee4:	e6f0      	b.n	8005cc8 <_dtoa_r+0x4e0>
 8005ee6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ee8:	2a00      	cmp	r2, #0
 8005eea:	f000 80db 	beq.w	80060a4 <_dtoa_r+0x8bc>
 8005eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ef0:	2a01      	cmp	r2, #1
 8005ef2:	f300 80bf 	bgt.w	8006074 <_dtoa_r+0x88c>
 8005ef6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005ef8:	2a00      	cmp	r2, #0
 8005efa:	f000 80b7 	beq.w	800606c <_dtoa_r+0x884>
 8005efe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005f02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f04:	4646      	mov	r6, r8
 8005f06:	9a08      	ldr	r2, [sp, #32]
 8005f08:	2101      	movs	r1, #1
 8005f0a:	441a      	add	r2, r3
 8005f0c:	4658      	mov	r0, fp
 8005f0e:	4498      	add	r8, r3
 8005f10:	9208      	str	r2, [sp, #32]
 8005f12:	f000 fc21 	bl	8006758 <__i2b>
 8005f16:	4605      	mov	r5, r0
 8005f18:	b15e      	cbz	r6, 8005f32 <_dtoa_r+0x74a>
 8005f1a:	9b08      	ldr	r3, [sp, #32]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	dd08      	ble.n	8005f32 <_dtoa_r+0x74a>
 8005f20:	42b3      	cmp	r3, r6
 8005f22:	9a08      	ldr	r2, [sp, #32]
 8005f24:	bfa8      	it	ge
 8005f26:	4633      	movge	r3, r6
 8005f28:	eba8 0803 	sub.w	r8, r8, r3
 8005f2c:	1af6      	subs	r6, r6, r3
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	9308      	str	r3, [sp, #32]
 8005f32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f34:	b1f3      	cbz	r3, 8005f74 <_dtoa_r+0x78c>
 8005f36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80b7 	beq.w	80060ac <_dtoa_r+0x8c4>
 8005f3e:	b18c      	cbz	r4, 8005f64 <_dtoa_r+0x77c>
 8005f40:	4629      	mov	r1, r5
 8005f42:	4622      	mov	r2, r4
 8005f44:	4658      	mov	r0, fp
 8005f46:	f000 fcc7 	bl	80068d8 <__pow5mult>
 8005f4a:	464a      	mov	r2, r9
 8005f4c:	4601      	mov	r1, r0
 8005f4e:	4605      	mov	r5, r0
 8005f50:	4658      	mov	r0, fp
 8005f52:	f000 fc17 	bl	8006784 <__multiply>
 8005f56:	4649      	mov	r1, r9
 8005f58:	9004      	str	r0, [sp, #16]
 8005f5a:	4658      	mov	r0, fp
 8005f5c:	f000 fb48 	bl	80065f0 <_Bfree>
 8005f60:	9b04      	ldr	r3, [sp, #16]
 8005f62:	4699      	mov	r9, r3
 8005f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f66:	1b1a      	subs	r2, r3, r4
 8005f68:	d004      	beq.n	8005f74 <_dtoa_r+0x78c>
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	4658      	mov	r0, fp
 8005f6e:	f000 fcb3 	bl	80068d8 <__pow5mult>
 8005f72:	4681      	mov	r9, r0
 8005f74:	2101      	movs	r1, #1
 8005f76:	4658      	mov	r0, fp
 8005f78:	f000 fbee 	bl	8006758 <__i2b>
 8005f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f7e:	4604      	mov	r4, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 81cf 	beq.w	8006324 <_dtoa_r+0xb3c>
 8005f86:	461a      	mov	r2, r3
 8005f88:	4601      	mov	r1, r0
 8005f8a:	4658      	mov	r0, fp
 8005f8c:	f000 fca4 	bl	80068d8 <__pow5mult>
 8005f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	4604      	mov	r4, r0
 8005f96:	f300 8095 	bgt.w	80060c4 <_dtoa_r+0x8dc>
 8005f9a:	9b02      	ldr	r3, [sp, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f040 8087 	bne.w	80060b0 <_dtoa_r+0x8c8>
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f040 8089 	bne.w	80060c0 <_dtoa_r+0x8d8>
 8005fae:	9b03      	ldr	r3, [sp, #12]
 8005fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fb4:	0d1b      	lsrs	r3, r3, #20
 8005fb6:	051b      	lsls	r3, r3, #20
 8005fb8:	b12b      	cbz	r3, 8005fc6 <_dtoa_r+0x7de>
 8005fba:	9b08      	ldr	r3, [sp, #32]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	9308      	str	r3, [sp, #32]
 8005fc0:	f108 0801 	add.w	r8, r8, #1
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 81b0 	beq.w	8006330 <_dtoa_r+0xb48>
 8005fd0:	6923      	ldr	r3, [r4, #16]
 8005fd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fd6:	6918      	ldr	r0, [r3, #16]
 8005fd8:	f000 fb72 	bl	80066c0 <__hi0bits>
 8005fdc:	f1c0 0020 	rsb	r0, r0, #32
 8005fe0:	9b08      	ldr	r3, [sp, #32]
 8005fe2:	4418      	add	r0, r3
 8005fe4:	f010 001f 	ands.w	r0, r0, #31
 8005fe8:	d077      	beq.n	80060da <_dtoa_r+0x8f2>
 8005fea:	f1c0 0320 	rsb	r3, r0, #32
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	dd6b      	ble.n	80060ca <_dtoa_r+0x8e2>
 8005ff2:	9b08      	ldr	r3, [sp, #32]
 8005ff4:	f1c0 001c 	rsb	r0, r0, #28
 8005ff8:	4403      	add	r3, r0
 8005ffa:	4480      	add	r8, r0
 8005ffc:	4406      	add	r6, r0
 8005ffe:	9308      	str	r3, [sp, #32]
 8006000:	f1b8 0f00 	cmp.w	r8, #0
 8006004:	dd05      	ble.n	8006012 <_dtoa_r+0x82a>
 8006006:	4649      	mov	r1, r9
 8006008:	4642      	mov	r2, r8
 800600a:	4658      	mov	r0, fp
 800600c:	f000 fcbe 	bl	800698c <__lshift>
 8006010:	4681      	mov	r9, r0
 8006012:	9b08      	ldr	r3, [sp, #32]
 8006014:	2b00      	cmp	r3, #0
 8006016:	dd05      	ble.n	8006024 <_dtoa_r+0x83c>
 8006018:	4621      	mov	r1, r4
 800601a:	461a      	mov	r2, r3
 800601c:	4658      	mov	r0, fp
 800601e:	f000 fcb5 	bl	800698c <__lshift>
 8006022:	4604      	mov	r4, r0
 8006024:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006026:	2b00      	cmp	r3, #0
 8006028:	d059      	beq.n	80060de <_dtoa_r+0x8f6>
 800602a:	4621      	mov	r1, r4
 800602c:	4648      	mov	r0, r9
 800602e:	f000 fd19 	bl	8006a64 <__mcmp>
 8006032:	2800      	cmp	r0, #0
 8006034:	da53      	bge.n	80060de <_dtoa_r+0x8f6>
 8006036:	1e7b      	subs	r3, r7, #1
 8006038:	9304      	str	r3, [sp, #16]
 800603a:	4649      	mov	r1, r9
 800603c:	2300      	movs	r3, #0
 800603e:	220a      	movs	r2, #10
 8006040:	4658      	mov	r0, fp
 8006042:	f000 faf7 	bl	8006634 <__multadd>
 8006046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006048:	4681      	mov	r9, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 8172 	beq.w	8006334 <_dtoa_r+0xb4c>
 8006050:	2300      	movs	r3, #0
 8006052:	4629      	mov	r1, r5
 8006054:	220a      	movs	r2, #10
 8006056:	4658      	mov	r0, fp
 8006058:	f000 faec 	bl	8006634 <__multadd>
 800605c:	9b00      	ldr	r3, [sp, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	4605      	mov	r5, r0
 8006062:	dc67      	bgt.n	8006134 <_dtoa_r+0x94c>
 8006064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006066:	2b02      	cmp	r3, #2
 8006068:	dc41      	bgt.n	80060ee <_dtoa_r+0x906>
 800606a:	e063      	b.n	8006134 <_dtoa_r+0x94c>
 800606c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800606e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006072:	e746      	b.n	8005f02 <_dtoa_r+0x71a>
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	1e5c      	subs	r4, r3, #1
 8006078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800607a:	42a3      	cmp	r3, r4
 800607c:	bfbf      	itttt	lt
 800607e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006080:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006082:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006084:	1ae3      	sublt	r3, r4, r3
 8006086:	bfb4      	ite	lt
 8006088:	18d2      	addlt	r2, r2, r3
 800608a:	1b1c      	subge	r4, r3, r4
 800608c:	9b07      	ldr	r3, [sp, #28]
 800608e:	bfbc      	itt	lt
 8006090:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006092:	2400      	movlt	r4, #0
 8006094:	2b00      	cmp	r3, #0
 8006096:	bfb5      	itete	lt
 8006098:	eba8 0603 	sublt.w	r6, r8, r3
 800609c:	9b07      	ldrge	r3, [sp, #28]
 800609e:	2300      	movlt	r3, #0
 80060a0:	4646      	movge	r6, r8
 80060a2:	e730      	b.n	8005f06 <_dtoa_r+0x71e>
 80060a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80060a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80060a8:	4646      	mov	r6, r8
 80060aa:	e735      	b.n	8005f18 <_dtoa_r+0x730>
 80060ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060ae:	e75c      	b.n	8005f6a <_dtoa_r+0x782>
 80060b0:	2300      	movs	r3, #0
 80060b2:	e788      	b.n	8005fc6 <_dtoa_r+0x7de>
 80060b4:	3fe00000 	.word	0x3fe00000
 80060b8:	40240000 	.word	0x40240000
 80060bc:	40140000 	.word	0x40140000
 80060c0:	9b02      	ldr	r3, [sp, #8]
 80060c2:	e780      	b.n	8005fc6 <_dtoa_r+0x7de>
 80060c4:	2300      	movs	r3, #0
 80060c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80060c8:	e782      	b.n	8005fd0 <_dtoa_r+0x7e8>
 80060ca:	d099      	beq.n	8006000 <_dtoa_r+0x818>
 80060cc:	9a08      	ldr	r2, [sp, #32]
 80060ce:	331c      	adds	r3, #28
 80060d0:	441a      	add	r2, r3
 80060d2:	4498      	add	r8, r3
 80060d4:	441e      	add	r6, r3
 80060d6:	9208      	str	r2, [sp, #32]
 80060d8:	e792      	b.n	8006000 <_dtoa_r+0x818>
 80060da:	4603      	mov	r3, r0
 80060dc:	e7f6      	b.n	80060cc <_dtoa_r+0x8e4>
 80060de:	9b07      	ldr	r3, [sp, #28]
 80060e0:	9704      	str	r7, [sp, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	dc20      	bgt.n	8006128 <_dtoa_r+0x940>
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	dd1e      	ble.n	800612c <_dtoa_r+0x944>
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f47f aec0 	bne.w	8005e76 <_dtoa_r+0x68e>
 80060f6:	4621      	mov	r1, r4
 80060f8:	2205      	movs	r2, #5
 80060fa:	4658      	mov	r0, fp
 80060fc:	f000 fa9a 	bl	8006634 <__multadd>
 8006100:	4601      	mov	r1, r0
 8006102:	4604      	mov	r4, r0
 8006104:	4648      	mov	r0, r9
 8006106:	f000 fcad 	bl	8006a64 <__mcmp>
 800610a:	2800      	cmp	r0, #0
 800610c:	f77f aeb3 	ble.w	8005e76 <_dtoa_r+0x68e>
 8006110:	4656      	mov	r6, sl
 8006112:	2331      	movs	r3, #49	@ 0x31
 8006114:	f806 3b01 	strb.w	r3, [r6], #1
 8006118:	9b04      	ldr	r3, [sp, #16]
 800611a:	3301      	adds	r3, #1
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	e6ae      	b.n	8005e7e <_dtoa_r+0x696>
 8006120:	9c07      	ldr	r4, [sp, #28]
 8006122:	9704      	str	r7, [sp, #16]
 8006124:	4625      	mov	r5, r4
 8006126:	e7f3      	b.n	8006110 <_dtoa_r+0x928>
 8006128:	9b07      	ldr	r3, [sp, #28]
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 8104 	beq.w	800633c <_dtoa_r+0xb54>
 8006134:	2e00      	cmp	r6, #0
 8006136:	dd05      	ble.n	8006144 <_dtoa_r+0x95c>
 8006138:	4629      	mov	r1, r5
 800613a:	4632      	mov	r2, r6
 800613c:	4658      	mov	r0, fp
 800613e:	f000 fc25 	bl	800698c <__lshift>
 8006142:	4605      	mov	r5, r0
 8006144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006146:	2b00      	cmp	r3, #0
 8006148:	d05a      	beq.n	8006200 <_dtoa_r+0xa18>
 800614a:	6869      	ldr	r1, [r5, #4]
 800614c:	4658      	mov	r0, fp
 800614e:	f000 fa0f 	bl	8006570 <_Balloc>
 8006152:	4606      	mov	r6, r0
 8006154:	b928      	cbnz	r0, 8006162 <_dtoa_r+0x97a>
 8006156:	4b84      	ldr	r3, [pc, #528]	@ (8006368 <_dtoa_r+0xb80>)
 8006158:	4602      	mov	r2, r0
 800615a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800615e:	f7ff bb5a 	b.w	8005816 <_dtoa_r+0x2e>
 8006162:	692a      	ldr	r2, [r5, #16]
 8006164:	3202      	adds	r2, #2
 8006166:	0092      	lsls	r2, r2, #2
 8006168:	f105 010c 	add.w	r1, r5, #12
 800616c:	300c      	adds	r0, #12
 800616e:	f7ff faa4 	bl	80056ba <memcpy>
 8006172:	2201      	movs	r2, #1
 8006174:	4631      	mov	r1, r6
 8006176:	4658      	mov	r0, fp
 8006178:	f000 fc08 	bl	800698c <__lshift>
 800617c:	f10a 0301 	add.w	r3, sl, #1
 8006180:	9307      	str	r3, [sp, #28]
 8006182:	9b00      	ldr	r3, [sp, #0]
 8006184:	4453      	add	r3, sl
 8006186:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006188:	9b02      	ldr	r3, [sp, #8]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	462f      	mov	r7, r5
 8006190:	930a      	str	r3, [sp, #40]	@ 0x28
 8006192:	4605      	mov	r5, r0
 8006194:	9b07      	ldr	r3, [sp, #28]
 8006196:	4621      	mov	r1, r4
 8006198:	3b01      	subs	r3, #1
 800619a:	4648      	mov	r0, r9
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	f7ff fa9a 	bl	80056d6 <quorem>
 80061a2:	4639      	mov	r1, r7
 80061a4:	9002      	str	r0, [sp, #8]
 80061a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061aa:	4648      	mov	r0, r9
 80061ac:	f000 fc5a 	bl	8006a64 <__mcmp>
 80061b0:	462a      	mov	r2, r5
 80061b2:	9008      	str	r0, [sp, #32]
 80061b4:	4621      	mov	r1, r4
 80061b6:	4658      	mov	r0, fp
 80061b8:	f000 fc70 	bl	8006a9c <__mdiff>
 80061bc:	68c2      	ldr	r2, [r0, #12]
 80061be:	4606      	mov	r6, r0
 80061c0:	bb02      	cbnz	r2, 8006204 <_dtoa_r+0xa1c>
 80061c2:	4601      	mov	r1, r0
 80061c4:	4648      	mov	r0, r9
 80061c6:	f000 fc4d 	bl	8006a64 <__mcmp>
 80061ca:	4602      	mov	r2, r0
 80061cc:	4631      	mov	r1, r6
 80061ce:	4658      	mov	r0, fp
 80061d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80061d2:	f000 fa0d 	bl	80065f0 <_Bfree>
 80061d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061da:	9e07      	ldr	r6, [sp, #28]
 80061dc:	ea43 0102 	orr.w	r1, r3, r2
 80061e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061e2:	4319      	orrs	r1, r3
 80061e4:	d110      	bne.n	8006208 <_dtoa_r+0xa20>
 80061e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061ea:	d029      	beq.n	8006240 <_dtoa_r+0xa58>
 80061ec:	9b08      	ldr	r3, [sp, #32]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	dd02      	ble.n	80061f8 <_dtoa_r+0xa10>
 80061f2:	9b02      	ldr	r3, [sp, #8]
 80061f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80061f8:	9b00      	ldr	r3, [sp, #0]
 80061fa:	f883 8000 	strb.w	r8, [r3]
 80061fe:	e63f      	b.n	8005e80 <_dtoa_r+0x698>
 8006200:	4628      	mov	r0, r5
 8006202:	e7bb      	b.n	800617c <_dtoa_r+0x994>
 8006204:	2201      	movs	r2, #1
 8006206:	e7e1      	b.n	80061cc <_dtoa_r+0x9e4>
 8006208:	9b08      	ldr	r3, [sp, #32]
 800620a:	2b00      	cmp	r3, #0
 800620c:	db04      	blt.n	8006218 <_dtoa_r+0xa30>
 800620e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006210:	430b      	orrs	r3, r1
 8006212:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006214:	430b      	orrs	r3, r1
 8006216:	d120      	bne.n	800625a <_dtoa_r+0xa72>
 8006218:	2a00      	cmp	r2, #0
 800621a:	dded      	ble.n	80061f8 <_dtoa_r+0xa10>
 800621c:	4649      	mov	r1, r9
 800621e:	2201      	movs	r2, #1
 8006220:	4658      	mov	r0, fp
 8006222:	f000 fbb3 	bl	800698c <__lshift>
 8006226:	4621      	mov	r1, r4
 8006228:	4681      	mov	r9, r0
 800622a:	f000 fc1b 	bl	8006a64 <__mcmp>
 800622e:	2800      	cmp	r0, #0
 8006230:	dc03      	bgt.n	800623a <_dtoa_r+0xa52>
 8006232:	d1e1      	bne.n	80061f8 <_dtoa_r+0xa10>
 8006234:	f018 0f01 	tst.w	r8, #1
 8006238:	d0de      	beq.n	80061f8 <_dtoa_r+0xa10>
 800623a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800623e:	d1d8      	bne.n	80061f2 <_dtoa_r+0xa0a>
 8006240:	9a00      	ldr	r2, [sp, #0]
 8006242:	2339      	movs	r3, #57	@ 0x39
 8006244:	7013      	strb	r3, [r2, #0]
 8006246:	4633      	mov	r3, r6
 8006248:	461e      	mov	r6, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006250:	2a39      	cmp	r2, #57	@ 0x39
 8006252:	d052      	beq.n	80062fa <_dtoa_r+0xb12>
 8006254:	3201      	adds	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	e612      	b.n	8005e80 <_dtoa_r+0x698>
 800625a:	2a00      	cmp	r2, #0
 800625c:	dd07      	ble.n	800626e <_dtoa_r+0xa86>
 800625e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006262:	d0ed      	beq.n	8006240 <_dtoa_r+0xa58>
 8006264:	9a00      	ldr	r2, [sp, #0]
 8006266:	f108 0301 	add.w	r3, r8, #1
 800626a:	7013      	strb	r3, [r2, #0]
 800626c:	e608      	b.n	8005e80 <_dtoa_r+0x698>
 800626e:	9b07      	ldr	r3, [sp, #28]
 8006270:	9a07      	ldr	r2, [sp, #28]
 8006272:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006278:	4293      	cmp	r3, r2
 800627a:	d028      	beq.n	80062ce <_dtoa_r+0xae6>
 800627c:	4649      	mov	r1, r9
 800627e:	2300      	movs	r3, #0
 8006280:	220a      	movs	r2, #10
 8006282:	4658      	mov	r0, fp
 8006284:	f000 f9d6 	bl	8006634 <__multadd>
 8006288:	42af      	cmp	r7, r5
 800628a:	4681      	mov	r9, r0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	f04f 020a 	mov.w	r2, #10
 8006294:	4639      	mov	r1, r7
 8006296:	4658      	mov	r0, fp
 8006298:	d107      	bne.n	80062aa <_dtoa_r+0xac2>
 800629a:	f000 f9cb 	bl	8006634 <__multadd>
 800629e:	4607      	mov	r7, r0
 80062a0:	4605      	mov	r5, r0
 80062a2:	9b07      	ldr	r3, [sp, #28]
 80062a4:	3301      	adds	r3, #1
 80062a6:	9307      	str	r3, [sp, #28]
 80062a8:	e774      	b.n	8006194 <_dtoa_r+0x9ac>
 80062aa:	f000 f9c3 	bl	8006634 <__multadd>
 80062ae:	4629      	mov	r1, r5
 80062b0:	4607      	mov	r7, r0
 80062b2:	2300      	movs	r3, #0
 80062b4:	220a      	movs	r2, #10
 80062b6:	4658      	mov	r0, fp
 80062b8:	f000 f9bc 	bl	8006634 <__multadd>
 80062bc:	4605      	mov	r5, r0
 80062be:	e7f0      	b.n	80062a2 <_dtoa_r+0xaba>
 80062c0:	9b00      	ldr	r3, [sp, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bfcc      	ite	gt
 80062c6:	461e      	movgt	r6, r3
 80062c8:	2601      	movle	r6, #1
 80062ca:	4456      	add	r6, sl
 80062cc:	2700      	movs	r7, #0
 80062ce:	4649      	mov	r1, r9
 80062d0:	2201      	movs	r2, #1
 80062d2:	4658      	mov	r0, fp
 80062d4:	f000 fb5a 	bl	800698c <__lshift>
 80062d8:	4621      	mov	r1, r4
 80062da:	4681      	mov	r9, r0
 80062dc:	f000 fbc2 	bl	8006a64 <__mcmp>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	dcb0      	bgt.n	8006246 <_dtoa_r+0xa5e>
 80062e4:	d102      	bne.n	80062ec <_dtoa_r+0xb04>
 80062e6:	f018 0f01 	tst.w	r8, #1
 80062ea:	d1ac      	bne.n	8006246 <_dtoa_r+0xa5e>
 80062ec:	4633      	mov	r3, r6
 80062ee:	461e      	mov	r6, r3
 80062f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062f4:	2a30      	cmp	r2, #48	@ 0x30
 80062f6:	d0fa      	beq.n	80062ee <_dtoa_r+0xb06>
 80062f8:	e5c2      	b.n	8005e80 <_dtoa_r+0x698>
 80062fa:	459a      	cmp	sl, r3
 80062fc:	d1a4      	bne.n	8006248 <_dtoa_r+0xa60>
 80062fe:	9b04      	ldr	r3, [sp, #16]
 8006300:	3301      	adds	r3, #1
 8006302:	9304      	str	r3, [sp, #16]
 8006304:	2331      	movs	r3, #49	@ 0x31
 8006306:	f88a 3000 	strb.w	r3, [sl]
 800630a:	e5b9      	b.n	8005e80 <_dtoa_r+0x698>
 800630c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800630e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800636c <_dtoa_r+0xb84>
 8006312:	b11b      	cbz	r3, 800631c <_dtoa_r+0xb34>
 8006314:	f10a 0308 	add.w	r3, sl, #8
 8006318:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	4650      	mov	r0, sl
 800631e:	b019      	add	sp, #100	@ 0x64
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006326:	2b01      	cmp	r3, #1
 8006328:	f77f ae37 	ble.w	8005f9a <_dtoa_r+0x7b2>
 800632c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800632e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006330:	2001      	movs	r0, #1
 8006332:	e655      	b.n	8005fe0 <_dtoa_r+0x7f8>
 8006334:	9b00      	ldr	r3, [sp, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	f77f aed6 	ble.w	80060e8 <_dtoa_r+0x900>
 800633c:	4656      	mov	r6, sl
 800633e:	4621      	mov	r1, r4
 8006340:	4648      	mov	r0, r9
 8006342:	f7ff f9c8 	bl	80056d6 <quorem>
 8006346:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800634a:	f806 8b01 	strb.w	r8, [r6], #1
 800634e:	9b00      	ldr	r3, [sp, #0]
 8006350:	eba6 020a 	sub.w	r2, r6, sl
 8006354:	4293      	cmp	r3, r2
 8006356:	ddb3      	ble.n	80062c0 <_dtoa_r+0xad8>
 8006358:	4649      	mov	r1, r9
 800635a:	2300      	movs	r3, #0
 800635c:	220a      	movs	r2, #10
 800635e:	4658      	mov	r0, fp
 8006360:	f000 f968 	bl	8006634 <__multadd>
 8006364:	4681      	mov	r9, r0
 8006366:	e7ea      	b.n	800633e <_dtoa_r+0xb56>
 8006368:	08007534 	.word	0x08007534
 800636c:	080074b8 	.word	0x080074b8

08006370 <_free_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4605      	mov	r5, r0
 8006374:	2900      	cmp	r1, #0
 8006376:	d041      	beq.n	80063fc <_free_r+0x8c>
 8006378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800637c:	1f0c      	subs	r4, r1, #4
 800637e:	2b00      	cmp	r3, #0
 8006380:	bfb8      	it	lt
 8006382:	18e4      	addlt	r4, r4, r3
 8006384:	f000 f8e8 	bl	8006558 <__malloc_lock>
 8006388:	4a1d      	ldr	r2, [pc, #116]	@ (8006400 <_free_r+0x90>)
 800638a:	6813      	ldr	r3, [r2, #0]
 800638c:	b933      	cbnz	r3, 800639c <_free_r+0x2c>
 800638e:	6063      	str	r3, [r4, #4]
 8006390:	6014      	str	r4, [r2, #0]
 8006392:	4628      	mov	r0, r5
 8006394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006398:	f000 b8e4 	b.w	8006564 <__malloc_unlock>
 800639c:	42a3      	cmp	r3, r4
 800639e:	d908      	bls.n	80063b2 <_free_r+0x42>
 80063a0:	6820      	ldr	r0, [r4, #0]
 80063a2:	1821      	adds	r1, r4, r0
 80063a4:	428b      	cmp	r3, r1
 80063a6:	bf01      	itttt	eq
 80063a8:	6819      	ldreq	r1, [r3, #0]
 80063aa:	685b      	ldreq	r3, [r3, #4]
 80063ac:	1809      	addeq	r1, r1, r0
 80063ae:	6021      	streq	r1, [r4, #0]
 80063b0:	e7ed      	b.n	800638e <_free_r+0x1e>
 80063b2:	461a      	mov	r2, r3
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	b10b      	cbz	r3, 80063bc <_free_r+0x4c>
 80063b8:	42a3      	cmp	r3, r4
 80063ba:	d9fa      	bls.n	80063b2 <_free_r+0x42>
 80063bc:	6811      	ldr	r1, [r2, #0]
 80063be:	1850      	adds	r0, r2, r1
 80063c0:	42a0      	cmp	r0, r4
 80063c2:	d10b      	bne.n	80063dc <_free_r+0x6c>
 80063c4:	6820      	ldr	r0, [r4, #0]
 80063c6:	4401      	add	r1, r0
 80063c8:	1850      	adds	r0, r2, r1
 80063ca:	4283      	cmp	r3, r0
 80063cc:	6011      	str	r1, [r2, #0]
 80063ce:	d1e0      	bne.n	8006392 <_free_r+0x22>
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	6053      	str	r3, [r2, #4]
 80063d6:	4408      	add	r0, r1
 80063d8:	6010      	str	r0, [r2, #0]
 80063da:	e7da      	b.n	8006392 <_free_r+0x22>
 80063dc:	d902      	bls.n	80063e4 <_free_r+0x74>
 80063de:	230c      	movs	r3, #12
 80063e0:	602b      	str	r3, [r5, #0]
 80063e2:	e7d6      	b.n	8006392 <_free_r+0x22>
 80063e4:	6820      	ldr	r0, [r4, #0]
 80063e6:	1821      	adds	r1, r4, r0
 80063e8:	428b      	cmp	r3, r1
 80063ea:	bf04      	itt	eq
 80063ec:	6819      	ldreq	r1, [r3, #0]
 80063ee:	685b      	ldreq	r3, [r3, #4]
 80063f0:	6063      	str	r3, [r4, #4]
 80063f2:	bf04      	itt	eq
 80063f4:	1809      	addeq	r1, r1, r0
 80063f6:	6021      	streq	r1, [r4, #0]
 80063f8:	6054      	str	r4, [r2, #4]
 80063fa:	e7ca      	b.n	8006392 <_free_r+0x22>
 80063fc:	bd38      	pop	{r3, r4, r5, pc}
 80063fe:	bf00      	nop
 8006400:	20004434 	.word	0x20004434

08006404 <malloc>:
 8006404:	4b02      	ldr	r3, [pc, #8]	@ (8006410 <malloc+0xc>)
 8006406:	4601      	mov	r1, r0
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	f000 b825 	b.w	8006458 <_malloc_r>
 800640e:	bf00      	nop
 8006410:	2000001c 	.word	0x2000001c

08006414 <sbrk_aligned>:
 8006414:	b570      	push	{r4, r5, r6, lr}
 8006416:	4e0f      	ldr	r6, [pc, #60]	@ (8006454 <sbrk_aligned+0x40>)
 8006418:	460c      	mov	r4, r1
 800641a:	6831      	ldr	r1, [r6, #0]
 800641c:	4605      	mov	r5, r0
 800641e:	b911      	cbnz	r1, 8006426 <sbrk_aligned+0x12>
 8006420:	f000 fcd4 	bl	8006dcc <_sbrk_r>
 8006424:	6030      	str	r0, [r6, #0]
 8006426:	4621      	mov	r1, r4
 8006428:	4628      	mov	r0, r5
 800642a:	f000 fccf 	bl	8006dcc <_sbrk_r>
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	d103      	bne.n	800643a <sbrk_aligned+0x26>
 8006432:	f04f 34ff 	mov.w	r4, #4294967295
 8006436:	4620      	mov	r0, r4
 8006438:	bd70      	pop	{r4, r5, r6, pc}
 800643a:	1cc4      	adds	r4, r0, #3
 800643c:	f024 0403 	bic.w	r4, r4, #3
 8006440:	42a0      	cmp	r0, r4
 8006442:	d0f8      	beq.n	8006436 <sbrk_aligned+0x22>
 8006444:	1a21      	subs	r1, r4, r0
 8006446:	4628      	mov	r0, r5
 8006448:	f000 fcc0 	bl	8006dcc <_sbrk_r>
 800644c:	3001      	adds	r0, #1
 800644e:	d1f2      	bne.n	8006436 <sbrk_aligned+0x22>
 8006450:	e7ef      	b.n	8006432 <sbrk_aligned+0x1e>
 8006452:	bf00      	nop
 8006454:	20004430 	.word	0x20004430

08006458 <_malloc_r>:
 8006458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800645c:	1ccd      	adds	r5, r1, #3
 800645e:	f025 0503 	bic.w	r5, r5, #3
 8006462:	3508      	adds	r5, #8
 8006464:	2d0c      	cmp	r5, #12
 8006466:	bf38      	it	cc
 8006468:	250c      	movcc	r5, #12
 800646a:	2d00      	cmp	r5, #0
 800646c:	4606      	mov	r6, r0
 800646e:	db01      	blt.n	8006474 <_malloc_r+0x1c>
 8006470:	42a9      	cmp	r1, r5
 8006472:	d904      	bls.n	800647e <_malloc_r+0x26>
 8006474:	230c      	movs	r3, #12
 8006476:	6033      	str	r3, [r6, #0]
 8006478:	2000      	movs	r0, #0
 800647a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006554 <_malloc_r+0xfc>
 8006482:	f000 f869 	bl	8006558 <__malloc_lock>
 8006486:	f8d8 3000 	ldr.w	r3, [r8]
 800648a:	461c      	mov	r4, r3
 800648c:	bb44      	cbnz	r4, 80064e0 <_malloc_r+0x88>
 800648e:	4629      	mov	r1, r5
 8006490:	4630      	mov	r0, r6
 8006492:	f7ff ffbf 	bl	8006414 <sbrk_aligned>
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	4604      	mov	r4, r0
 800649a:	d158      	bne.n	800654e <_malloc_r+0xf6>
 800649c:	f8d8 4000 	ldr.w	r4, [r8]
 80064a0:	4627      	mov	r7, r4
 80064a2:	2f00      	cmp	r7, #0
 80064a4:	d143      	bne.n	800652e <_malloc_r+0xd6>
 80064a6:	2c00      	cmp	r4, #0
 80064a8:	d04b      	beq.n	8006542 <_malloc_r+0xea>
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	4639      	mov	r1, r7
 80064ae:	4630      	mov	r0, r6
 80064b0:	eb04 0903 	add.w	r9, r4, r3
 80064b4:	f000 fc8a 	bl	8006dcc <_sbrk_r>
 80064b8:	4581      	cmp	r9, r0
 80064ba:	d142      	bne.n	8006542 <_malloc_r+0xea>
 80064bc:	6821      	ldr	r1, [r4, #0]
 80064be:	1a6d      	subs	r5, r5, r1
 80064c0:	4629      	mov	r1, r5
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7ff ffa6 	bl	8006414 <sbrk_aligned>
 80064c8:	3001      	adds	r0, #1
 80064ca:	d03a      	beq.n	8006542 <_malloc_r+0xea>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	442b      	add	r3, r5
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	f8d8 3000 	ldr.w	r3, [r8]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	bb62      	cbnz	r2, 8006534 <_malloc_r+0xdc>
 80064da:	f8c8 7000 	str.w	r7, [r8]
 80064de:	e00f      	b.n	8006500 <_malloc_r+0xa8>
 80064e0:	6822      	ldr	r2, [r4, #0]
 80064e2:	1b52      	subs	r2, r2, r5
 80064e4:	d420      	bmi.n	8006528 <_malloc_r+0xd0>
 80064e6:	2a0b      	cmp	r2, #11
 80064e8:	d917      	bls.n	800651a <_malloc_r+0xc2>
 80064ea:	1961      	adds	r1, r4, r5
 80064ec:	42a3      	cmp	r3, r4
 80064ee:	6025      	str	r5, [r4, #0]
 80064f0:	bf18      	it	ne
 80064f2:	6059      	strne	r1, [r3, #4]
 80064f4:	6863      	ldr	r3, [r4, #4]
 80064f6:	bf08      	it	eq
 80064f8:	f8c8 1000 	streq.w	r1, [r8]
 80064fc:	5162      	str	r2, [r4, r5]
 80064fe:	604b      	str	r3, [r1, #4]
 8006500:	4630      	mov	r0, r6
 8006502:	f000 f82f 	bl	8006564 <__malloc_unlock>
 8006506:	f104 000b 	add.w	r0, r4, #11
 800650a:	1d23      	adds	r3, r4, #4
 800650c:	f020 0007 	bic.w	r0, r0, #7
 8006510:	1ac2      	subs	r2, r0, r3
 8006512:	bf1c      	itt	ne
 8006514:	1a1b      	subne	r3, r3, r0
 8006516:	50a3      	strne	r3, [r4, r2]
 8006518:	e7af      	b.n	800647a <_malloc_r+0x22>
 800651a:	6862      	ldr	r2, [r4, #4]
 800651c:	42a3      	cmp	r3, r4
 800651e:	bf0c      	ite	eq
 8006520:	f8c8 2000 	streq.w	r2, [r8]
 8006524:	605a      	strne	r2, [r3, #4]
 8006526:	e7eb      	b.n	8006500 <_malloc_r+0xa8>
 8006528:	4623      	mov	r3, r4
 800652a:	6864      	ldr	r4, [r4, #4]
 800652c:	e7ae      	b.n	800648c <_malloc_r+0x34>
 800652e:	463c      	mov	r4, r7
 8006530:	687f      	ldr	r7, [r7, #4]
 8006532:	e7b6      	b.n	80064a2 <_malloc_r+0x4a>
 8006534:	461a      	mov	r2, r3
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	42a3      	cmp	r3, r4
 800653a:	d1fb      	bne.n	8006534 <_malloc_r+0xdc>
 800653c:	2300      	movs	r3, #0
 800653e:	6053      	str	r3, [r2, #4]
 8006540:	e7de      	b.n	8006500 <_malloc_r+0xa8>
 8006542:	230c      	movs	r3, #12
 8006544:	6033      	str	r3, [r6, #0]
 8006546:	4630      	mov	r0, r6
 8006548:	f000 f80c 	bl	8006564 <__malloc_unlock>
 800654c:	e794      	b.n	8006478 <_malloc_r+0x20>
 800654e:	6005      	str	r5, [r0, #0]
 8006550:	e7d6      	b.n	8006500 <_malloc_r+0xa8>
 8006552:	bf00      	nop
 8006554:	20004434 	.word	0x20004434

08006558 <__malloc_lock>:
 8006558:	4801      	ldr	r0, [pc, #4]	@ (8006560 <__malloc_lock+0x8>)
 800655a:	f7ff b8ac 	b.w	80056b6 <__retarget_lock_acquire_recursive>
 800655e:	bf00      	nop
 8006560:	2000442c 	.word	0x2000442c

08006564 <__malloc_unlock>:
 8006564:	4801      	ldr	r0, [pc, #4]	@ (800656c <__malloc_unlock+0x8>)
 8006566:	f7ff b8a7 	b.w	80056b8 <__retarget_lock_release_recursive>
 800656a:	bf00      	nop
 800656c:	2000442c 	.word	0x2000442c

08006570 <_Balloc>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	69c6      	ldr	r6, [r0, #28]
 8006574:	4604      	mov	r4, r0
 8006576:	460d      	mov	r5, r1
 8006578:	b976      	cbnz	r6, 8006598 <_Balloc+0x28>
 800657a:	2010      	movs	r0, #16
 800657c:	f7ff ff42 	bl	8006404 <malloc>
 8006580:	4602      	mov	r2, r0
 8006582:	61e0      	str	r0, [r4, #28]
 8006584:	b920      	cbnz	r0, 8006590 <_Balloc+0x20>
 8006586:	4b18      	ldr	r3, [pc, #96]	@ (80065e8 <_Balloc+0x78>)
 8006588:	4818      	ldr	r0, [pc, #96]	@ (80065ec <_Balloc+0x7c>)
 800658a:	216b      	movs	r1, #107	@ 0x6b
 800658c:	f000 fc2e 	bl	8006dec <__assert_func>
 8006590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006594:	6006      	str	r6, [r0, #0]
 8006596:	60c6      	str	r6, [r0, #12]
 8006598:	69e6      	ldr	r6, [r4, #28]
 800659a:	68f3      	ldr	r3, [r6, #12]
 800659c:	b183      	cbz	r3, 80065c0 <_Balloc+0x50>
 800659e:	69e3      	ldr	r3, [r4, #28]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065a6:	b9b8      	cbnz	r0, 80065d8 <_Balloc+0x68>
 80065a8:	2101      	movs	r1, #1
 80065aa:	fa01 f605 	lsl.w	r6, r1, r5
 80065ae:	1d72      	adds	r2, r6, #5
 80065b0:	0092      	lsls	r2, r2, #2
 80065b2:	4620      	mov	r0, r4
 80065b4:	f000 fc38 	bl	8006e28 <_calloc_r>
 80065b8:	b160      	cbz	r0, 80065d4 <_Balloc+0x64>
 80065ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065be:	e00e      	b.n	80065de <_Balloc+0x6e>
 80065c0:	2221      	movs	r2, #33	@ 0x21
 80065c2:	2104      	movs	r1, #4
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 fc2f 	bl	8006e28 <_calloc_r>
 80065ca:	69e3      	ldr	r3, [r4, #28]
 80065cc:	60f0      	str	r0, [r6, #12]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e4      	bne.n	800659e <_Balloc+0x2e>
 80065d4:	2000      	movs	r0, #0
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
 80065d8:	6802      	ldr	r2, [r0, #0]
 80065da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065de:	2300      	movs	r3, #0
 80065e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065e4:	e7f7      	b.n	80065d6 <_Balloc+0x66>
 80065e6:	bf00      	nop
 80065e8:	080074c5 	.word	0x080074c5
 80065ec:	08007545 	.word	0x08007545

080065f0 <_Bfree>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	69c6      	ldr	r6, [r0, #28]
 80065f4:	4605      	mov	r5, r0
 80065f6:	460c      	mov	r4, r1
 80065f8:	b976      	cbnz	r6, 8006618 <_Bfree+0x28>
 80065fa:	2010      	movs	r0, #16
 80065fc:	f7ff ff02 	bl	8006404 <malloc>
 8006600:	4602      	mov	r2, r0
 8006602:	61e8      	str	r0, [r5, #28]
 8006604:	b920      	cbnz	r0, 8006610 <_Bfree+0x20>
 8006606:	4b09      	ldr	r3, [pc, #36]	@ (800662c <_Bfree+0x3c>)
 8006608:	4809      	ldr	r0, [pc, #36]	@ (8006630 <_Bfree+0x40>)
 800660a:	218f      	movs	r1, #143	@ 0x8f
 800660c:	f000 fbee 	bl	8006dec <__assert_func>
 8006610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006614:	6006      	str	r6, [r0, #0]
 8006616:	60c6      	str	r6, [r0, #12]
 8006618:	b13c      	cbz	r4, 800662a <_Bfree+0x3a>
 800661a:	69eb      	ldr	r3, [r5, #28]
 800661c:	6862      	ldr	r2, [r4, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006624:	6021      	str	r1, [r4, #0]
 8006626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	080074c5 	.word	0x080074c5
 8006630:	08007545 	.word	0x08007545

08006634 <__multadd>:
 8006634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006638:	690d      	ldr	r5, [r1, #16]
 800663a:	4607      	mov	r7, r0
 800663c:	460c      	mov	r4, r1
 800663e:	461e      	mov	r6, r3
 8006640:	f101 0c14 	add.w	ip, r1, #20
 8006644:	2000      	movs	r0, #0
 8006646:	f8dc 3000 	ldr.w	r3, [ip]
 800664a:	b299      	uxth	r1, r3
 800664c:	fb02 6101 	mla	r1, r2, r1, r6
 8006650:	0c1e      	lsrs	r6, r3, #16
 8006652:	0c0b      	lsrs	r3, r1, #16
 8006654:	fb02 3306 	mla	r3, r2, r6, r3
 8006658:	b289      	uxth	r1, r1
 800665a:	3001      	adds	r0, #1
 800665c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006660:	4285      	cmp	r5, r0
 8006662:	f84c 1b04 	str.w	r1, [ip], #4
 8006666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800666a:	dcec      	bgt.n	8006646 <__multadd+0x12>
 800666c:	b30e      	cbz	r6, 80066b2 <__multadd+0x7e>
 800666e:	68a3      	ldr	r3, [r4, #8]
 8006670:	42ab      	cmp	r3, r5
 8006672:	dc19      	bgt.n	80066a8 <__multadd+0x74>
 8006674:	6861      	ldr	r1, [r4, #4]
 8006676:	4638      	mov	r0, r7
 8006678:	3101      	adds	r1, #1
 800667a:	f7ff ff79 	bl	8006570 <_Balloc>
 800667e:	4680      	mov	r8, r0
 8006680:	b928      	cbnz	r0, 800668e <__multadd+0x5a>
 8006682:	4602      	mov	r2, r0
 8006684:	4b0c      	ldr	r3, [pc, #48]	@ (80066b8 <__multadd+0x84>)
 8006686:	480d      	ldr	r0, [pc, #52]	@ (80066bc <__multadd+0x88>)
 8006688:	21ba      	movs	r1, #186	@ 0xba
 800668a:	f000 fbaf 	bl	8006dec <__assert_func>
 800668e:	6922      	ldr	r2, [r4, #16]
 8006690:	3202      	adds	r2, #2
 8006692:	f104 010c 	add.w	r1, r4, #12
 8006696:	0092      	lsls	r2, r2, #2
 8006698:	300c      	adds	r0, #12
 800669a:	f7ff f80e 	bl	80056ba <memcpy>
 800669e:	4621      	mov	r1, r4
 80066a0:	4638      	mov	r0, r7
 80066a2:	f7ff ffa5 	bl	80065f0 <_Bfree>
 80066a6:	4644      	mov	r4, r8
 80066a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066ac:	3501      	adds	r5, #1
 80066ae:	615e      	str	r6, [r3, #20]
 80066b0:	6125      	str	r5, [r4, #16]
 80066b2:	4620      	mov	r0, r4
 80066b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b8:	08007534 	.word	0x08007534
 80066bc:	08007545 	.word	0x08007545

080066c0 <__hi0bits>:
 80066c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80066c4:	4603      	mov	r3, r0
 80066c6:	bf36      	itet	cc
 80066c8:	0403      	lslcc	r3, r0, #16
 80066ca:	2000      	movcs	r0, #0
 80066cc:	2010      	movcc	r0, #16
 80066ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066d2:	bf3c      	itt	cc
 80066d4:	021b      	lslcc	r3, r3, #8
 80066d6:	3008      	addcc	r0, #8
 80066d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066dc:	bf3c      	itt	cc
 80066de:	011b      	lslcc	r3, r3, #4
 80066e0:	3004      	addcc	r0, #4
 80066e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e6:	bf3c      	itt	cc
 80066e8:	009b      	lslcc	r3, r3, #2
 80066ea:	3002      	addcc	r0, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	db05      	blt.n	80066fc <__hi0bits+0x3c>
 80066f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80066f4:	f100 0001 	add.w	r0, r0, #1
 80066f8:	bf08      	it	eq
 80066fa:	2020      	moveq	r0, #32
 80066fc:	4770      	bx	lr

080066fe <__lo0bits>:
 80066fe:	6803      	ldr	r3, [r0, #0]
 8006700:	4602      	mov	r2, r0
 8006702:	f013 0007 	ands.w	r0, r3, #7
 8006706:	d00b      	beq.n	8006720 <__lo0bits+0x22>
 8006708:	07d9      	lsls	r1, r3, #31
 800670a:	d421      	bmi.n	8006750 <__lo0bits+0x52>
 800670c:	0798      	lsls	r0, r3, #30
 800670e:	bf49      	itett	mi
 8006710:	085b      	lsrmi	r3, r3, #1
 8006712:	089b      	lsrpl	r3, r3, #2
 8006714:	2001      	movmi	r0, #1
 8006716:	6013      	strmi	r3, [r2, #0]
 8006718:	bf5c      	itt	pl
 800671a:	6013      	strpl	r3, [r2, #0]
 800671c:	2002      	movpl	r0, #2
 800671e:	4770      	bx	lr
 8006720:	b299      	uxth	r1, r3
 8006722:	b909      	cbnz	r1, 8006728 <__lo0bits+0x2a>
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	2010      	movs	r0, #16
 8006728:	b2d9      	uxtb	r1, r3
 800672a:	b909      	cbnz	r1, 8006730 <__lo0bits+0x32>
 800672c:	3008      	adds	r0, #8
 800672e:	0a1b      	lsrs	r3, r3, #8
 8006730:	0719      	lsls	r1, r3, #28
 8006732:	bf04      	itt	eq
 8006734:	091b      	lsreq	r3, r3, #4
 8006736:	3004      	addeq	r0, #4
 8006738:	0799      	lsls	r1, r3, #30
 800673a:	bf04      	itt	eq
 800673c:	089b      	lsreq	r3, r3, #2
 800673e:	3002      	addeq	r0, #2
 8006740:	07d9      	lsls	r1, r3, #31
 8006742:	d403      	bmi.n	800674c <__lo0bits+0x4e>
 8006744:	085b      	lsrs	r3, r3, #1
 8006746:	f100 0001 	add.w	r0, r0, #1
 800674a:	d003      	beq.n	8006754 <__lo0bits+0x56>
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	4770      	bx	lr
 8006750:	2000      	movs	r0, #0
 8006752:	4770      	bx	lr
 8006754:	2020      	movs	r0, #32
 8006756:	4770      	bx	lr

08006758 <__i2b>:
 8006758:	b510      	push	{r4, lr}
 800675a:	460c      	mov	r4, r1
 800675c:	2101      	movs	r1, #1
 800675e:	f7ff ff07 	bl	8006570 <_Balloc>
 8006762:	4602      	mov	r2, r0
 8006764:	b928      	cbnz	r0, 8006772 <__i2b+0x1a>
 8006766:	4b05      	ldr	r3, [pc, #20]	@ (800677c <__i2b+0x24>)
 8006768:	4805      	ldr	r0, [pc, #20]	@ (8006780 <__i2b+0x28>)
 800676a:	f240 1145 	movw	r1, #325	@ 0x145
 800676e:	f000 fb3d 	bl	8006dec <__assert_func>
 8006772:	2301      	movs	r3, #1
 8006774:	6144      	str	r4, [r0, #20]
 8006776:	6103      	str	r3, [r0, #16]
 8006778:	bd10      	pop	{r4, pc}
 800677a:	bf00      	nop
 800677c:	08007534 	.word	0x08007534
 8006780:	08007545 	.word	0x08007545

08006784 <__multiply>:
 8006784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006788:	4614      	mov	r4, r2
 800678a:	690a      	ldr	r2, [r1, #16]
 800678c:	6923      	ldr	r3, [r4, #16]
 800678e:	429a      	cmp	r2, r3
 8006790:	bfa8      	it	ge
 8006792:	4623      	movge	r3, r4
 8006794:	460f      	mov	r7, r1
 8006796:	bfa4      	itt	ge
 8006798:	460c      	movge	r4, r1
 800679a:	461f      	movge	r7, r3
 800679c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80067a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80067a4:	68a3      	ldr	r3, [r4, #8]
 80067a6:	6861      	ldr	r1, [r4, #4]
 80067a8:	eb0a 0609 	add.w	r6, sl, r9
 80067ac:	42b3      	cmp	r3, r6
 80067ae:	b085      	sub	sp, #20
 80067b0:	bfb8      	it	lt
 80067b2:	3101      	addlt	r1, #1
 80067b4:	f7ff fedc 	bl	8006570 <_Balloc>
 80067b8:	b930      	cbnz	r0, 80067c8 <__multiply+0x44>
 80067ba:	4602      	mov	r2, r0
 80067bc:	4b44      	ldr	r3, [pc, #272]	@ (80068d0 <__multiply+0x14c>)
 80067be:	4845      	ldr	r0, [pc, #276]	@ (80068d4 <__multiply+0x150>)
 80067c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80067c4:	f000 fb12 	bl	8006dec <__assert_func>
 80067c8:	f100 0514 	add.w	r5, r0, #20
 80067cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067d0:	462b      	mov	r3, r5
 80067d2:	2200      	movs	r2, #0
 80067d4:	4543      	cmp	r3, r8
 80067d6:	d321      	bcc.n	800681c <__multiply+0x98>
 80067d8:	f107 0114 	add.w	r1, r7, #20
 80067dc:	f104 0214 	add.w	r2, r4, #20
 80067e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80067e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80067e8:	9302      	str	r3, [sp, #8]
 80067ea:	1b13      	subs	r3, r2, r4
 80067ec:	3b15      	subs	r3, #21
 80067ee:	f023 0303 	bic.w	r3, r3, #3
 80067f2:	3304      	adds	r3, #4
 80067f4:	f104 0715 	add.w	r7, r4, #21
 80067f8:	42ba      	cmp	r2, r7
 80067fa:	bf38      	it	cc
 80067fc:	2304      	movcc	r3, #4
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	9b02      	ldr	r3, [sp, #8]
 8006802:	9103      	str	r1, [sp, #12]
 8006804:	428b      	cmp	r3, r1
 8006806:	d80c      	bhi.n	8006822 <__multiply+0x9e>
 8006808:	2e00      	cmp	r6, #0
 800680a:	dd03      	ble.n	8006814 <__multiply+0x90>
 800680c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006810:	2b00      	cmp	r3, #0
 8006812:	d05b      	beq.n	80068cc <__multiply+0x148>
 8006814:	6106      	str	r6, [r0, #16]
 8006816:	b005      	add	sp, #20
 8006818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681c:	f843 2b04 	str.w	r2, [r3], #4
 8006820:	e7d8      	b.n	80067d4 <__multiply+0x50>
 8006822:	f8b1 a000 	ldrh.w	sl, [r1]
 8006826:	f1ba 0f00 	cmp.w	sl, #0
 800682a:	d024      	beq.n	8006876 <__multiply+0xf2>
 800682c:	f104 0e14 	add.w	lr, r4, #20
 8006830:	46a9      	mov	r9, r5
 8006832:	f04f 0c00 	mov.w	ip, #0
 8006836:	f85e 7b04 	ldr.w	r7, [lr], #4
 800683a:	f8d9 3000 	ldr.w	r3, [r9]
 800683e:	fa1f fb87 	uxth.w	fp, r7
 8006842:	b29b      	uxth	r3, r3
 8006844:	fb0a 330b 	mla	r3, sl, fp, r3
 8006848:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800684c:	f8d9 7000 	ldr.w	r7, [r9]
 8006850:	4463      	add	r3, ip
 8006852:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006856:	fb0a c70b 	mla	r7, sl, fp, ip
 800685a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800685e:	b29b      	uxth	r3, r3
 8006860:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006864:	4572      	cmp	r2, lr
 8006866:	f849 3b04 	str.w	r3, [r9], #4
 800686a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800686e:	d8e2      	bhi.n	8006836 <__multiply+0xb2>
 8006870:	9b01      	ldr	r3, [sp, #4]
 8006872:	f845 c003 	str.w	ip, [r5, r3]
 8006876:	9b03      	ldr	r3, [sp, #12]
 8006878:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800687c:	3104      	adds	r1, #4
 800687e:	f1b9 0f00 	cmp.w	r9, #0
 8006882:	d021      	beq.n	80068c8 <__multiply+0x144>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	f104 0c14 	add.w	ip, r4, #20
 800688a:	46ae      	mov	lr, r5
 800688c:	f04f 0a00 	mov.w	sl, #0
 8006890:	f8bc b000 	ldrh.w	fp, [ip]
 8006894:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006898:	fb09 770b 	mla	r7, r9, fp, r7
 800689c:	4457      	add	r7, sl
 800689e:	b29b      	uxth	r3, r3
 80068a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80068a4:	f84e 3b04 	str.w	r3, [lr], #4
 80068a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80068ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068b0:	f8be 3000 	ldrh.w	r3, [lr]
 80068b4:	fb09 330a 	mla	r3, r9, sl, r3
 80068b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80068bc:	4562      	cmp	r2, ip
 80068be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068c2:	d8e5      	bhi.n	8006890 <__multiply+0x10c>
 80068c4:	9f01      	ldr	r7, [sp, #4]
 80068c6:	51eb      	str	r3, [r5, r7]
 80068c8:	3504      	adds	r5, #4
 80068ca:	e799      	b.n	8006800 <__multiply+0x7c>
 80068cc:	3e01      	subs	r6, #1
 80068ce:	e79b      	b.n	8006808 <__multiply+0x84>
 80068d0:	08007534 	.word	0x08007534
 80068d4:	08007545 	.word	0x08007545

080068d8 <__pow5mult>:
 80068d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068dc:	4615      	mov	r5, r2
 80068de:	f012 0203 	ands.w	r2, r2, #3
 80068e2:	4607      	mov	r7, r0
 80068e4:	460e      	mov	r6, r1
 80068e6:	d007      	beq.n	80068f8 <__pow5mult+0x20>
 80068e8:	4c25      	ldr	r4, [pc, #148]	@ (8006980 <__pow5mult+0xa8>)
 80068ea:	3a01      	subs	r2, #1
 80068ec:	2300      	movs	r3, #0
 80068ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068f2:	f7ff fe9f 	bl	8006634 <__multadd>
 80068f6:	4606      	mov	r6, r0
 80068f8:	10ad      	asrs	r5, r5, #2
 80068fa:	d03d      	beq.n	8006978 <__pow5mult+0xa0>
 80068fc:	69fc      	ldr	r4, [r7, #28]
 80068fe:	b97c      	cbnz	r4, 8006920 <__pow5mult+0x48>
 8006900:	2010      	movs	r0, #16
 8006902:	f7ff fd7f 	bl	8006404 <malloc>
 8006906:	4602      	mov	r2, r0
 8006908:	61f8      	str	r0, [r7, #28]
 800690a:	b928      	cbnz	r0, 8006918 <__pow5mult+0x40>
 800690c:	4b1d      	ldr	r3, [pc, #116]	@ (8006984 <__pow5mult+0xac>)
 800690e:	481e      	ldr	r0, [pc, #120]	@ (8006988 <__pow5mult+0xb0>)
 8006910:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006914:	f000 fa6a 	bl	8006dec <__assert_func>
 8006918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800691c:	6004      	str	r4, [r0, #0]
 800691e:	60c4      	str	r4, [r0, #12]
 8006920:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006928:	b94c      	cbnz	r4, 800693e <__pow5mult+0x66>
 800692a:	f240 2171 	movw	r1, #625	@ 0x271
 800692e:	4638      	mov	r0, r7
 8006930:	f7ff ff12 	bl	8006758 <__i2b>
 8006934:	2300      	movs	r3, #0
 8006936:	f8c8 0008 	str.w	r0, [r8, #8]
 800693a:	4604      	mov	r4, r0
 800693c:	6003      	str	r3, [r0, #0]
 800693e:	f04f 0900 	mov.w	r9, #0
 8006942:	07eb      	lsls	r3, r5, #31
 8006944:	d50a      	bpl.n	800695c <__pow5mult+0x84>
 8006946:	4631      	mov	r1, r6
 8006948:	4622      	mov	r2, r4
 800694a:	4638      	mov	r0, r7
 800694c:	f7ff ff1a 	bl	8006784 <__multiply>
 8006950:	4631      	mov	r1, r6
 8006952:	4680      	mov	r8, r0
 8006954:	4638      	mov	r0, r7
 8006956:	f7ff fe4b 	bl	80065f0 <_Bfree>
 800695a:	4646      	mov	r6, r8
 800695c:	106d      	asrs	r5, r5, #1
 800695e:	d00b      	beq.n	8006978 <__pow5mult+0xa0>
 8006960:	6820      	ldr	r0, [r4, #0]
 8006962:	b938      	cbnz	r0, 8006974 <__pow5mult+0x9c>
 8006964:	4622      	mov	r2, r4
 8006966:	4621      	mov	r1, r4
 8006968:	4638      	mov	r0, r7
 800696a:	f7ff ff0b 	bl	8006784 <__multiply>
 800696e:	6020      	str	r0, [r4, #0]
 8006970:	f8c0 9000 	str.w	r9, [r0]
 8006974:	4604      	mov	r4, r0
 8006976:	e7e4      	b.n	8006942 <__pow5mult+0x6a>
 8006978:	4630      	mov	r0, r6
 800697a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800697e:	bf00      	nop
 8006980:	080075a0 	.word	0x080075a0
 8006984:	080074c5 	.word	0x080074c5
 8006988:	08007545 	.word	0x08007545

0800698c <__lshift>:
 800698c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006990:	460c      	mov	r4, r1
 8006992:	6849      	ldr	r1, [r1, #4]
 8006994:	6923      	ldr	r3, [r4, #16]
 8006996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800699a:	68a3      	ldr	r3, [r4, #8]
 800699c:	4607      	mov	r7, r0
 800699e:	4691      	mov	r9, r2
 80069a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069a4:	f108 0601 	add.w	r6, r8, #1
 80069a8:	42b3      	cmp	r3, r6
 80069aa:	db0b      	blt.n	80069c4 <__lshift+0x38>
 80069ac:	4638      	mov	r0, r7
 80069ae:	f7ff fddf 	bl	8006570 <_Balloc>
 80069b2:	4605      	mov	r5, r0
 80069b4:	b948      	cbnz	r0, 80069ca <__lshift+0x3e>
 80069b6:	4602      	mov	r2, r0
 80069b8:	4b28      	ldr	r3, [pc, #160]	@ (8006a5c <__lshift+0xd0>)
 80069ba:	4829      	ldr	r0, [pc, #164]	@ (8006a60 <__lshift+0xd4>)
 80069bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80069c0:	f000 fa14 	bl	8006dec <__assert_func>
 80069c4:	3101      	adds	r1, #1
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	e7ee      	b.n	80069a8 <__lshift+0x1c>
 80069ca:	2300      	movs	r3, #0
 80069cc:	f100 0114 	add.w	r1, r0, #20
 80069d0:	f100 0210 	add.w	r2, r0, #16
 80069d4:	4618      	mov	r0, r3
 80069d6:	4553      	cmp	r3, sl
 80069d8:	db33      	blt.n	8006a42 <__lshift+0xb6>
 80069da:	6920      	ldr	r0, [r4, #16]
 80069dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069e0:	f104 0314 	add.w	r3, r4, #20
 80069e4:	f019 091f 	ands.w	r9, r9, #31
 80069e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069f0:	d02b      	beq.n	8006a4a <__lshift+0xbe>
 80069f2:	f1c9 0e20 	rsb	lr, r9, #32
 80069f6:	468a      	mov	sl, r1
 80069f8:	2200      	movs	r2, #0
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	fa00 f009 	lsl.w	r0, r0, r9
 8006a00:	4310      	orrs	r0, r2
 8006a02:	f84a 0b04 	str.w	r0, [sl], #4
 8006a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a0a:	459c      	cmp	ip, r3
 8006a0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a10:	d8f3      	bhi.n	80069fa <__lshift+0x6e>
 8006a12:	ebac 0304 	sub.w	r3, ip, r4
 8006a16:	3b15      	subs	r3, #21
 8006a18:	f023 0303 	bic.w	r3, r3, #3
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	f104 0015 	add.w	r0, r4, #21
 8006a22:	4584      	cmp	ip, r0
 8006a24:	bf38      	it	cc
 8006a26:	2304      	movcc	r3, #4
 8006a28:	50ca      	str	r2, [r1, r3]
 8006a2a:	b10a      	cbz	r2, 8006a30 <__lshift+0xa4>
 8006a2c:	f108 0602 	add.w	r6, r8, #2
 8006a30:	3e01      	subs	r6, #1
 8006a32:	4638      	mov	r0, r7
 8006a34:	612e      	str	r6, [r5, #16]
 8006a36:	4621      	mov	r1, r4
 8006a38:	f7ff fdda 	bl	80065f0 <_Bfree>
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a42:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a46:	3301      	adds	r3, #1
 8006a48:	e7c5      	b.n	80069d6 <__lshift+0x4a>
 8006a4a:	3904      	subs	r1, #4
 8006a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a50:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a54:	459c      	cmp	ip, r3
 8006a56:	d8f9      	bhi.n	8006a4c <__lshift+0xc0>
 8006a58:	e7ea      	b.n	8006a30 <__lshift+0xa4>
 8006a5a:	bf00      	nop
 8006a5c:	08007534 	.word	0x08007534
 8006a60:	08007545 	.word	0x08007545

08006a64 <__mcmp>:
 8006a64:	690a      	ldr	r2, [r1, #16]
 8006a66:	4603      	mov	r3, r0
 8006a68:	6900      	ldr	r0, [r0, #16]
 8006a6a:	1a80      	subs	r0, r0, r2
 8006a6c:	b530      	push	{r4, r5, lr}
 8006a6e:	d10e      	bne.n	8006a8e <__mcmp+0x2a>
 8006a70:	3314      	adds	r3, #20
 8006a72:	3114      	adds	r1, #20
 8006a74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a84:	4295      	cmp	r5, r2
 8006a86:	d003      	beq.n	8006a90 <__mcmp+0x2c>
 8006a88:	d205      	bcs.n	8006a96 <__mcmp+0x32>
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8e:	bd30      	pop	{r4, r5, pc}
 8006a90:	42a3      	cmp	r3, r4
 8006a92:	d3f3      	bcc.n	8006a7c <__mcmp+0x18>
 8006a94:	e7fb      	b.n	8006a8e <__mcmp+0x2a>
 8006a96:	2001      	movs	r0, #1
 8006a98:	e7f9      	b.n	8006a8e <__mcmp+0x2a>
	...

08006a9c <__mdiff>:
 8006a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	4689      	mov	r9, r1
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4648      	mov	r0, r9
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	f7ff ffdb 	bl	8006a64 <__mcmp>
 8006aae:	1e05      	subs	r5, r0, #0
 8006ab0:	d112      	bne.n	8006ad8 <__mdiff+0x3c>
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f7ff fd5b 	bl	8006570 <_Balloc>
 8006aba:	4602      	mov	r2, r0
 8006abc:	b928      	cbnz	r0, 8006aca <__mdiff+0x2e>
 8006abe:	4b3f      	ldr	r3, [pc, #252]	@ (8006bbc <__mdiff+0x120>)
 8006ac0:	f240 2137 	movw	r1, #567	@ 0x237
 8006ac4:	483e      	ldr	r0, [pc, #248]	@ (8006bc0 <__mdiff+0x124>)
 8006ac6:	f000 f991 	bl	8006dec <__assert_func>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	b003      	add	sp, #12
 8006ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad8:	bfbc      	itt	lt
 8006ada:	464b      	movlt	r3, r9
 8006adc:	46a1      	movlt	r9, r4
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ae4:	bfba      	itte	lt
 8006ae6:	461c      	movlt	r4, r3
 8006ae8:	2501      	movlt	r5, #1
 8006aea:	2500      	movge	r5, #0
 8006aec:	f7ff fd40 	bl	8006570 <_Balloc>
 8006af0:	4602      	mov	r2, r0
 8006af2:	b918      	cbnz	r0, 8006afc <__mdiff+0x60>
 8006af4:	4b31      	ldr	r3, [pc, #196]	@ (8006bbc <__mdiff+0x120>)
 8006af6:	f240 2145 	movw	r1, #581	@ 0x245
 8006afa:	e7e3      	b.n	8006ac4 <__mdiff+0x28>
 8006afc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006b00:	6926      	ldr	r6, [r4, #16]
 8006b02:	60c5      	str	r5, [r0, #12]
 8006b04:	f109 0310 	add.w	r3, r9, #16
 8006b08:	f109 0514 	add.w	r5, r9, #20
 8006b0c:	f104 0e14 	add.w	lr, r4, #20
 8006b10:	f100 0b14 	add.w	fp, r0, #20
 8006b14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	46d9      	mov	r9, fp
 8006b20:	f04f 0c00 	mov.w	ip, #0
 8006b24:	9b01      	ldr	r3, [sp, #4]
 8006b26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006b2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	fa1f f38a 	uxth.w	r3, sl
 8006b34:	4619      	mov	r1, r3
 8006b36:	b283      	uxth	r3, r0
 8006b38:	1acb      	subs	r3, r1, r3
 8006b3a:	0c00      	lsrs	r0, r0, #16
 8006b3c:	4463      	add	r3, ip
 8006b3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b4c:	4576      	cmp	r6, lr
 8006b4e:	f849 3b04 	str.w	r3, [r9], #4
 8006b52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b56:	d8e5      	bhi.n	8006b24 <__mdiff+0x88>
 8006b58:	1b33      	subs	r3, r6, r4
 8006b5a:	3b15      	subs	r3, #21
 8006b5c:	f023 0303 	bic.w	r3, r3, #3
 8006b60:	3415      	adds	r4, #21
 8006b62:	3304      	adds	r3, #4
 8006b64:	42a6      	cmp	r6, r4
 8006b66:	bf38      	it	cc
 8006b68:	2304      	movcc	r3, #4
 8006b6a:	441d      	add	r5, r3
 8006b6c:	445b      	add	r3, fp
 8006b6e:	461e      	mov	r6, r3
 8006b70:	462c      	mov	r4, r5
 8006b72:	4544      	cmp	r4, r8
 8006b74:	d30e      	bcc.n	8006b94 <__mdiff+0xf8>
 8006b76:	f108 0103 	add.w	r1, r8, #3
 8006b7a:	1b49      	subs	r1, r1, r5
 8006b7c:	f021 0103 	bic.w	r1, r1, #3
 8006b80:	3d03      	subs	r5, #3
 8006b82:	45a8      	cmp	r8, r5
 8006b84:	bf38      	it	cc
 8006b86:	2100      	movcc	r1, #0
 8006b88:	440b      	add	r3, r1
 8006b8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b8e:	b191      	cbz	r1, 8006bb6 <__mdiff+0x11a>
 8006b90:	6117      	str	r7, [r2, #16]
 8006b92:	e79d      	b.n	8006ad0 <__mdiff+0x34>
 8006b94:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b98:	46e6      	mov	lr, ip
 8006b9a:	0c08      	lsrs	r0, r1, #16
 8006b9c:	fa1c fc81 	uxtah	ip, ip, r1
 8006ba0:	4471      	add	r1, lr
 8006ba2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ba6:	b289      	uxth	r1, r1
 8006ba8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006bac:	f846 1b04 	str.w	r1, [r6], #4
 8006bb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006bb4:	e7dd      	b.n	8006b72 <__mdiff+0xd6>
 8006bb6:	3f01      	subs	r7, #1
 8006bb8:	e7e7      	b.n	8006b8a <__mdiff+0xee>
 8006bba:	bf00      	nop
 8006bbc:	08007534 	.word	0x08007534
 8006bc0:	08007545 	.word	0x08007545

08006bc4 <__d2b>:
 8006bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bc8:	460f      	mov	r7, r1
 8006bca:	2101      	movs	r1, #1
 8006bcc:	ec59 8b10 	vmov	r8, r9, d0
 8006bd0:	4616      	mov	r6, r2
 8006bd2:	f7ff fccd 	bl	8006570 <_Balloc>
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	b930      	cbnz	r0, 8006be8 <__d2b+0x24>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	4b23      	ldr	r3, [pc, #140]	@ (8006c6c <__d2b+0xa8>)
 8006bde:	4824      	ldr	r0, [pc, #144]	@ (8006c70 <__d2b+0xac>)
 8006be0:	f240 310f 	movw	r1, #783	@ 0x30f
 8006be4:	f000 f902 	bl	8006dec <__assert_func>
 8006be8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bf0:	b10d      	cbz	r5, 8006bf6 <__d2b+0x32>
 8006bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	f1b8 0300 	subs.w	r3, r8, #0
 8006bfc:	d023      	beq.n	8006c46 <__d2b+0x82>
 8006bfe:	4668      	mov	r0, sp
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	f7ff fd7c 	bl	80066fe <__lo0bits>
 8006c06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c0a:	b1d0      	cbz	r0, 8006c42 <__d2b+0x7e>
 8006c0c:	f1c0 0320 	rsb	r3, r0, #32
 8006c10:	fa02 f303 	lsl.w	r3, r2, r3
 8006c14:	430b      	orrs	r3, r1
 8006c16:	40c2      	lsrs	r2, r0
 8006c18:	6163      	str	r3, [r4, #20]
 8006c1a:	9201      	str	r2, [sp, #4]
 8006c1c:	9b01      	ldr	r3, [sp, #4]
 8006c1e:	61a3      	str	r3, [r4, #24]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bf0c      	ite	eq
 8006c24:	2201      	moveq	r2, #1
 8006c26:	2202      	movne	r2, #2
 8006c28:	6122      	str	r2, [r4, #16]
 8006c2a:	b1a5      	cbz	r5, 8006c56 <__d2b+0x92>
 8006c2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c30:	4405      	add	r5, r0
 8006c32:	603d      	str	r5, [r7, #0]
 8006c34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c38:	6030      	str	r0, [r6, #0]
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	b003      	add	sp, #12
 8006c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c42:	6161      	str	r1, [r4, #20]
 8006c44:	e7ea      	b.n	8006c1c <__d2b+0x58>
 8006c46:	a801      	add	r0, sp, #4
 8006c48:	f7ff fd59 	bl	80066fe <__lo0bits>
 8006c4c:	9b01      	ldr	r3, [sp, #4]
 8006c4e:	6163      	str	r3, [r4, #20]
 8006c50:	3020      	adds	r0, #32
 8006c52:	2201      	movs	r2, #1
 8006c54:	e7e8      	b.n	8006c28 <__d2b+0x64>
 8006c56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c5e:	6038      	str	r0, [r7, #0]
 8006c60:	6918      	ldr	r0, [r3, #16]
 8006c62:	f7ff fd2d 	bl	80066c0 <__hi0bits>
 8006c66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c6a:	e7e5      	b.n	8006c38 <__d2b+0x74>
 8006c6c:	08007534 	.word	0x08007534
 8006c70:	08007545 	.word	0x08007545

08006c74 <__sflush_r>:
 8006c74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	0716      	lsls	r6, r2, #28
 8006c7e:	4605      	mov	r5, r0
 8006c80:	460c      	mov	r4, r1
 8006c82:	d454      	bmi.n	8006d2e <__sflush_r+0xba>
 8006c84:	684b      	ldr	r3, [r1, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	dc02      	bgt.n	8006c90 <__sflush_r+0x1c>
 8006c8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	dd48      	ble.n	8006d22 <__sflush_r+0xae>
 8006c90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c92:	2e00      	cmp	r6, #0
 8006c94:	d045      	beq.n	8006d22 <__sflush_r+0xae>
 8006c96:	2300      	movs	r3, #0
 8006c98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c9c:	682f      	ldr	r7, [r5, #0]
 8006c9e:	6a21      	ldr	r1, [r4, #32]
 8006ca0:	602b      	str	r3, [r5, #0]
 8006ca2:	d030      	beq.n	8006d06 <__sflush_r+0x92>
 8006ca4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	0759      	lsls	r1, r3, #29
 8006caa:	d505      	bpl.n	8006cb8 <__sflush_r+0x44>
 8006cac:	6863      	ldr	r3, [r4, #4]
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006cb2:	b10b      	cbz	r3, 8006cb8 <__sflush_r+0x44>
 8006cb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cb6:	1ad2      	subs	r2, r2, r3
 8006cb8:	2300      	movs	r3, #0
 8006cba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cbc:	6a21      	ldr	r1, [r4, #32]
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	47b0      	blx	r6
 8006cc2:	1c43      	adds	r3, r0, #1
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	d106      	bne.n	8006cd6 <__sflush_r+0x62>
 8006cc8:	6829      	ldr	r1, [r5, #0]
 8006cca:	291d      	cmp	r1, #29
 8006ccc:	d82b      	bhi.n	8006d26 <__sflush_r+0xb2>
 8006cce:	4a2a      	ldr	r2, [pc, #168]	@ (8006d78 <__sflush_r+0x104>)
 8006cd0:	410a      	asrs	r2, r1
 8006cd2:	07d6      	lsls	r6, r2, #31
 8006cd4:	d427      	bmi.n	8006d26 <__sflush_r+0xb2>
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	6062      	str	r2, [r4, #4]
 8006cda:	04d9      	lsls	r1, r3, #19
 8006cdc:	6922      	ldr	r2, [r4, #16]
 8006cde:	6022      	str	r2, [r4, #0]
 8006ce0:	d504      	bpl.n	8006cec <__sflush_r+0x78>
 8006ce2:	1c42      	adds	r2, r0, #1
 8006ce4:	d101      	bne.n	8006cea <__sflush_r+0x76>
 8006ce6:	682b      	ldr	r3, [r5, #0]
 8006ce8:	b903      	cbnz	r3, 8006cec <__sflush_r+0x78>
 8006cea:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cee:	602f      	str	r7, [r5, #0]
 8006cf0:	b1b9      	cbz	r1, 8006d22 <__sflush_r+0xae>
 8006cf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cf6:	4299      	cmp	r1, r3
 8006cf8:	d002      	beq.n	8006d00 <__sflush_r+0x8c>
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	f7ff fb38 	bl	8006370 <_free_r>
 8006d00:	2300      	movs	r3, #0
 8006d02:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d04:	e00d      	b.n	8006d22 <__sflush_r+0xae>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4628      	mov	r0, r5
 8006d0a:	47b0      	blx	r6
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	1c50      	adds	r0, r2, #1
 8006d10:	d1c9      	bne.n	8006ca6 <__sflush_r+0x32>
 8006d12:	682b      	ldr	r3, [r5, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0c6      	beq.n	8006ca6 <__sflush_r+0x32>
 8006d18:	2b1d      	cmp	r3, #29
 8006d1a:	d001      	beq.n	8006d20 <__sflush_r+0xac>
 8006d1c:	2b16      	cmp	r3, #22
 8006d1e:	d11e      	bne.n	8006d5e <__sflush_r+0xea>
 8006d20:	602f      	str	r7, [r5, #0]
 8006d22:	2000      	movs	r0, #0
 8006d24:	e022      	b.n	8006d6c <__sflush_r+0xf8>
 8006d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d2a:	b21b      	sxth	r3, r3
 8006d2c:	e01b      	b.n	8006d66 <__sflush_r+0xf2>
 8006d2e:	690f      	ldr	r7, [r1, #16]
 8006d30:	2f00      	cmp	r7, #0
 8006d32:	d0f6      	beq.n	8006d22 <__sflush_r+0xae>
 8006d34:	0793      	lsls	r3, r2, #30
 8006d36:	680e      	ldr	r6, [r1, #0]
 8006d38:	bf08      	it	eq
 8006d3a:	694b      	ldreq	r3, [r1, #20]
 8006d3c:	600f      	str	r7, [r1, #0]
 8006d3e:	bf18      	it	ne
 8006d40:	2300      	movne	r3, #0
 8006d42:	eba6 0807 	sub.w	r8, r6, r7
 8006d46:	608b      	str	r3, [r1, #8]
 8006d48:	f1b8 0f00 	cmp.w	r8, #0
 8006d4c:	dde9      	ble.n	8006d22 <__sflush_r+0xae>
 8006d4e:	6a21      	ldr	r1, [r4, #32]
 8006d50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d52:	4643      	mov	r3, r8
 8006d54:	463a      	mov	r2, r7
 8006d56:	4628      	mov	r0, r5
 8006d58:	47b0      	blx	r6
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	dc08      	bgt.n	8006d70 <__sflush_r+0xfc>
 8006d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d70:	4407      	add	r7, r0
 8006d72:	eba8 0800 	sub.w	r8, r8, r0
 8006d76:	e7e7      	b.n	8006d48 <__sflush_r+0xd4>
 8006d78:	dfbffffe 	.word	0xdfbffffe

08006d7c <_fflush_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	690b      	ldr	r3, [r1, #16]
 8006d80:	4605      	mov	r5, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	b913      	cbnz	r3, 8006d8c <_fflush_r+0x10>
 8006d86:	2500      	movs	r5, #0
 8006d88:	4628      	mov	r0, r5
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	b118      	cbz	r0, 8006d96 <_fflush_r+0x1a>
 8006d8e:	6a03      	ldr	r3, [r0, #32]
 8006d90:	b90b      	cbnz	r3, 8006d96 <_fflush_r+0x1a>
 8006d92:	f7fe fb43 	bl	800541c <__sinit>
 8006d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0f3      	beq.n	8006d86 <_fflush_r+0xa>
 8006d9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006da0:	07d0      	lsls	r0, r2, #31
 8006da2:	d404      	bmi.n	8006dae <_fflush_r+0x32>
 8006da4:	0599      	lsls	r1, r3, #22
 8006da6:	d402      	bmi.n	8006dae <_fflush_r+0x32>
 8006da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006daa:	f7fe fc84 	bl	80056b6 <__retarget_lock_acquire_recursive>
 8006dae:	4628      	mov	r0, r5
 8006db0:	4621      	mov	r1, r4
 8006db2:	f7ff ff5f 	bl	8006c74 <__sflush_r>
 8006db6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006db8:	07da      	lsls	r2, r3, #31
 8006dba:	4605      	mov	r5, r0
 8006dbc:	d4e4      	bmi.n	8006d88 <_fflush_r+0xc>
 8006dbe:	89a3      	ldrh	r3, [r4, #12]
 8006dc0:	059b      	lsls	r3, r3, #22
 8006dc2:	d4e1      	bmi.n	8006d88 <_fflush_r+0xc>
 8006dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dc6:	f7fe fc77 	bl	80056b8 <__retarget_lock_release_recursive>
 8006dca:	e7dd      	b.n	8006d88 <_fflush_r+0xc>

08006dcc <_sbrk_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4d06      	ldr	r5, [pc, #24]	@ (8006de8 <_sbrk_r+0x1c>)
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	602b      	str	r3, [r5, #0]
 8006dd8:	f7fa fc84 	bl	80016e4 <_sbrk>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_sbrk_r+0x1a>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_sbrk_r+0x1a>
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	20004428 	.word	0x20004428

08006dec <__assert_func>:
 8006dec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dee:	4614      	mov	r4, r2
 8006df0:	461a      	mov	r2, r3
 8006df2:	4b09      	ldr	r3, [pc, #36]	@ (8006e18 <__assert_func+0x2c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4605      	mov	r5, r0
 8006df8:	68d8      	ldr	r0, [r3, #12]
 8006dfa:	b954      	cbnz	r4, 8006e12 <__assert_func+0x26>
 8006dfc:	4b07      	ldr	r3, [pc, #28]	@ (8006e1c <__assert_func+0x30>)
 8006dfe:	461c      	mov	r4, r3
 8006e00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e04:	9100      	str	r1, [sp, #0]
 8006e06:	462b      	mov	r3, r5
 8006e08:	4905      	ldr	r1, [pc, #20]	@ (8006e20 <__assert_func+0x34>)
 8006e0a:	f000 f841 	bl	8006e90 <fiprintf>
 8006e0e:	f000 f851 	bl	8006eb4 <abort>
 8006e12:	4b04      	ldr	r3, [pc, #16]	@ (8006e24 <__assert_func+0x38>)
 8006e14:	e7f4      	b.n	8006e00 <__assert_func+0x14>
 8006e16:	bf00      	nop
 8006e18:	2000001c 	.word	0x2000001c
 8006e1c:	080076e5 	.word	0x080076e5
 8006e20:	080076b7 	.word	0x080076b7
 8006e24:	080076aa 	.word	0x080076aa

08006e28 <_calloc_r>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	fba1 5402 	umull	r5, r4, r1, r2
 8006e2e:	b93c      	cbnz	r4, 8006e40 <_calloc_r+0x18>
 8006e30:	4629      	mov	r1, r5
 8006e32:	f7ff fb11 	bl	8006458 <_malloc_r>
 8006e36:	4606      	mov	r6, r0
 8006e38:	b928      	cbnz	r0, 8006e46 <_calloc_r+0x1e>
 8006e3a:	2600      	movs	r6, #0
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	220c      	movs	r2, #12
 8006e42:	6002      	str	r2, [r0, #0]
 8006e44:	e7f9      	b.n	8006e3a <_calloc_r+0x12>
 8006e46:	462a      	mov	r2, r5
 8006e48:	4621      	mov	r1, r4
 8006e4a:	f7fe fb60 	bl	800550e <memset>
 8006e4e:	e7f5      	b.n	8006e3c <_calloc_r+0x14>

08006e50 <__ascii_mbtowc>:
 8006e50:	b082      	sub	sp, #8
 8006e52:	b901      	cbnz	r1, 8006e56 <__ascii_mbtowc+0x6>
 8006e54:	a901      	add	r1, sp, #4
 8006e56:	b142      	cbz	r2, 8006e6a <__ascii_mbtowc+0x1a>
 8006e58:	b14b      	cbz	r3, 8006e6e <__ascii_mbtowc+0x1e>
 8006e5a:	7813      	ldrb	r3, [r2, #0]
 8006e5c:	600b      	str	r3, [r1, #0]
 8006e5e:	7812      	ldrb	r2, [r2, #0]
 8006e60:	1e10      	subs	r0, r2, #0
 8006e62:	bf18      	it	ne
 8006e64:	2001      	movne	r0, #1
 8006e66:	b002      	add	sp, #8
 8006e68:	4770      	bx	lr
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	e7fb      	b.n	8006e66 <__ascii_mbtowc+0x16>
 8006e6e:	f06f 0001 	mvn.w	r0, #1
 8006e72:	e7f8      	b.n	8006e66 <__ascii_mbtowc+0x16>

08006e74 <__ascii_wctomb>:
 8006e74:	4603      	mov	r3, r0
 8006e76:	4608      	mov	r0, r1
 8006e78:	b141      	cbz	r1, 8006e8c <__ascii_wctomb+0x18>
 8006e7a:	2aff      	cmp	r2, #255	@ 0xff
 8006e7c:	d904      	bls.n	8006e88 <__ascii_wctomb+0x14>
 8006e7e:	228a      	movs	r2, #138	@ 0x8a
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	f04f 30ff 	mov.w	r0, #4294967295
 8006e86:	4770      	bx	lr
 8006e88:	700a      	strb	r2, [r1, #0]
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	4770      	bx	lr
	...

08006e90 <fiprintf>:
 8006e90:	b40e      	push	{r1, r2, r3}
 8006e92:	b503      	push	{r0, r1, lr}
 8006e94:	4601      	mov	r1, r0
 8006e96:	ab03      	add	r3, sp, #12
 8006e98:	4805      	ldr	r0, [pc, #20]	@ (8006eb0 <fiprintf+0x20>)
 8006e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e9e:	6800      	ldr	r0, [r0, #0]
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	f000 f837 	bl	8006f14 <_vfiprintf_r>
 8006ea6:	b002      	add	sp, #8
 8006ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eac:	b003      	add	sp, #12
 8006eae:	4770      	bx	lr
 8006eb0:	2000001c 	.word	0x2000001c

08006eb4 <abort>:
 8006eb4:	b508      	push	{r3, lr}
 8006eb6:	2006      	movs	r0, #6
 8006eb8:	f000 fa00 	bl	80072bc <raise>
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	f7fa fb99 	bl	80015f4 <_exit>

08006ec2 <__sfputc_r>:
 8006ec2:	6893      	ldr	r3, [r2, #8]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	b410      	push	{r4}
 8006eca:	6093      	str	r3, [r2, #8]
 8006ecc:	da08      	bge.n	8006ee0 <__sfputc_r+0x1e>
 8006ece:	6994      	ldr	r4, [r2, #24]
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	db01      	blt.n	8006ed8 <__sfputc_r+0x16>
 8006ed4:	290a      	cmp	r1, #10
 8006ed6:	d103      	bne.n	8006ee0 <__sfputc_r+0x1e>
 8006ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006edc:	f000 b932 	b.w	8007144 <__swbuf_r>
 8006ee0:	6813      	ldr	r3, [r2, #0]
 8006ee2:	1c58      	adds	r0, r3, #1
 8006ee4:	6010      	str	r0, [r2, #0]
 8006ee6:	7019      	strb	r1, [r3, #0]
 8006ee8:	4608      	mov	r0, r1
 8006eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <__sfputs_r>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	460f      	mov	r7, r1
 8006ef6:	4614      	mov	r4, r2
 8006ef8:	18d5      	adds	r5, r2, r3
 8006efa:	42ac      	cmp	r4, r5
 8006efc:	d101      	bne.n	8006f02 <__sfputs_r+0x12>
 8006efe:	2000      	movs	r0, #0
 8006f00:	e007      	b.n	8006f12 <__sfputs_r+0x22>
 8006f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f06:	463a      	mov	r2, r7
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f7ff ffda 	bl	8006ec2 <__sfputc_r>
 8006f0e:	1c43      	adds	r3, r0, #1
 8006f10:	d1f3      	bne.n	8006efa <__sfputs_r+0xa>
 8006f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f14 <_vfiprintf_r>:
 8006f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f18:	460d      	mov	r5, r1
 8006f1a:	b09d      	sub	sp, #116	@ 0x74
 8006f1c:	4614      	mov	r4, r2
 8006f1e:	4698      	mov	r8, r3
 8006f20:	4606      	mov	r6, r0
 8006f22:	b118      	cbz	r0, 8006f2c <_vfiprintf_r+0x18>
 8006f24:	6a03      	ldr	r3, [r0, #32]
 8006f26:	b90b      	cbnz	r3, 8006f2c <_vfiprintf_r+0x18>
 8006f28:	f7fe fa78 	bl	800541c <__sinit>
 8006f2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f2e:	07d9      	lsls	r1, r3, #31
 8006f30:	d405      	bmi.n	8006f3e <_vfiprintf_r+0x2a>
 8006f32:	89ab      	ldrh	r3, [r5, #12]
 8006f34:	059a      	lsls	r2, r3, #22
 8006f36:	d402      	bmi.n	8006f3e <_vfiprintf_r+0x2a>
 8006f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f3a:	f7fe fbbc 	bl	80056b6 <__retarget_lock_acquire_recursive>
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	071b      	lsls	r3, r3, #28
 8006f42:	d501      	bpl.n	8006f48 <_vfiprintf_r+0x34>
 8006f44:	692b      	ldr	r3, [r5, #16]
 8006f46:	b99b      	cbnz	r3, 8006f70 <_vfiprintf_r+0x5c>
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f000 f938 	bl	80071c0 <__swsetup_r>
 8006f50:	b170      	cbz	r0, 8006f70 <_vfiprintf_r+0x5c>
 8006f52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f54:	07dc      	lsls	r4, r3, #31
 8006f56:	d504      	bpl.n	8006f62 <_vfiprintf_r+0x4e>
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5c:	b01d      	add	sp, #116	@ 0x74
 8006f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f62:	89ab      	ldrh	r3, [r5, #12]
 8006f64:	0598      	lsls	r0, r3, #22
 8006f66:	d4f7      	bmi.n	8006f58 <_vfiprintf_r+0x44>
 8006f68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f6a:	f7fe fba5 	bl	80056b8 <__retarget_lock_release_recursive>
 8006f6e:	e7f3      	b.n	8006f58 <_vfiprintf_r+0x44>
 8006f70:	2300      	movs	r3, #0
 8006f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f74:	2320      	movs	r3, #32
 8006f76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f7e:	2330      	movs	r3, #48	@ 0x30
 8006f80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007130 <_vfiprintf_r+0x21c>
 8006f84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f88:	f04f 0901 	mov.w	r9, #1
 8006f8c:	4623      	mov	r3, r4
 8006f8e:	469a      	mov	sl, r3
 8006f90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f94:	b10a      	cbz	r2, 8006f9a <_vfiprintf_r+0x86>
 8006f96:	2a25      	cmp	r2, #37	@ 0x25
 8006f98:	d1f9      	bne.n	8006f8e <_vfiprintf_r+0x7a>
 8006f9a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f9e:	d00b      	beq.n	8006fb8 <_vfiprintf_r+0xa4>
 8006fa0:	465b      	mov	r3, fp
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f7ff ffa2 	bl	8006ef0 <__sfputs_r>
 8006fac:	3001      	adds	r0, #1
 8006fae:	f000 80a7 	beq.w	8007100 <_vfiprintf_r+0x1ec>
 8006fb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fb4:	445a      	add	r2, fp
 8006fb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 809f 	beq.w	8007100 <_vfiprintf_r+0x1ec>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fcc:	f10a 0a01 	add.w	sl, sl, #1
 8006fd0:	9304      	str	r3, [sp, #16]
 8006fd2:	9307      	str	r3, [sp, #28]
 8006fd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fda:	4654      	mov	r4, sl
 8006fdc:	2205      	movs	r2, #5
 8006fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fe2:	4853      	ldr	r0, [pc, #332]	@ (8007130 <_vfiprintf_r+0x21c>)
 8006fe4:	f7f9 f8fc 	bl	80001e0 <memchr>
 8006fe8:	9a04      	ldr	r2, [sp, #16]
 8006fea:	b9d8      	cbnz	r0, 8007024 <_vfiprintf_r+0x110>
 8006fec:	06d1      	lsls	r1, r2, #27
 8006fee:	bf44      	itt	mi
 8006ff0:	2320      	movmi	r3, #32
 8006ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ff6:	0713      	lsls	r3, r2, #28
 8006ff8:	bf44      	itt	mi
 8006ffa:	232b      	movmi	r3, #43	@ 0x2b
 8006ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007000:	f89a 3000 	ldrb.w	r3, [sl]
 8007004:	2b2a      	cmp	r3, #42	@ 0x2a
 8007006:	d015      	beq.n	8007034 <_vfiprintf_r+0x120>
 8007008:	9a07      	ldr	r2, [sp, #28]
 800700a:	4654      	mov	r4, sl
 800700c:	2000      	movs	r0, #0
 800700e:	f04f 0c0a 	mov.w	ip, #10
 8007012:	4621      	mov	r1, r4
 8007014:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007018:	3b30      	subs	r3, #48	@ 0x30
 800701a:	2b09      	cmp	r3, #9
 800701c:	d94b      	bls.n	80070b6 <_vfiprintf_r+0x1a2>
 800701e:	b1b0      	cbz	r0, 800704e <_vfiprintf_r+0x13a>
 8007020:	9207      	str	r2, [sp, #28]
 8007022:	e014      	b.n	800704e <_vfiprintf_r+0x13a>
 8007024:	eba0 0308 	sub.w	r3, r0, r8
 8007028:	fa09 f303 	lsl.w	r3, r9, r3
 800702c:	4313      	orrs	r3, r2
 800702e:	9304      	str	r3, [sp, #16]
 8007030:	46a2      	mov	sl, r4
 8007032:	e7d2      	b.n	8006fda <_vfiprintf_r+0xc6>
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	1d19      	adds	r1, r3, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	9103      	str	r1, [sp, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	bfbb      	ittet	lt
 8007040:	425b      	neglt	r3, r3
 8007042:	f042 0202 	orrlt.w	r2, r2, #2
 8007046:	9307      	strge	r3, [sp, #28]
 8007048:	9307      	strlt	r3, [sp, #28]
 800704a:	bfb8      	it	lt
 800704c:	9204      	strlt	r2, [sp, #16]
 800704e:	7823      	ldrb	r3, [r4, #0]
 8007050:	2b2e      	cmp	r3, #46	@ 0x2e
 8007052:	d10a      	bne.n	800706a <_vfiprintf_r+0x156>
 8007054:	7863      	ldrb	r3, [r4, #1]
 8007056:	2b2a      	cmp	r3, #42	@ 0x2a
 8007058:	d132      	bne.n	80070c0 <_vfiprintf_r+0x1ac>
 800705a:	9b03      	ldr	r3, [sp, #12]
 800705c:	1d1a      	adds	r2, r3, #4
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	9203      	str	r2, [sp, #12]
 8007062:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007066:	3402      	adds	r4, #2
 8007068:	9305      	str	r3, [sp, #20]
 800706a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007140 <_vfiprintf_r+0x22c>
 800706e:	7821      	ldrb	r1, [r4, #0]
 8007070:	2203      	movs	r2, #3
 8007072:	4650      	mov	r0, sl
 8007074:	f7f9 f8b4 	bl	80001e0 <memchr>
 8007078:	b138      	cbz	r0, 800708a <_vfiprintf_r+0x176>
 800707a:	9b04      	ldr	r3, [sp, #16]
 800707c:	eba0 000a 	sub.w	r0, r0, sl
 8007080:	2240      	movs	r2, #64	@ 0x40
 8007082:	4082      	lsls	r2, r0
 8007084:	4313      	orrs	r3, r2
 8007086:	3401      	adds	r4, #1
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800708e:	4829      	ldr	r0, [pc, #164]	@ (8007134 <_vfiprintf_r+0x220>)
 8007090:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007094:	2206      	movs	r2, #6
 8007096:	f7f9 f8a3 	bl	80001e0 <memchr>
 800709a:	2800      	cmp	r0, #0
 800709c:	d03f      	beq.n	800711e <_vfiprintf_r+0x20a>
 800709e:	4b26      	ldr	r3, [pc, #152]	@ (8007138 <_vfiprintf_r+0x224>)
 80070a0:	bb1b      	cbnz	r3, 80070ea <_vfiprintf_r+0x1d6>
 80070a2:	9b03      	ldr	r3, [sp, #12]
 80070a4:	3307      	adds	r3, #7
 80070a6:	f023 0307 	bic.w	r3, r3, #7
 80070aa:	3308      	adds	r3, #8
 80070ac:	9303      	str	r3, [sp, #12]
 80070ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b0:	443b      	add	r3, r7
 80070b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80070b4:	e76a      	b.n	8006f8c <_vfiprintf_r+0x78>
 80070b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80070ba:	460c      	mov	r4, r1
 80070bc:	2001      	movs	r0, #1
 80070be:	e7a8      	b.n	8007012 <_vfiprintf_r+0xfe>
 80070c0:	2300      	movs	r3, #0
 80070c2:	3401      	adds	r4, #1
 80070c4:	9305      	str	r3, [sp, #20]
 80070c6:	4619      	mov	r1, r3
 80070c8:	f04f 0c0a 	mov.w	ip, #10
 80070cc:	4620      	mov	r0, r4
 80070ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070d2:	3a30      	subs	r2, #48	@ 0x30
 80070d4:	2a09      	cmp	r2, #9
 80070d6:	d903      	bls.n	80070e0 <_vfiprintf_r+0x1cc>
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0c6      	beq.n	800706a <_vfiprintf_r+0x156>
 80070dc:	9105      	str	r1, [sp, #20]
 80070de:	e7c4      	b.n	800706a <_vfiprintf_r+0x156>
 80070e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80070e4:	4604      	mov	r4, r0
 80070e6:	2301      	movs	r3, #1
 80070e8:	e7f0      	b.n	80070cc <_vfiprintf_r+0x1b8>
 80070ea:	ab03      	add	r3, sp, #12
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	462a      	mov	r2, r5
 80070f0:	4b12      	ldr	r3, [pc, #72]	@ (800713c <_vfiprintf_r+0x228>)
 80070f2:	a904      	add	r1, sp, #16
 80070f4:	4630      	mov	r0, r6
 80070f6:	f7fd fd4d 	bl	8004b94 <_printf_float>
 80070fa:	4607      	mov	r7, r0
 80070fc:	1c78      	adds	r0, r7, #1
 80070fe:	d1d6      	bne.n	80070ae <_vfiprintf_r+0x19a>
 8007100:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007102:	07d9      	lsls	r1, r3, #31
 8007104:	d405      	bmi.n	8007112 <_vfiprintf_r+0x1fe>
 8007106:	89ab      	ldrh	r3, [r5, #12]
 8007108:	059a      	lsls	r2, r3, #22
 800710a:	d402      	bmi.n	8007112 <_vfiprintf_r+0x1fe>
 800710c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800710e:	f7fe fad3 	bl	80056b8 <__retarget_lock_release_recursive>
 8007112:	89ab      	ldrh	r3, [r5, #12]
 8007114:	065b      	lsls	r3, r3, #25
 8007116:	f53f af1f 	bmi.w	8006f58 <_vfiprintf_r+0x44>
 800711a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800711c:	e71e      	b.n	8006f5c <_vfiprintf_r+0x48>
 800711e:	ab03      	add	r3, sp, #12
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	462a      	mov	r2, r5
 8007124:	4b05      	ldr	r3, [pc, #20]	@ (800713c <_vfiprintf_r+0x228>)
 8007126:	a904      	add	r1, sp, #16
 8007128:	4630      	mov	r0, r6
 800712a:	f7fd ffcb 	bl	80050c4 <_printf_i>
 800712e:	e7e4      	b.n	80070fa <_vfiprintf_r+0x1e6>
 8007130:	080077e7 	.word	0x080077e7
 8007134:	080077f1 	.word	0x080077f1
 8007138:	08004b95 	.word	0x08004b95
 800713c:	08006ef1 	.word	0x08006ef1
 8007140:	080077ed 	.word	0x080077ed

08007144 <__swbuf_r>:
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	460e      	mov	r6, r1
 8007148:	4614      	mov	r4, r2
 800714a:	4605      	mov	r5, r0
 800714c:	b118      	cbz	r0, 8007156 <__swbuf_r+0x12>
 800714e:	6a03      	ldr	r3, [r0, #32]
 8007150:	b90b      	cbnz	r3, 8007156 <__swbuf_r+0x12>
 8007152:	f7fe f963 	bl	800541c <__sinit>
 8007156:	69a3      	ldr	r3, [r4, #24]
 8007158:	60a3      	str	r3, [r4, #8]
 800715a:	89a3      	ldrh	r3, [r4, #12]
 800715c:	071a      	lsls	r2, r3, #28
 800715e:	d501      	bpl.n	8007164 <__swbuf_r+0x20>
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	b943      	cbnz	r3, 8007176 <__swbuf_r+0x32>
 8007164:	4621      	mov	r1, r4
 8007166:	4628      	mov	r0, r5
 8007168:	f000 f82a 	bl	80071c0 <__swsetup_r>
 800716c:	b118      	cbz	r0, 8007176 <__swbuf_r+0x32>
 800716e:	f04f 37ff 	mov.w	r7, #4294967295
 8007172:	4638      	mov	r0, r7
 8007174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	6922      	ldr	r2, [r4, #16]
 800717a:	1a98      	subs	r0, r3, r2
 800717c:	6963      	ldr	r3, [r4, #20]
 800717e:	b2f6      	uxtb	r6, r6
 8007180:	4283      	cmp	r3, r0
 8007182:	4637      	mov	r7, r6
 8007184:	dc05      	bgt.n	8007192 <__swbuf_r+0x4e>
 8007186:	4621      	mov	r1, r4
 8007188:	4628      	mov	r0, r5
 800718a:	f7ff fdf7 	bl	8006d7c <_fflush_r>
 800718e:	2800      	cmp	r0, #0
 8007190:	d1ed      	bne.n	800716e <__swbuf_r+0x2a>
 8007192:	68a3      	ldr	r3, [r4, #8]
 8007194:	3b01      	subs	r3, #1
 8007196:	60a3      	str	r3, [r4, #8]
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	6022      	str	r2, [r4, #0]
 800719e:	701e      	strb	r6, [r3, #0]
 80071a0:	6962      	ldr	r2, [r4, #20]
 80071a2:	1c43      	adds	r3, r0, #1
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d004      	beq.n	80071b2 <__swbuf_r+0x6e>
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	07db      	lsls	r3, r3, #31
 80071ac:	d5e1      	bpl.n	8007172 <__swbuf_r+0x2e>
 80071ae:	2e0a      	cmp	r6, #10
 80071b0:	d1df      	bne.n	8007172 <__swbuf_r+0x2e>
 80071b2:	4621      	mov	r1, r4
 80071b4:	4628      	mov	r0, r5
 80071b6:	f7ff fde1 	bl	8006d7c <_fflush_r>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d0d9      	beq.n	8007172 <__swbuf_r+0x2e>
 80071be:	e7d6      	b.n	800716e <__swbuf_r+0x2a>

080071c0 <__swsetup_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4b29      	ldr	r3, [pc, #164]	@ (8007268 <__swsetup_r+0xa8>)
 80071c4:	4605      	mov	r5, r0
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	460c      	mov	r4, r1
 80071ca:	b118      	cbz	r0, 80071d4 <__swsetup_r+0x14>
 80071cc:	6a03      	ldr	r3, [r0, #32]
 80071ce:	b90b      	cbnz	r3, 80071d4 <__swsetup_r+0x14>
 80071d0:	f7fe f924 	bl	800541c <__sinit>
 80071d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071d8:	0719      	lsls	r1, r3, #28
 80071da:	d422      	bmi.n	8007222 <__swsetup_r+0x62>
 80071dc:	06da      	lsls	r2, r3, #27
 80071de:	d407      	bmi.n	80071f0 <__swsetup_r+0x30>
 80071e0:	2209      	movs	r2, #9
 80071e2:	602a      	str	r2, [r5, #0]
 80071e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295
 80071ee:	e033      	b.n	8007258 <__swsetup_r+0x98>
 80071f0:	0758      	lsls	r0, r3, #29
 80071f2:	d512      	bpl.n	800721a <__swsetup_r+0x5a>
 80071f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071f6:	b141      	cbz	r1, 800720a <__swsetup_r+0x4a>
 80071f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071fc:	4299      	cmp	r1, r3
 80071fe:	d002      	beq.n	8007206 <__swsetup_r+0x46>
 8007200:	4628      	mov	r0, r5
 8007202:	f7ff f8b5 	bl	8006370 <_free_r>
 8007206:	2300      	movs	r3, #0
 8007208:	6363      	str	r3, [r4, #52]	@ 0x34
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	2300      	movs	r3, #0
 8007214:	6063      	str	r3, [r4, #4]
 8007216:	6923      	ldr	r3, [r4, #16]
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	f043 0308 	orr.w	r3, r3, #8
 8007220:	81a3      	strh	r3, [r4, #12]
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	b94b      	cbnz	r3, 800723a <__swsetup_r+0x7a>
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800722c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007230:	d003      	beq.n	800723a <__swsetup_r+0x7a>
 8007232:	4621      	mov	r1, r4
 8007234:	4628      	mov	r0, r5
 8007236:	f000 f883 	bl	8007340 <__smakebuf_r>
 800723a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800723e:	f013 0201 	ands.w	r2, r3, #1
 8007242:	d00a      	beq.n	800725a <__swsetup_r+0x9a>
 8007244:	2200      	movs	r2, #0
 8007246:	60a2      	str	r2, [r4, #8]
 8007248:	6962      	ldr	r2, [r4, #20]
 800724a:	4252      	negs	r2, r2
 800724c:	61a2      	str	r2, [r4, #24]
 800724e:	6922      	ldr	r2, [r4, #16]
 8007250:	b942      	cbnz	r2, 8007264 <__swsetup_r+0xa4>
 8007252:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007256:	d1c5      	bne.n	80071e4 <__swsetup_r+0x24>
 8007258:	bd38      	pop	{r3, r4, r5, pc}
 800725a:	0799      	lsls	r1, r3, #30
 800725c:	bf58      	it	pl
 800725e:	6962      	ldrpl	r2, [r4, #20]
 8007260:	60a2      	str	r2, [r4, #8]
 8007262:	e7f4      	b.n	800724e <__swsetup_r+0x8e>
 8007264:	2000      	movs	r0, #0
 8007266:	e7f7      	b.n	8007258 <__swsetup_r+0x98>
 8007268:	2000001c 	.word	0x2000001c

0800726c <_raise_r>:
 800726c:	291f      	cmp	r1, #31
 800726e:	b538      	push	{r3, r4, r5, lr}
 8007270:	4605      	mov	r5, r0
 8007272:	460c      	mov	r4, r1
 8007274:	d904      	bls.n	8007280 <_raise_r+0x14>
 8007276:	2316      	movs	r3, #22
 8007278:	6003      	str	r3, [r0, #0]
 800727a:	f04f 30ff 	mov.w	r0, #4294967295
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007282:	b112      	cbz	r2, 800728a <_raise_r+0x1e>
 8007284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007288:	b94b      	cbnz	r3, 800729e <_raise_r+0x32>
 800728a:	4628      	mov	r0, r5
 800728c:	f000 f830 	bl	80072f0 <_getpid_r>
 8007290:	4622      	mov	r2, r4
 8007292:	4601      	mov	r1, r0
 8007294:	4628      	mov	r0, r5
 8007296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800729a:	f000 b817 	b.w	80072cc <_kill_r>
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d00a      	beq.n	80072b8 <_raise_r+0x4c>
 80072a2:	1c59      	adds	r1, r3, #1
 80072a4:	d103      	bne.n	80072ae <_raise_r+0x42>
 80072a6:	2316      	movs	r3, #22
 80072a8:	6003      	str	r3, [r0, #0]
 80072aa:	2001      	movs	r0, #1
 80072ac:	e7e7      	b.n	800727e <_raise_r+0x12>
 80072ae:	2100      	movs	r1, #0
 80072b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80072b4:	4620      	mov	r0, r4
 80072b6:	4798      	blx	r3
 80072b8:	2000      	movs	r0, #0
 80072ba:	e7e0      	b.n	800727e <_raise_r+0x12>

080072bc <raise>:
 80072bc:	4b02      	ldr	r3, [pc, #8]	@ (80072c8 <raise+0xc>)
 80072be:	4601      	mov	r1, r0
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	f7ff bfd3 	b.w	800726c <_raise_r>
 80072c6:	bf00      	nop
 80072c8:	2000001c 	.word	0x2000001c

080072cc <_kill_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4d07      	ldr	r5, [pc, #28]	@ (80072ec <_kill_r+0x20>)
 80072d0:	2300      	movs	r3, #0
 80072d2:	4604      	mov	r4, r0
 80072d4:	4608      	mov	r0, r1
 80072d6:	4611      	mov	r1, r2
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	f7fa f97b 	bl	80015d4 <_kill>
 80072de:	1c43      	adds	r3, r0, #1
 80072e0:	d102      	bne.n	80072e8 <_kill_r+0x1c>
 80072e2:	682b      	ldr	r3, [r5, #0]
 80072e4:	b103      	cbz	r3, 80072e8 <_kill_r+0x1c>
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	bd38      	pop	{r3, r4, r5, pc}
 80072ea:	bf00      	nop
 80072ec:	20004428 	.word	0x20004428

080072f0 <_getpid_r>:
 80072f0:	f7fa b968 	b.w	80015c4 <_getpid>

080072f4 <__swhatbuf_r>:
 80072f4:	b570      	push	{r4, r5, r6, lr}
 80072f6:	460c      	mov	r4, r1
 80072f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072fc:	2900      	cmp	r1, #0
 80072fe:	b096      	sub	sp, #88	@ 0x58
 8007300:	4615      	mov	r5, r2
 8007302:	461e      	mov	r6, r3
 8007304:	da0d      	bge.n	8007322 <__swhatbuf_r+0x2e>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800730c:	f04f 0100 	mov.w	r1, #0
 8007310:	bf14      	ite	ne
 8007312:	2340      	movne	r3, #64	@ 0x40
 8007314:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007318:	2000      	movs	r0, #0
 800731a:	6031      	str	r1, [r6, #0]
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	b016      	add	sp, #88	@ 0x58
 8007320:	bd70      	pop	{r4, r5, r6, pc}
 8007322:	466a      	mov	r2, sp
 8007324:	f000 f848 	bl	80073b8 <_fstat_r>
 8007328:	2800      	cmp	r0, #0
 800732a:	dbec      	blt.n	8007306 <__swhatbuf_r+0x12>
 800732c:	9901      	ldr	r1, [sp, #4]
 800732e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007332:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007336:	4259      	negs	r1, r3
 8007338:	4159      	adcs	r1, r3
 800733a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800733e:	e7eb      	b.n	8007318 <__swhatbuf_r+0x24>

08007340 <__smakebuf_r>:
 8007340:	898b      	ldrh	r3, [r1, #12]
 8007342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007344:	079d      	lsls	r5, r3, #30
 8007346:	4606      	mov	r6, r0
 8007348:	460c      	mov	r4, r1
 800734a:	d507      	bpl.n	800735c <__smakebuf_r+0x1c>
 800734c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	6123      	str	r3, [r4, #16]
 8007354:	2301      	movs	r3, #1
 8007356:	6163      	str	r3, [r4, #20]
 8007358:	b003      	add	sp, #12
 800735a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800735c:	ab01      	add	r3, sp, #4
 800735e:	466a      	mov	r2, sp
 8007360:	f7ff ffc8 	bl	80072f4 <__swhatbuf_r>
 8007364:	9f00      	ldr	r7, [sp, #0]
 8007366:	4605      	mov	r5, r0
 8007368:	4639      	mov	r1, r7
 800736a:	4630      	mov	r0, r6
 800736c:	f7ff f874 	bl	8006458 <_malloc_r>
 8007370:	b948      	cbnz	r0, 8007386 <__smakebuf_r+0x46>
 8007372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007376:	059a      	lsls	r2, r3, #22
 8007378:	d4ee      	bmi.n	8007358 <__smakebuf_r+0x18>
 800737a:	f023 0303 	bic.w	r3, r3, #3
 800737e:	f043 0302 	orr.w	r3, r3, #2
 8007382:	81a3      	strh	r3, [r4, #12]
 8007384:	e7e2      	b.n	800734c <__smakebuf_r+0xc>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	6020      	str	r0, [r4, #0]
 800738a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800738e:	81a3      	strh	r3, [r4, #12]
 8007390:	9b01      	ldr	r3, [sp, #4]
 8007392:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007396:	b15b      	cbz	r3, 80073b0 <__smakebuf_r+0x70>
 8007398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800739c:	4630      	mov	r0, r6
 800739e:	f000 f81d 	bl	80073dc <_isatty_r>
 80073a2:	b128      	cbz	r0, 80073b0 <__smakebuf_r+0x70>
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	f023 0303 	bic.w	r3, r3, #3
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	81a3      	strh	r3, [r4, #12]
 80073b0:	89a3      	ldrh	r3, [r4, #12]
 80073b2:	431d      	orrs	r5, r3
 80073b4:	81a5      	strh	r5, [r4, #12]
 80073b6:	e7cf      	b.n	8007358 <__smakebuf_r+0x18>

080073b8 <_fstat_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d07      	ldr	r5, [pc, #28]	@ (80073d8 <_fstat_r+0x20>)
 80073bc:	2300      	movs	r3, #0
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	4611      	mov	r1, r2
 80073c4:	602b      	str	r3, [r5, #0]
 80073c6:	f7fa f965 	bl	8001694 <_fstat>
 80073ca:	1c43      	adds	r3, r0, #1
 80073cc:	d102      	bne.n	80073d4 <_fstat_r+0x1c>
 80073ce:	682b      	ldr	r3, [r5, #0]
 80073d0:	b103      	cbz	r3, 80073d4 <_fstat_r+0x1c>
 80073d2:	6023      	str	r3, [r4, #0]
 80073d4:	bd38      	pop	{r3, r4, r5, pc}
 80073d6:	bf00      	nop
 80073d8:	20004428 	.word	0x20004428

080073dc <_isatty_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4d06      	ldr	r5, [pc, #24]	@ (80073f8 <_isatty_r+0x1c>)
 80073e0:	2300      	movs	r3, #0
 80073e2:	4604      	mov	r4, r0
 80073e4:	4608      	mov	r0, r1
 80073e6:	602b      	str	r3, [r5, #0]
 80073e8:	f7fa f964 	bl	80016b4 <_isatty>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d102      	bne.n	80073f6 <_isatty_r+0x1a>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	b103      	cbz	r3, 80073f6 <_isatty_r+0x1a>
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	20004428 	.word	0x20004428

080073fc <_init>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	bf00      	nop
 8007400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007402:	bc08      	pop	{r3}
 8007404:	469e      	mov	lr, r3
 8007406:	4770      	bx	lr

08007408 <_fini>:
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	bf00      	nop
 800740c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740e:	bc08      	pop	{r3}
 8007410:	469e      	mov	lr, r3
 8007412:	4770      	bx	lr
