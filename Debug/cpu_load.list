
cpu_load.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004fc8  08004fc8  00005fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005080  08005080  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005080  08005080  00006080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005088  08005088  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005088  08005088  00006088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800508c  0800508c  0000608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005090  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004258  2000006c  080050fc  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042c4  080050fc  000072c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001447b  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e90  00000000  00000000  0001b517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001e3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da4  00000000  00000000  0001f540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018df7  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fc6  00000000  00000000  000390db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000989c0  00000000  00000000  0004d0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5a61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005080  00000000  00000000  000e5aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000eab24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fb0 	.word	0x08004fb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004fb0 	.word	0x08004fb0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim10);
 8000574:	4802      	ldr	r0, [pc, #8]	@ (8000580 <configureTimerForRunTimeStats+0x10>)
 8000576:	f001 fb71 	bl	8001c5c <HAL_TIM_Base_Start>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000334 	.word	0x20000334

08000584 <getRunTimeCounterValue>:
extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
return ulHighFrequencyTimerTicks;
 8000588:	4b03      	ldr	r3, [pc, #12]	@ (8000598 <getRunTimeCounterValue+0x14>)
 800058a:	681b      	ldr	r3, [r3, #0]
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000410 	.word	0x20000410

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000088 	.word	0x20000088
 80005cc:	20000134 	.word	0x20000134

080005d0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005d8:	1d39      	adds	r1, r7, #4
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	2201      	movs	r2, #1
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <__io_putchar+0x20>)
 80005e2:	f001 fdff 	bl	80021e4 <HAL_UART_Transmit>
  return ch;
 80005e6:	687b      	ldr	r3, [r7, #4]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000037c 	.word	0x2000037c

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fb79 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f825 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8cf 	bl	80007a4 <MX_GPIO_Init>
  MX_TIM10_Init();
 8000606:	f000 f87f 	bl	8000708 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 800060a:	f000 f8a1 	bl	8000750 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim10);
 800060e:	480c      	ldr	r0, [pc, #48]	@ (8000640 <main+0x4c>)
 8000610:	f001 fb24 	bl	8001c5c <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink01 */
  osThreadDef(blink01, StartBlink01, osPriorityNormal, 0, 128);
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <main+0x50>)
 8000616:	1d3c      	adds	r4, r7, #4
 8000618:	461d      	mov	r5, r3
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink01Handle = osThreadCreate(osThread(blink01), NULL);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 f9b5 	bl	800299a <osThreadCreate>
 8000630:	4603      	mov	r3, r0
 8000632:	4a05      	ldr	r2, [pc, #20]	@ (8000648 <main+0x54>)
 8000634:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000636:	f002 f9a9 	bl	800298c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063a:	bf00      	nop
 800063c:	e7fd      	b.n	800063a <main+0x46>
 800063e:	bf00      	nop
 8000640:	20000334 	.word	0x20000334
 8000644:	08004fd0 	.word	0x08004fd0
 8000648:	200003c4 	.word	0x200003c4

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	@ 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	@ 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fe39 	bl	80042d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <SystemClock_Config+0xb4>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <SystemClock_Config+0xb4>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <SystemClock_Config+0xb4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <SystemClock_Config+0xb8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a1b      	ldr	r2, [pc, #108]	@ (8000704 <SystemClock_Config+0xb8>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <SystemClock_Config+0xb8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fdf3 	bl	80012a8 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006c8:	f000 f8de 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 f856 	bl	8001798 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006f2:	f000 f8c9 	bl	8000888 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800070c:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_TIM10_Init+0x40>)
 800070e:	4a0f      	ldr	r2, [pc, #60]	@ (800074c <MX_TIM10_Init+0x44>)
 8000710:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <MX_TIM10_Init+0x40>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000718:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_TIM10_Init+0x40>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4199;
 800071e:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <MX_TIM10_Init+0x40>)
 8000720:	f241 0267 	movw	r2, #4199	@ 0x1067
 8000724:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_TIM10_Init+0x40>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_TIM10_Init+0x40>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_TIM10_Init+0x40>)
 8000734:	f001 fa42 	bl	8001bbc <HAL_TIM_Base_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800073e:	f000 f8a3 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000334 	.word	0x20000334
 800074c:	40014400 	.word	0x40014400

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <MX_USART2_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000788:	f001 fcdc 	bl	8002144 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f879 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000037c 	.word	0x2000037c
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <MX_GPIO_Init+0x7c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a17      	ldr	r2, [pc, #92]	@ (8000820 <MX_GPIO_Init+0x7c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_GPIO_Init+0x7c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_GPIO_Init+0x7c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a10      	ldr	r2, [pc, #64]	@ (8000820 <MX_GPIO_Init+0x7c>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_GPIO_Init+0x7c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	480b      	ldr	r0, [pc, #44]	@ (8000824 <MX_GPIO_Init+0x80>)
 80007f8:	f000 fd22 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007fc:	2320      	movs	r3, #32
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	4804      	ldr	r0, [pc, #16]	@ (8000824 <MX_GPIO_Init+0x80>)
 8000814:	f000 fb90 	bl	8000f38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000

08000828 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void const * argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	@ 0x30
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
//  }

  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000830:	2120      	movs	r1, #32
 8000832:	480a      	ldr	r0, [pc, #40]	@ (800085c <StartBlink01+0x34>)
 8000834:	f000 fd1d 	bl	8001272 <HAL_GPIO_TogglePin>
    osDelay(1000);  // Delay to slow down toggling for easier observation
 8000838:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800083c:	f002 f8f9 	bl	8002a32 <osDelay>
    vTaskGetInfo(NULL, &xTaskDetails, pdTRUE, eInvalid);
 8000840:	f107 010c 	add.w	r1, r7, #12
 8000844:	2305      	movs	r3, #5
 8000846:	2201      	movs	r2, #1
 8000848:	2000      	movs	r0, #0
 800084a:	f002 feeb 	bl	8003624 <vTaskGetInfo>
    printf("Task Run Time: %lu\n\r", xTaskDetails.ulRunTimeCounter);
 800084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000850:	4619      	mov	r1, r3
 8000852:	4803      	ldr	r0, [pc, #12]	@ (8000860 <StartBlink01+0x38>)
 8000854:	f003 fce8 	bl	8004228 <iprintf>
  {
 8000858:	bf00      	nop
 800085a:	e7e9      	b.n	8000830 <StartBlink01+0x8>
 800085c:	40020000 	.word	0x40020000
 8000860:	08004fec 	.word	0x08004fec

08000864 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a04      	ldr	r2, [pc, #16]	@ (8000884 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d101      	bne.n	800087a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000876:	f000 fa5d 	bl	8000d34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40000400 	.word	0x40000400

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <HAL_MspInit+0x54>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a2:	4a11      	ldr	r2, [pc, #68]	@ (80008e8 <HAL_MspInit+0x54>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <HAL_MspInit+0x54>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <HAL_MspInit+0x54>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <HAL_MspInit+0x54>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <HAL_MspInit+0x54>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	f06f 0001 	mvn.w	r0, #1
 80008da:	f000 fb03 	bl	8000ee4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <HAL_TIM_Base_MspInit+0x48>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d115      	bne.n	800092a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <HAL_TIM_Base_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <HAL_TIM_Base_MspInit+0x4c>)
 8000908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_TIM_Base_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2105      	movs	r1, #5
 800091e:	2019      	movs	r0, #25
 8000920:	f000 fae0 	bl	8000ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000924:	2019      	movs	r0, #25
 8000926:	f000 faf9 	bl	8000f1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40014400 	.word	0x40014400
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	@ 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <HAL_UART_MspInit+0x84>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d12b      	bne.n	80009b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <HAL_UART_MspInit+0x88>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	4a17      	ldr	r2, [pc, #92]	@ (80009c4 <HAL_UART_MspInit+0x88>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096c:	6413      	str	r3, [r2, #64]	@ 0x40
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <HAL_UART_MspInit+0x88>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <HAL_UART_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <HAL_UART_MspInit+0x88>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <HAL_UART_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000996:	230c      	movs	r3, #12
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a6:	2307      	movs	r3, #7
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <HAL_UART_MspInit+0x8c>)
 80009b2:	f000 fac1 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	@ 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000

080009cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	@ 0x38
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4b33      	ldr	r3, [pc, #204]	@ (8000ab0 <HAL_InitTick+0xe4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e4:	4a32      	ldr	r2, [pc, #200]	@ (8000ab0 <HAL_InitTick+0xe4>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ec:	4b30      	ldr	r3, [pc, #192]	@ (8000ab0 <HAL_InitTick+0xe4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f8:	f107 0210 	add.w	r2, r7, #16
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f8a8 	bl	8001b58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d103      	bne.n	8000a1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a12:	f001 f879 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8000a16:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a18:	e004      	b.n	8000a24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a1a:	f001 f875 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a26:	4a23      	ldr	r2, [pc, #140]	@ (8000ab4 <HAL_InitTick+0xe8>)
 8000a28:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2c:	0c9b      	lsrs	r3, r3, #18
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000a32:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <HAL_InitTick+0xec>)
 8000a34:	4a21      	ldr	r2, [pc, #132]	@ (8000abc <HAL_InitTick+0xf0>)
 8000a36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <HAL_InitTick+0xec>)
 8000a3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a3e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000a40:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab8 <HAL_InitTick+0xec>)
 8000a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a44:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <HAL_InitTick+0xec>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <HAL_InitTick+0xec>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <HAL_InitTick+0xec>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000a58:	4817      	ldr	r0, [pc, #92]	@ (8000ab8 <HAL_InitTick+0xec>)
 8000a5a:	f001 f8af 	bl	8001bbc <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d11b      	bne.n	8000aa4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000a6c:	4812      	ldr	r0, [pc, #72]	@ (8000ab8 <HAL_InitTick+0xec>)
 8000a6e:	f001 f94f 	bl	8001d10 <HAL_TIM_Base_Start_IT>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d111      	bne.n	8000aa4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a80:	201d      	movs	r0, #29
 8000a82:	f000 fa4b 	bl	8000f1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d808      	bhi.n	8000a9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	201d      	movs	r0, #29
 8000a92:	f000 fa27 	bl	8000ee4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <HAL_InitTick+0xf4>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	e002      	b.n	8000aa4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3738      	adds	r7, #56	@ 0x38
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	431bde83 	.word	0x431bde83
 8000ab8:	200003c8 	.word	0x200003c8
 8000abc:	40000400 	.word	0x40000400
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <NMI_Handler+0x4>

08000acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <MemManage_Handler+0x4>

08000adc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <TIM1_UP_TIM10_IRQHandler>:
/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
volatile unsigned long ulHighFrequencyTimerTicks = 0;
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000b00:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000b02:	f001 f967 	bl	8001dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 8000b06:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a02      	ldr	r2, [pc, #8]	@ (8000b18 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000b0e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000334 	.word	0x20000334
 8000b18:	20000410 	.word	0x20000410

08000b1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <TIM3_IRQHandler+0x10>)
 8000b22:	f001 f957 	bl	8001dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200003c8 	.word	0x200003c8

08000b30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e00a      	b.n	8000b58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b42:	f3af 8000 	nop.w
 8000b46:	4601      	mov	r1, r0
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	60ba      	str	r2, [r7, #8]
 8000b4e:	b2ca      	uxtb	r2, r1
 8000b50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbf0      	blt.n	8000b42 <_read+0x12>
  }

  return len;
 8000b60:	687b      	ldr	r3, [r7, #4]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	e009      	b.n	8000b90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60ba      	str	r2, [r7, #8]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fd23 	bl	80005d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbf1      	blt.n	8000b7c <_write+0x12>
  }
  return len;
 8000b98:	687b      	ldr	r3, [r7, #4]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <_close>:

int _close(int file)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bca:	605a      	str	r2, [r3, #4]
  return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_isatty>:

int _isatty(int file)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	@ (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	@ (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f003 fbee 	bl	800441c <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20020000 	.word	0x20020000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	20000414 	.word	0x20000414
 8000c74:	200042c8 	.word	0x200042c8

08000c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	@ (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca0:	f7ff ffea 	bl	8000c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	@ (8000cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cca:	f003 fbad 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fc91 	bl	80005f4 <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ce0:	08005090 	.word	0x08005090
  ldr r2, =_sbss
 8000ce4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ce8:	200042c4 	.word	0x200042c4

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <HAL_Init+0x40>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <HAL_Init+0x40>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	@ (8000d30 <HAL_Init+0x40>)
 8000d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f8d8 	bl	8000ece <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f7ff fe54 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fdb6 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000418 	.word	0x20000418

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000418 	.word	0x20000418

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	@ (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	@ (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	@ 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ff4c 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef6:	f7ff ff61 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000efa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	6978      	ldr	r0, [r7, #20]
 8000f02:	f7ff ffb1 	bl	8000e68 <NVIC_EncodePriority>
 8000f06:	4602      	mov	r2, r0
 8000f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff80 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff54 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	@ 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e159      	b.n	8001208 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f040 8148 	bne.w	8001202 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d005      	beq.n	8000f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d130      	bne.n	8000fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	f003 0201 	and.w	r2, r3, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d017      	beq.n	8001028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d123      	bne.n	800107c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3208      	adds	r2, #8
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	69b9      	ldr	r1, [r7, #24]
 8001078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0203 	and.w	r2, r3, #3
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80a2 	beq.w	8001202 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b57      	ldr	r3, [pc, #348]	@ (8001220 <HAL_GPIO_Init+0x2e8>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a56      	ldr	r2, [pc, #344]	@ (8001220 <HAL_GPIO_Init+0x2e8>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b54      	ldr	r3, [pc, #336]	@ (8001220 <HAL_GPIO_Init+0x2e8>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010da:	4a52      	ldr	r2, [pc, #328]	@ (8001224 <HAL_GPIO_Init+0x2ec>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a49      	ldr	r2, [pc, #292]	@ (8001228 <HAL_GPIO_Init+0x2f0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x202>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a48      	ldr	r2, [pc, #288]	@ (800122c <HAL_GPIO_Init+0x2f4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x1fe>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a47      	ldr	r2, [pc, #284]	@ (8001230 <HAL_GPIO_Init+0x2f8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x1fa>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a46      	ldr	r2, [pc, #280]	@ (8001234 <HAL_GPIO_Init+0x2fc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x1f6>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a45      	ldr	r2, [pc, #276]	@ (8001238 <HAL_GPIO_Init+0x300>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x1f2>
 8001126:	2304      	movs	r3, #4
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x204>
 800112a:	2307      	movs	r3, #7
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x204>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x204>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x204>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x204>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114c:	4935      	ldr	r1, [pc, #212]	@ (8001224 <HAL_GPIO_Init+0x2ec>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b38      	ldr	r3, [pc, #224]	@ (800123c <HAL_GPIO_Init+0x304>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a2f      	ldr	r2, [pc, #188]	@ (800123c <HAL_GPIO_Init+0x304>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b2d      	ldr	r3, [pc, #180]	@ (800123c <HAL_GPIO_Init+0x304>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a24      	ldr	r2, [pc, #144]	@ (800123c <HAL_GPIO_Init+0x304>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <HAL_GPIO_Init+0x304>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d2:	4a1a      	ldr	r2, [pc, #104]	@ (800123c <HAL_GPIO_Init+0x304>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_GPIO_Init+0x304>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fc:	4a0f      	ldr	r2, [pc, #60]	@ (800123c <HAL_GPIO_Init+0x304>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f aea2 	bls.w	8000f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40013c00 	.word	0x40013c00

08001240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
 800124c:	4613      	mov	r3, r2
 800124e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800125c:	e003      	b.n	8001266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001272:	b480      	push	{r7}
 8001274:	b085      	sub	sp, #20
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	460b      	mov	r3, r1
 800127c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001284:	887a      	ldrh	r2, [r7, #2]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4013      	ands	r3, r2
 800128a:	041a      	lsls	r2, r3, #16
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43d9      	mvns	r1, r3
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	400b      	ands	r3, r1
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e267      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d075      	beq.n	80013b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c6:	4b88      	ldr	r3, [pc, #544]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d00c      	beq.n	80012ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d2:	4b85      	ldr	r3, [pc, #532]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d112      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012de:	4b82      	ldr	r3, [pc, #520]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ea:	d10b      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	4b7e      	ldr	r3, [pc, #504]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d05b      	beq.n	80013b0 <HAL_RCC_OscConfig+0x108>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d157      	bne.n	80013b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e242      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800130c:	d106      	bne.n	800131c <HAL_RCC_OscConfig+0x74>
 800130e:	4b76      	ldr	r3, [pc, #472]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a75      	ldr	r2, [pc, #468]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x98>
 8001326:	4b70      	ldr	r3, [pc, #448]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a6f      	ldr	r2, [pc, #444]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b6d      	ldr	r3, [pc, #436]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6c      	ldr	r2, [pc, #432]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 8001340:	4b69      	ldr	r3, [pc, #420]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a68      	ldr	r2, [pc, #416]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b66      	ldr	r3, [pc, #408]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a65      	ldr	r2, [pc, #404]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fcfc 	bl	8000d5c <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fcf8 	bl	8000d5c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	@ 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e207      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b5b      	ldr	r3, [pc, #364]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xc0>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fce8 	bl	8000d5c <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fce4 	bl	8000d5c <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1f3      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	4b51      	ldr	r3, [pc, #324]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0xe8>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d063      	beq.n	8001486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013be:	4b4a      	ldr	r3, [pc, #296]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ca:	4b47      	ldr	r3, [pc, #284]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11c      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d6:	4b44      	ldr	r3, [pc, #272]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	4b41      	ldr	r3, [pc, #260]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1c7      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4b3b      	ldr	r3, [pc, #236]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4937      	ldr	r1, [pc, #220]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	e03a      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4b34      	ldr	r3, [pc, #208]	@ (80014ec <HAL_RCC_OscConfig+0x244>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fc9d 	bl	8000d5c <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fc99 	bl	8000d5c <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e1a8      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4925      	ldr	r1, [pc, #148]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145a:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <HAL_RCC_OscConfig+0x244>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fc7c 	bl	8000d5c <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fc78 	bl	8000d5c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e187      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d036      	beq.n	8001500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d016      	beq.n	80014c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_RCC_OscConfig+0x248>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff fc5c 	bl	8000d5c <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fc58 	bl	8000d5c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e167      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80014bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x200>
 80014c6:	e01b      	b.n	8001500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_RCC_OscConfig+0x248>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fc45 	bl	8000d5c <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	e00e      	b.n	80014f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fc41 	bl	8000d5c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d907      	bls.n	80014f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e150      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
 80014e8:	40023800 	.word	0x40023800
 80014ec:	42470000 	.word	0x42470000
 80014f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	4b88      	ldr	r3, [pc, #544]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ea      	bne.n	80014d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8097 	beq.w	800163c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001512:	4b81      	ldr	r3, [pc, #516]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10f      	bne.n	800153e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b7d      	ldr	r3, [pc, #500]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a7c      	ldr	r2, [pc, #496]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b7a      	ldr	r3, [pc, #488]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	4b77      	ldr	r3, [pc, #476]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154a:	4b74      	ldr	r3, [pc, #464]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a73      	ldr	r2, [pc, #460]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001556:	f7ff fc01 	bl	8000d5c <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155e:	f7ff fbfd 	bl	8000d5c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e10c      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	4b6a      	ldr	r3, [pc, #424]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x2ea>
 8001584:	4b64      	ldr	r3, [pc, #400]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001588:	4a63      	ldr	r2, [pc, #396]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001590:	e01c      	b.n	80015cc <HAL_RCC_OscConfig+0x324>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x30c>
 800159a:	4b5f      	ldr	r3, [pc, #380]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159e:	4a5e      	ldr	r2, [pc, #376]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x324>
 80015b4:	4b58      	ldr	r3, [pc, #352]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b8:	4a57      	ldr	r2, [pc, #348]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c0:	4b55      	ldr	r3, [pc, #340]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c4:	4a54      	ldr	r2, [pc, #336]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d015      	beq.n	8001600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff fbc2 	bl	8000d5c <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff fbbe 	bl	8000d5c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0cb      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f2:	4b49      	ldr	r3, [pc, #292]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0ee      	beq.n	80015dc <HAL_RCC_OscConfig+0x334>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fbac 	bl	8000d5c <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001606:	e00a      	b.n	800161e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f7ff fba8 	bl	8000d5c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e0b5      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161e:	4b3e      	ldr	r3, [pc, #248]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ee      	bne.n	8001608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800162a:	7dfb      	ldrb	r3, [r7, #23]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001630:	4b39      	ldr	r3, [pc, #228]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	4a38      	ldr	r2, [pc, #224]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a1 	beq.w	8001788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001646:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b08      	cmp	r3, #8
 8001650:	d05c      	beq.n	800170c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d141      	bne.n	80016de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b31      	ldr	r3, [pc, #196]	@ (8001720 <HAL_RCC_OscConfig+0x478>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fb7c 	bl	8000d5c <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fb78 	bl	8000d5c <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e087      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	019b      	lsls	r3, r3, #6
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	3b01      	subs	r3, #1
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	491b      	ldr	r1, [pc, #108]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <HAL_RCC_OscConfig+0x478>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fb51 	bl	8000d5c <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff fb4d 	bl	8000d5c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e05c      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x416>
 80016dc:	e054      	b.n	8001788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <HAL_RCC_OscConfig+0x478>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb3a 	bl	8000d5c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff fb36 	bl	8000d5c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e045      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x444>
 800170a:	e03d      	b.n	8001788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d107      	bne.n	8001724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e038      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000
 8001720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_RCC_OscConfig+0x4ec>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d028      	beq.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d121      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d11a      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001754:	4013      	ands	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800175a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175c:	4293      	cmp	r3, r2
 800175e:	d111      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	085b      	lsrs	r3, r3, #1
 800176c:	3b01      	subs	r3, #1
 800176e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d107      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0cc      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b68      	ldr	r3, [pc, #416]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d90c      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b65      	ldr	r3, [pc, #404]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a58      	ldr	r2, [pc, #352]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a52      	ldr	r2, [pc, #328]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800180e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d044      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d119      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b3f      	ldr	r3, [pc, #252]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3b      	ldr	r3, [pc, #236]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e067      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b37      	ldr	r3, [pc, #220]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4934      	ldr	r1, [pc, #208]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff fa68 	bl	8000d5c <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff fa64 	bl	8000d5c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20c      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4602      	mov	r2, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	490a      	ldr	r1, [pc, #40]	@ (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	5ccb      	ldrb	r3, [r1, r3]
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	@ (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f844 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00
 8001954:	40023800 	.word	0x40023800
 8001958:	08005034 	.word	0x08005034
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001968:	b090      	sub	sp, #64	@ 0x40
 800196a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001970:	2300      	movs	r3, #0
 8001972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001974:	2300      	movs	r3, #0
 8001976:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197c:	4b59      	ldr	r3, [pc, #356]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d00d      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001988:	2b08      	cmp	r3, #8
 800198a:	f200 80a1 	bhi.w	8001ad0 <HAL_RCC_GetSysClockFreq+0x16c>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x34>
 8001992:	2b04      	cmp	r3, #4
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x3a>
 8001996:	e09b      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b53      	ldr	r3, [pc, #332]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x184>)
 800199a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800199c:	e09b      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199e:	4b53      	ldr	r3, [pc, #332]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x188>)
 80019a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019a2:	e098      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d028      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	2200      	movs	r2, #0
 80019c2:	623b      	str	r3, [r7, #32]
 80019c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019cc:	2100      	movs	r1, #0
 80019ce:	4b47      	ldr	r3, [pc, #284]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x188>)
 80019d0:	fb03 f201 	mul.w	r2, r3, r1
 80019d4:	2300      	movs	r3, #0
 80019d6:	fb00 f303 	mul.w	r3, r0, r3
 80019da:	4413      	add	r3, r2
 80019dc:	4a43      	ldr	r2, [pc, #268]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x188>)
 80019de:	fba0 1202 	umull	r1, r2, r0, r2
 80019e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019e4:	460a      	mov	r2, r1
 80019e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ea:	4413      	add	r3, r2
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f0:	2200      	movs	r2, #0
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	61fa      	str	r2, [r7, #28]
 80019f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019fe:	f7fe fc3f 	bl	8000280 <__aeabi_uldivmod>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4613      	mov	r3, r2
 8001a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a0a:	e053      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	2200      	movs	r2, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	617a      	str	r2, [r7, #20]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a1e:	f04f 0b00 	mov.w	fp, #0
 8001a22:	4652      	mov	r2, sl
 8001a24:	465b      	mov	r3, fp
 8001a26:	f04f 0000 	mov.w	r0, #0
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	0159      	lsls	r1, r3, #5
 8001a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a34:	0150      	lsls	r0, r2, #5
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a3e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a56:	ebb2 0408 	subs.w	r4, r2, r8
 8001a5a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	00eb      	lsls	r3, r5, #3
 8001a68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a6c:	00e2      	lsls	r2, r4, #3
 8001a6e:	4614      	mov	r4, r2
 8001a70:	461d      	mov	r5, r3
 8001a72:	eb14 030a 	adds.w	r3, r4, sl
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	eb45 030b 	adc.w	r3, r5, fp
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	028b      	lsls	r3, r1, #10
 8001a8e:	4621      	mov	r1, r4
 8001a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a94:	4621      	mov	r1, r4
 8001a96:	028a      	lsls	r2, r1, #10
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	60fa      	str	r2, [r7, #12]
 8001aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001aa8:	f7fe fbea 	bl	8000280 <__aeabi_uldivmod>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001ac4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ace:	e002      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3740      	adds	r7, #64	@ 0x40
 8001adc:	46bd      	mov	sp, r7
 8001ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	017d7840 	.word	0x017d7840

08001af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b0c:	f7ff fff0 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0a9b      	lsrs	r3, r3, #10
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	@ (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08005044 	.word	0x08005044

08001b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b34:	f7ff ffdc 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0b5b      	lsrs	r3, r3, #13
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	@ (8001b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08005044 	.word	0x08005044

08001b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	220f      	movs	r2, #15
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <HAL_RCC_GetClockConfig+0x60>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0207 	and.w	r2, r3, #7
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e041      	b.n	8001c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe fe82 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 fa02 	bl	8002004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d001      	beq.n	8001c74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e03c      	b.n	8001cee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1e      	ldr	r2, [pc, #120]	@ (8001cfc <HAL_TIM_Base_Start+0xa0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d018      	beq.n	8001cb8 <HAL_TIM_Base_Start+0x5c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8e:	d013      	beq.n	8001cb8 <HAL_TIM_Base_Start+0x5c>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1a      	ldr	r2, [pc, #104]	@ (8001d00 <HAL_TIM_Base_Start+0xa4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00e      	beq.n	8001cb8 <HAL_TIM_Base_Start+0x5c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a19      	ldr	r2, [pc, #100]	@ (8001d04 <HAL_TIM_Base_Start+0xa8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_TIM_Base_Start+0x5c>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a17      	ldr	r2, [pc, #92]	@ (8001d08 <HAL_TIM_Base_Start+0xac>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <HAL_TIM_Base_Start+0x5c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a16      	ldr	r2, [pc, #88]	@ (8001d0c <HAL_TIM_Base_Start+0xb0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d111      	bne.n	8001cdc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d010      	beq.n	8001cec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cda:	e007      	b.n	8001cec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40000800 	.word	0x40000800
 8001d08:	40000c00 	.word	0x40000c00
 8001d0c:	40014000 	.word	0x40014000

08001d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d001      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e044      	b.n	8001db2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d018      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x6c>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d52:	d013      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x6c>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1a      	ldr	r2, [pc, #104]	@ (8001dc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00e      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x6c>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a19      	ldr	r2, [pc, #100]	@ (8001dc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d009      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x6c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a17      	ldr	r2, [pc, #92]	@ (8001dcc <HAL_TIM_Base_Start_IT+0xbc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d004      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x6c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a16      	ldr	r2, [pc, #88]	@ (8001dd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d111      	bne.n	8001da0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d010      	beq.n	8001db0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9e:	e007      	b.n	8001db0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	40000800 	.word	0x40000800
 8001dcc:	40000c00 	.word	0x40000c00
 8001dd0:	40014000 	.word	0x40014000

08001dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d020      	beq.n	8001e38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01b      	beq.n	8001e38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0202 	mvn.w	r2, #2
 8001e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8d2 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f8c4 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8d5 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d020      	beq.n	8001e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01b      	beq.n	8001e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0204 	mvn.w	r2, #4
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8ac 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f89e 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f8af 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d020      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01b      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0208 	mvn.w	r2, #8
 8001ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f886 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001ebc:	e005      	b.n	8001eca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f878 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f889 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d020      	beq.n	8001f1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01b      	beq.n	8001f1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0210 	mvn.w	r2, #16
 8001eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f860 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001f08:	e005      	b.n	8001f16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f852 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f863 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00c      	beq.n	8001f40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0201 	mvn.w	r2, #1
 8001f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fc92 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00c      	beq.n	8001f64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8e6 	bl	8002130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00c      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f834 	bl	8001ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00c      	beq.n	8001fac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0220 	mvn.w	r2, #32
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8b8 	bl	800211c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3a      	ldr	r2, [pc, #232]	@ (8002100 <TIM_Base_SetConfig+0xfc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00f      	beq.n	800203c <TIM_Base_SetConfig+0x38>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002022:	d00b      	beq.n	800203c <TIM_Base_SetConfig+0x38>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a37      	ldr	r2, [pc, #220]	@ (8002104 <TIM_Base_SetConfig+0x100>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d007      	beq.n	800203c <TIM_Base_SetConfig+0x38>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a36      	ldr	r2, [pc, #216]	@ (8002108 <TIM_Base_SetConfig+0x104>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d003      	beq.n	800203c <TIM_Base_SetConfig+0x38>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a35      	ldr	r2, [pc, #212]	@ (800210c <TIM_Base_SetConfig+0x108>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d108      	bne.n	800204e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2b      	ldr	r2, [pc, #172]	@ (8002100 <TIM_Base_SetConfig+0xfc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01b      	beq.n	800208e <TIM_Base_SetConfig+0x8a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800205c:	d017      	beq.n	800208e <TIM_Base_SetConfig+0x8a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a28      	ldr	r2, [pc, #160]	@ (8002104 <TIM_Base_SetConfig+0x100>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <TIM_Base_SetConfig+0x8a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a27      	ldr	r2, [pc, #156]	@ (8002108 <TIM_Base_SetConfig+0x104>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00f      	beq.n	800208e <TIM_Base_SetConfig+0x8a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a26      	ldr	r2, [pc, #152]	@ (800210c <TIM_Base_SetConfig+0x108>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00b      	beq.n	800208e <TIM_Base_SetConfig+0x8a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a25      	ldr	r2, [pc, #148]	@ (8002110 <TIM_Base_SetConfig+0x10c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <TIM_Base_SetConfig+0x8a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a24      	ldr	r2, [pc, #144]	@ (8002114 <TIM_Base_SetConfig+0x110>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <TIM_Base_SetConfig+0x8a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a23      	ldr	r2, [pc, #140]	@ (8002118 <TIM_Base_SetConfig+0x114>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d108      	bne.n	80020a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002100 <TIM_Base_SetConfig+0xfc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d103      	bne.n	80020d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d105      	bne.n	80020f2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f023 0201 	bic.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]
  }
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40010000 	.word	0x40010000
 8002104:	40000400 	.word	0x40000400
 8002108:	40000800 	.word	0x40000800
 800210c:	40000c00 	.word	0x40000c00
 8002110:	40014000 	.word	0x40014000
 8002114:	40014400 	.word	0x40014400
 8002118:	40014800 	.word	0x40014800

0800211c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e042      	b.n	80021dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fbe6 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2224      	movs	r2, #36	@ 0x24
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f973 	bl	8002474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800219c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	@ 0x28
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b20      	cmp	r3, #32
 8002202:	d175      	bne.n	80022f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_UART_Transmit+0x2c>
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e06e      	b.n	80022f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2221      	movs	r2, #33	@ 0x21
 800221e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002222:	f7fe fd9b 	bl	8000d5c <HAL_GetTick>
 8002226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	88fa      	ldrh	r2, [r7, #6]
 800222c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	88fa      	ldrh	r2, [r7, #6]
 8002232:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800223c:	d108      	bne.n	8002250 <HAL_UART_Transmit+0x6c>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d104      	bne.n	8002250 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	e003      	b.n	8002258 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002258:	e02e      	b.n	80022b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2200      	movs	r2, #0
 8002262:	2180      	movs	r1, #128	@ 0x80
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f848 	bl	80022fa <UART_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e03a      	b.n	80022f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10b      	bne.n	800229a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002290:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	3302      	adds	r3, #2
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	e007      	b.n	80022aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	3301      	adds	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1cb      	bne.n	800225a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2200      	movs	r2, #0
 80022ca:	2140      	movs	r1, #64	@ 0x40
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f814 	bl	80022fa <UART_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e006      	b.n	80022f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e000      	b.n	80022f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
  }
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	4613      	mov	r3, r2
 8002308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800230a:	e03b      	b.n	8002384 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002312:	d037      	beq.n	8002384 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002314:	f7fe fd22 	bl	8000d5c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	6a3a      	ldr	r2, [r7, #32]
 8002320:	429a      	cmp	r2, r3
 8002322:	d302      	bcc.n	800232a <UART_WaitOnFlagUntilTimeout+0x30>
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e03a      	b.n	80023a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d023      	beq.n	8002384 <UART_WaitOnFlagUntilTimeout+0x8a>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b80      	cmp	r3, #128	@ 0x80
 8002340:	d020      	beq.n	8002384 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b40      	cmp	r3, #64	@ 0x40
 8002346:	d01d      	beq.n	8002384 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b08      	cmp	r3, #8
 8002354:	d116      	bne.n	8002384 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f81d 	bl	80023ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2208      	movs	r2, #8
 8002376:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e00f      	b.n	80023a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	4013      	ands	r3, r2
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	429a      	cmp	r2, r3
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d0b4      	beq.n	800230c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b095      	sub	sp, #84	@ 0x54
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	330c      	adds	r3, #12
 80023ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023be:	e853 3f00 	ldrex	r3, [r3]
 80023c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	330c      	adds	r3, #12
 80023d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80023d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023dc:	e841 2300 	strex	r3, r2, [r1]
 80023e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e5      	bne.n	80023b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3314      	adds	r3, #20
 80023ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	e853 3f00 	ldrex	r3, [r3]
 80023f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3314      	adds	r3, #20
 8002406:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002408:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800240a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800240e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002410:	e841 2300 	strex	r3, r2, [r1]
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e5      	bne.n	80023e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	2b01      	cmp	r3, #1
 8002422:	d119      	bne.n	8002458 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	330c      	adds	r3, #12
 800242a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	e853 3f00 	ldrex	r3, [r3]
 8002432:	60bb      	str	r3, [r7, #8]
   return(result);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f023 0310 	bic.w	r3, r3, #16
 800243a:	647b      	str	r3, [r7, #68]	@ 0x44
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	330c      	adds	r3, #12
 8002442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002444:	61ba      	str	r2, [r7, #24]
 8002446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002448:	6979      	ldr	r1, [r7, #20]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	e841 2300 	strex	r3, r2, [r1]
 8002450:	613b      	str	r3, [r7, #16]
   return(result);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e5      	bne.n	8002424 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002466:	bf00      	nop
 8002468:	3754      	adds	r7, #84	@ 0x54
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002478:	b0c0      	sub	sp, #256	@ 0x100
 800247a:	af00      	add	r7, sp, #0
 800247c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002490:	68d9      	ldr	r1, [r3, #12]
 8002492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	ea40 0301 	orr.w	r3, r0, r1
 800249c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80024cc:	f021 010c 	bic.w	r1, r1, #12
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024da:	430b      	orrs	r3, r1
 80024dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80024ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ee:	6999      	ldr	r1, [r3, #24]
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	ea40 0301 	orr.w	r3, r0, r1
 80024fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4b8f      	ldr	r3, [pc, #572]	@ (8002740 <UART_SetConfig+0x2cc>)
 8002504:	429a      	cmp	r2, r3
 8002506:	d005      	beq.n	8002514 <UART_SetConfig+0xa0>
 8002508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b8d      	ldr	r3, [pc, #564]	@ (8002744 <UART_SetConfig+0x2d0>)
 8002510:	429a      	cmp	r2, r3
 8002512:	d104      	bne.n	800251e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002514:	f7ff fb0c 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8002518:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800251c:	e003      	b.n	8002526 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800251e:	f7ff faf3 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002522:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002530:	f040 810c 	bne.w	800274c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002538:	2200      	movs	r2, #0
 800253a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800253e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002542:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002546:	4622      	mov	r2, r4
 8002548:	462b      	mov	r3, r5
 800254a:	1891      	adds	r1, r2, r2
 800254c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800254e:	415b      	adcs	r3, r3
 8002550:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002556:	4621      	mov	r1, r4
 8002558:	eb12 0801 	adds.w	r8, r2, r1
 800255c:	4629      	mov	r1, r5
 800255e:	eb43 0901 	adc.w	r9, r3, r1
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800256e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002576:	4690      	mov	r8, r2
 8002578:	4699      	mov	r9, r3
 800257a:	4623      	mov	r3, r4
 800257c:	eb18 0303 	adds.w	r3, r8, r3
 8002580:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002584:	462b      	mov	r3, r5
 8002586:	eb49 0303 	adc.w	r3, r9, r3
 800258a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800259a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800259e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025a2:	460b      	mov	r3, r1
 80025a4:	18db      	adds	r3, r3, r3
 80025a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80025a8:	4613      	mov	r3, r2
 80025aa:	eb42 0303 	adc.w	r3, r2, r3
 80025ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80025b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025b8:	f7fd fe62 	bl	8000280 <__aeabi_uldivmod>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4b61      	ldr	r3, [pc, #388]	@ (8002748 <UART_SetConfig+0x2d4>)
 80025c2:	fba3 2302 	umull	r2, r3, r3, r2
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	011c      	lsls	r4, r3, #4
 80025ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025ce:	2200      	movs	r2, #0
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80025d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80025dc:	4642      	mov	r2, r8
 80025de:	464b      	mov	r3, r9
 80025e0:	1891      	adds	r1, r2, r2
 80025e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80025e4:	415b      	adcs	r3, r3
 80025e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025ec:	4641      	mov	r1, r8
 80025ee:	eb12 0a01 	adds.w	sl, r2, r1
 80025f2:	4649      	mov	r1, r9
 80025f4:	eb43 0b01 	adc.w	fp, r3, r1
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002604:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800260c:	4692      	mov	sl, r2
 800260e:	469b      	mov	fp, r3
 8002610:	4643      	mov	r3, r8
 8002612:	eb1a 0303 	adds.w	r3, sl, r3
 8002616:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800261a:	464b      	mov	r3, r9
 800261c:	eb4b 0303 	adc.w	r3, fp, r3
 8002620:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002630:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002634:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002638:	460b      	mov	r3, r1
 800263a:	18db      	adds	r3, r3, r3
 800263c:	643b      	str	r3, [r7, #64]	@ 0x40
 800263e:	4613      	mov	r3, r2
 8002640:	eb42 0303 	adc.w	r3, r2, r3
 8002644:	647b      	str	r3, [r7, #68]	@ 0x44
 8002646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800264a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800264e:	f7fd fe17 	bl	8000280 <__aeabi_uldivmod>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4611      	mov	r1, r2
 8002658:	4b3b      	ldr	r3, [pc, #236]	@ (8002748 <UART_SetConfig+0x2d4>)
 800265a:	fba3 2301 	umull	r2, r3, r3, r1
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2264      	movs	r2, #100	@ 0x64
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	1acb      	subs	r3, r1, r3
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800266e:	4b36      	ldr	r3, [pc, #216]	@ (8002748 <UART_SetConfig+0x2d4>)
 8002670:	fba3 2302 	umull	r2, r3, r3, r2
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800267c:	441c      	add	r4, r3
 800267e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002688:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800268c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002690:	4642      	mov	r2, r8
 8002692:	464b      	mov	r3, r9
 8002694:	1891      	adds	r1, r2, r2
 8002696:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002698:	415b      	adcs	r3, r3
 800269a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800269c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026a0:	4641      	mov	r1, r8
 80026a2:	1851      	adds	r1, r2, r1
 80026a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80026a6:	4649      	mov	r1, r9
 80026a8:	414b      	adcs	r3, r1
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026b8:	4659      	mov	r1, fp
 80026ba:	00cb      	lsls	r3, r1, #3
 80026bc:	4651      	mov	r1, sl
 80026be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026c2:	4651      	mov	r1, sl
 80026c4:	00ca      	lsls	r2, r1, #3
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	4642      	mov	r2, r8
 80026ce:	189b      	adds	r3, r3, r2
 80026d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026d4:	464b      	mov	r3, r9
 80026d6:	460a      	mov	r2, r1
 80026d8:	eb42 0303 	adc.w	r3, r2, r3
 80026dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80026ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80026f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80026f4:	460b      	mov	r3, r1
 80026f6:	18db      	adds	r3, r3, r3
 80026f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026fa:	4613      	mov	r3, r2
 80026fc:	eb42 0303 	adc.w	r3, r2, r3
 8002700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002706:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800270a:	f7fd fdb9 	bl	8000280 <__aeabi_uldivmod>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4b0d      	ldr	r3, [pc, #52]	@ (8002748 <UART_SetConfig+0x2d4>)
 8002714:	fba3 1302 	umull	r1, r3, r3, r2
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	2164      	movs	r1, #100	@ 0x64
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	3332      	adds	r3, #50	@ 0x32
 8002726:	4a08      	ldr	r2, [pc, #32]	@ (8002748 <UART_SetConfig+0x2d4>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	f003 0207 	and.w	r2, r3, #7
 8002732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4422      	add	r2, r4
 800273a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800273c:	e106      	b.n	800294c <UART_SetConfig+0x4d8>
 800273e:	bf00      	nop
 8002740:	40011000 	.word	0x40011000
 8002744:	40011400 	.word	0x40011400
 8002748:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800274c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002750:	2200      	movs	r2, #0
 8002752:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002756:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800275a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800275e:	4642      	mov	r2, r8
 8002760:	464b      	mov	r3, r9
 8002762:	1891      	adds	r1, r2, r2
 8002764:	6239      	str	r1, [r7, #32]
 8002766:	415b      	adcs	r3, r3
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
 800276a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800276e:	4641      	mov	r1, r8
 8002770:	1854      	adds	r4, r2, r1
 8002772:	4649      	mov	r1, r9
 8002774:	eb43 0501 	adc.w	r5, r3, r1
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	00eb      	lsls	r3, r5, #3
 8002782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002786:	00e2      	lsls	r2, r4, #3
 8002788:	4614      	mov	r4, r2
 800278a:	461d      	mov	r5, r3
 800278c:	4643      	mov	r3, r8
 800278e:	18e3      	adds	r3, r4, r3
 8002790:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002794:	464b      	mov	r3, r9
 8002796:	eb45 0303 	adc.w	r3, r5, r3
 800279a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800279e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027ba:	4629      	mov	r1, r5
 80027bc:	008b      	lsls	r3, r1, #2
 80027be:	4621      	mov	r1, r4
 80027c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027c4:	4621      	mov	r1, r4
 80027c6:	008a      	lsls	r2, r1, #2
 80027c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027cc:	f7fd fd58 	bl	8000280 <__aeabi_uldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4b60      	ldr	r3, [pc, #384]	@ (8002958 <UART_SetConfig+0x4e4>)
 80027d6:	fba3 2302 	umull	r2, r3, r3, r2
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	011c      	lsls	r4, r3, #4
 80027de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80027f0:	4642      	mov	r2, r8
 80027f2:	464b      	mov	r3, r9
 80027f4:	1891      	adds	r1, r2, r2
 80027f6:	61b9      	str	r1, [r7, #24]
 80027f8:	415b      	adcs	r3, r3
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002800:	4641      	mov	r1, r8
 8002802:	1851      	adds	r1, r2, r1
 8002804:	6139      	str	r1, [r7, #16]
 8002806:	4649      	mov	r1, r9
 8002808:	414b      	adcs	r3, r1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002818:	4659      	mov	r1, fp
 800281a:	00cb      	lsls	r3, r1, #3
 800281c:	4651      	mov	r1, sl
 800281e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002822:	4651      	mov	r1, sl
 8002824:	00ca      	lsls	r2, r1, #3
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	4603      	mov	r3, r0
 800282c:	4642      	mov	r2, r8
 800282e:	189b      	adds	r3, r3, r2
 8002830:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002834:	464b      	mov	r3, r9
 8002836:	460a      	mov	r2, r1
 8002838:	eb42 0303 	adc.w	r3, r2, r3
 800283c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	67bb      	str	r3, [r7, #120]	@ 0x78
 800284a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002858:	4649      	mov	r1, r9
 800285a:	008b      	lsls	r3, r1, #2
 800285c:	4641      	mov	r1, r8
 800285e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002862:	4641      	mov	r1, r8
 8002864:	008a      	lsls	r2, r1, #2
 8002866:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800286a:	f7fd fd09 	bl	8000280 <__aeabi_uldivmod>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4611      	mov	r1, r2
 8002874:	4b38      	ldr	r3, [pc, #224]	@ (8002958 <UART_SetConfig+0x4e4>)
 8002876:	fba3 2301 	umull	r2, r3, r3, r1
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2264      	movs	r2, #100	@ 0x64
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	1acb      	subs	r3, r1, r3
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	3332      	adds	r3, #50	@ 0x32
 8002888:	4a33      	ldr	r2, [pc, #204]	@ (8002958 <UART_SetConfig+0x4e4>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002894:	441c      	add	r4, r3
 8002896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800289a:	2200      	movs	r2, #0
 800289c:	673b      	str	r3, [r7, #112]	@ 0x70
 800289e:	677a      	str	r2, [r7, #116]	@ 0x74
 80028a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028a4:	4642      	mov	r2, r8
 80028a6:	464b      	mov	r3, r9
 80028a8:	1891      	adds	r1, r2, r2
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	415b      	adcs	r3, r3
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028b4:	4641      	mov	r1, r8
 80028b6:	1851      	adds	r1, r2, r1
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	4649      	mov	r1, r9
 80028bc:	414b      	adcs	r3, r1
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028cc:	4659      	mov	r1, fp
 80028ce:	00cb      	lsls	r3, r1, #3
 80028d0:	4651      	mov	r1, sl
 80028d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028d6:	4651      	mov	r1, sl
 80028d8:	00ca      	lsls	r2, r1, #3
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	4642      	mov	r2, r8
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028e6:	464b      	mov	r3, r9
 80028e8:	460a      	mov	r2, r1
 80028ea:	eb42 0303 	adc.w	r3, r2, r3
 80028ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80028fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002908:	4649      	mov	r1, r9
 800290a:	008b      	lsls	r3, r1, #2
 800290c:	4641      	mov	r1, r8
 800290e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002912:	4641      	mov	r1, r8
 8002914:	008a      	lsls	r2, r1, #2
 8002916:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800291a:	f7fd fcb1 	bl	8000280 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4b0d      	ldr	r3, [pc, #52]	@ (8002958 <UART_SetConfig+0x4e4>)
 8002924:	fba3 1302 	umull	r1, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	2164      	movs	r1, #100	@ 0x64
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	3332      	adds	r3, #50	@ 0x32
 8002936:	4a08      	ldr	r2, [pc, #32]	@ (8002958 <UART_SetConfig+0x4e4>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4422      	add	r2, r4
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	bf00      	nop
 800294e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002952:	46bd      	mov	sp, r7
 8002954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002958:	51eb851f 	.word	0x51eb851f

0800295c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800296a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800296e:	2b84      	cmp	r3, #132	@ 0x84
 8002970:	d005      	beq.n	800297e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002972:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4413      	add	r3, r2
 800297a:	3303      	adds	r3, #3
 800297c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002990:	f000 fb72 	bl	8003078 <vTaskStartScheduler>
  
  return osOK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	bd80      	pop	{r7, pc}

0800299a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800299a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299c:	b089      	sub	sp, #36	@ 0x24
 800299e:	af04      	add	r7, sp, #16
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <osThreadCreate+0x54>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01c      	beq.n	80029ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685c      	ldr	r4, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691e      	ldr	r6, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ffc8 	bl	800295c <makeFreeRtosPriority>
 80029cc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029d6:	9202      	str	r2, [sp, #8]
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	9100      	str	r1, [sp, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4632      	mov	r2, r6
 80029e0:	4629      	mov	r1, r5
 80029e2:	4620      	mov	r0, r4
 80029e4:	f000 f8ed 	bl	8002bc2 <xTaskCreateStatic>
 80029e8:	4603      	mov	r3, r0
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	e01c      	b.n	8002a28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685c      	ldr	r4, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029fa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ffaa 	bl	800295c <makeFreeRtosPriority>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	f107 030c 	add.w	r3, r7, #12
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	4632      	mov	r2, r6
 8002a16:	4629      	mov	r1, r5
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f000 f932 	bl	8002c82 <xTaskCreate>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d001      	beq.n	8002a28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a28:	68fb      	ldr	r3, [r7, #12]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <osDelay+0x16>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	e000      	b.n	8002a4a <osDelay+0x18>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fa76 	bl	8002f3c <vTaskDelay>
  
  return osOK;
 8002a50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f103 0208 	add.w	r2, r3, #8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f103 0208 	add.w	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f103 0208 	add.w	r2, r3, #8
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	601a      	str	r2, [r3, #0]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d103      	bne.n	8002b1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e00c      	b.n	8002b36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3308      	adds	r3, #8
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e002      	b.n	8002b2a <vListInsert+0x2e>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d2f6      	bcs.n	8002b24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6892      	ldr	r2, [r2, #8]
 8002b84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6852      	ldr	r2, [r2, #4]
 8002b8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d103      	bne.n	8002ba2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	1e5a      	subs	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b08e      	sub	sp, #56	@ 0x38
 8002bc6:	af04      	add	r7, sp, #16
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10b      	bne.n	8002bee <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	e7fd      	b.n	8002bea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <xTaskCreateStatic+0x4a>
	__asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	61fb      	str	r3, [r7, #28]
}
 8002c06:	bf00      	nop
 8002c08:	bf00      	nop
 8002c0a:	e7fd      	b.n	8002c08 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c0c:	23ac      	movs	r3, #172	@ 0xac
 8002c0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	2bac      	cmp	r3, #172	@ 0xac
 8002c14:	d00b      	beq.n	8002c2e <xTaskCreateStatic+0x6c>
	__asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	61bb      	str	r3, [r7, #24]
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	e7fd      	b.n	8002c2a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d01e      	beq.n	8002c74 <xTaskCreateStatic+0xb2>
 8002c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01b      	beq.n	8002c74 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c44:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c4e:	2300      	movs	r3, #0
 8002c50:	9303      	str	r3, [sp, #12]
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	9302      	str	r3, [sp, #8]
 8002c56:	f107 0314 	add.w	r3, r7, #20
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f850 	bl	8002d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c6e:	f000 f8f7 	bl	8002e60 <prvAddNewTaskToReadyList>
 8002c72:	e001      	b.n	8002c78 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c78:	697b      	ldr	r3, [r7, #20]
	}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3728      	adds	r7, #40	@ 0x28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b08c      	sub	sp, #48	@ 0x30
 8002c86:	af04      	add	r7, sp, #16
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 f816 	bl	8003cc8 <pvPortMalloc>
 8002c9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00e      	beq.n	8002cc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ca4:	20ac      	movs	r0, #172	@ 0xac
 8002ca6:	f001 f80f 	bl	8003cc8 <pvPortMalloc>
 8002caa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cb8:	e005      	b.n	8002cc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f001 f8d2 	bl	8003e64 <vPortFree>
 8002cc0:	e001      	b.n	8002cc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d017      	beq.n	8002cfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cd4:	88fa      	ldrh	r2, [r7, #6]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9303      	str	r3, [sp, #12]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	9302      	str	r3, [sp, #8]
 8002cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f80e 	bl	8002d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cf0:	69f8      	ldr	r0, [r7, #28]
 8002cf2:	f000 f8b5 	bl	8002e60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	e002      	b.n	8002d02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d02:	69bb      	ldr	r3, [r7, #24]
	}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3720      	adds	r7, #32
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	461a      	mov	r2, r3
 8002d24:	21a5      	movs	r1, #165	@ 0xa5
 8002d26:	f001 fad4 	bl	80042d2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d34:	3b01      	subs	r3, #1
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f023 0307 	bic.w	r3, r3, #7
 8002d42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	617b      	str	r3, [r7, #20]
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	e7fd      	b.n	8002d62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01f      	beq.n	8002dac <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	e012      	b.n	8002d98 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	4413      	add	r3, r2
 8002d78:	7819      	ldrb	r1, [r3, #0]
 8002d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	4413      	add	r3, r2
 8002d80:	3334      	adds	r3, #52	@ 0x34
 8002d82:	460a      	mov	r2, r1
 8002d84:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b0f      	cmp	r3, #15
 8002d9c:	d9e9      	bls.n	8002d72 <prvInitialiseNewTask+0x66>
 8002d9e:	e000      	b.n	8002da2 <prvInitialiseNewTask+0x96>
			{
				break;
 8002da0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002daa:	e003      	b.n	8002db4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d901      	bls.n	8002dbe <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dba:	2306      	movs	r3, #6
 8002dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dc8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dcc:	2200      	movs	r2, #0
 8002dce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fe60 	bl	8002a9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	3318      	adds	r3, #24
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fe5b 	bl	8002a9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002de8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dec:	f1c3 0207 	rsb	r2, r3, #7
 8002df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002df8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e12:	3358      	adds	r3, #88	@ 0x58
 8002e14:	224c      	movs	r2, #76	@ 0x4c
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f001 fa5a 	bl	80042d2 <memset>
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e20:	4a0c      	ldr	r2, [pc, #48]	@ (8002e54 <prvInitialiseNewTask+0x148>)
 8002e22:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e26:	4a0c      	ldr	r2, [pc, #48]	@ (8002e58 <prvInitialiseNewTask+0x14c>)
 8002e28:	661a      	str	r2, [r3, #96]	@ 0x60
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e5c <prvInitialiseNewTask+0x150>)
 8002e2e:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	68f9      	ldr	r1, [r7, #12]
 8002e34:	69b8      	ldr	r0, [r7, #24]
 8002e36:	f000 fd33 	bl	80038a0 <pxPortInitialiseStack>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e4c:	bf00      	nop
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20004178 	.word	0x20004178
 8002e58:	200041e0 	.word	0x200041e0
 8002e5c:	20004248 	.word	0x20004248

08002e60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e68:	f000 fe4e 	bl	8003b08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f20 <prvAddNewTaskToReadyList+0xc0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	4a2b      	ldr	r2, [pc, #172]	@ (8002f20 <prvAddNewTaskToReadyList+0xc0>)
 8002e74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e76:	4b2b      	ldr	r3, [pc, #172]	@ (8002f24 <prvAddNewTaskToReadyList+0xc4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e7e:	4a29      	ldr	r2, [pc, #164]	@ (8002f24 <prvAddNewTaskToReadyList+0xc4>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e84:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <prvAddNewTaskToReadyList+0xc0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d110      	bne.n	8002eae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e8c:	f000 fb5c 	bl	8003548 <prvInitialiseTaskLists>
 8002e90:	e00d      	b.n	8002eae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e92:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <prvAddNewTaskToReadyList+0xc8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e9a:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <prvAddNewTaskToReadyList+0xc4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d802      	bhi.n	8002eae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ea8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f24 <prvAddNewTaskToReadyList+0xc4>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002eae:	4b1f      	ldr	r3, [pc, #124]	@ (8002f2c <prvAddNewTaskToReadyList+0xcc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f2c <prvAddNewTaskToReadyList+0xcc>)
 8002eb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f2c <prvAddNewTaskToReadyList+0xcc>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	4b19      	ldr	r3, [pc, #100]	@ (8002f30 <prvAddNewTaskToReadyList+0xd0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	4a18      	ldr	r2, [pc, #96]	@ (8002f30 <prvAddNewTaskToReadyList+0xd0>)
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4a15      	ldr	r2, [pc, #84]	@ (8002f34 <prvAddNewTaskToReadyList+0xd4>)
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f7ff fde3 	bl	8002ab4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002eee:	f000 fe3d 	bl	8003b6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f28 <prvAddNewTaskToReadyList+0xc8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00e      	beq.n	8002f18 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002efa:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <prvAddNewTaskToReadyList+0xc4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d207      	bcs.n	8002f18 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f08:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <prvAddNewTaskToReadyList+0xd8>)
 8002f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	2000051c 	.word	0x2000051c
 8002f24:	2000041c 	.word	0x2000041c
 8002f28:	20000528 	.word	0x20000528
 8002f2c:	20000538 	.word	0x20000538
 8002f30:	20000524 	.word	0x20000524
 8002f34:	20000420 	.word	0x20000420
 8002f38:	e000ed04 	.word	0xe000ed04

08002f3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d018      	beq.n	8002f80 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f4e:	4b14      	ldr	r3, [pc, #80]	@ (8002fa0 <vTaskDelay+0x64>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <vTaskDelay+0x32>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	60bb      	str	r3, [r7, #8]
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	e7fd      	b.n	8002f6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f6e:	f000 f8ef 	bl	8003150 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f72:	2100      	movs	r1, #0
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fc2d 	bl	80037d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f7a:	f000 f8f7 	bl	800316c <xTaskResumeAll>
 8002f7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002f86:	4b07      	ldr	r3, [pc, #28]	@ (8002fa4 <vTaskDelay+0x68>)
 8002f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000544 	.word	0x20000544
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <eTaskGetState+0x2a>
	__asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	60bb      	str	r3, [r7, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	e7fd      	b.n	8002fce <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8002fd2:	4b24      	ldr	r3, [pc, #144]	@ (8003064 <eTaskGetState+0xbc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d102      	bne.n	8002fe2 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e03a      	b.n	8003058 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8002fe2:	f000 fd91 	bl	8003b08 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8002fec:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <eTaskGetState+0xc0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800306c <eTaskGetState+0xc4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8002ff8:	f000 fdb8 	bl	8003b6c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d003      	beq.n	800300c <eTaskGetState+0x64>
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	429a      	cmp	r2, r3
 800300a:	d102      	bne.n	8003012 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800300c:	2302      	movs	r3, #2
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e022      	b.n	8003058 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	4a16      	ldr	r2, [pc, #88]	@ (8003070 <eTaskGetState+0xc8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d112      	bne.n	8003040 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10b      	bne.n	800303a <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d102      	bne.n	8003034 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800302e:	2302      	movs	r3, #2
 8003030:	77fb      	strb	r3, [r7, #31]
 8003032:	e011      	b.n	8003058 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8003034:	2303      	movs	r3, #3
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e00e      	b.n	8003058 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800303a:	2302      	movs	r3, #2
 800303c:	77fb      	strb	r3, [r7, #31]
 800303e:	e00b      	b.n	8003058 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	4a0c      	ldr	r2, [pc, #48]	@ (8003074 <eTaskGetState+0xcc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d002      	beq.n	800304e <eTaskGetState+0xa6>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800304e:	2304      	movs	r3, #4
 8003050:	77fb      	strb	r3, [r7, #31]
 8003052:	e001      	b.n	8003058 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003054:	2301      	movs	r3, #1
 8003056:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003058:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	2000041c 	.word	0x2000041c
 8003068:	200004d4 	.word	0x200004d4
 800306c:	200004d8 	.word	0x200004d8
 8003070:	20000508 	.word	0x20000508
 8003074:	200004f0 	.word	0x200004f0

08003078 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	@ 0x28
 800307c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003086:	463a      	mov	r2, r7
 8003088:	1d39      	adds	r1, r7, #4
 800308a:	f107 0308 	add.w	r3, r7, #8
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fa84 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003094:	6839      	ldr	r1, [r7, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	9202      	str	r2, [sp, #8]
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	2300      	movs	r3, #0
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	2300      	movs	r3, #0
 80030a4:	460a      	mov	r2, r1
 80030a6:	4922      	ldr	r1, [pc, #136]	@ (8003130 <vTaskStartScheduler+0xb8>)
 80030a8:	4822      	ldr	r0, [pc, #136]	@ (8003134 <vTaskStartScheduler+0xbc>)
 80030aa:	f7ff fd8a 	bl	8002bc2 <xTaskCreateStatic>
 80030ae:	4603      	mov	r3, r0
 80030b0:	4a21      	ldr	r2, [pc, #132]	@ (8003138 <vTaskStartScheduler+0xc0>)
 80030b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030b4:	4b20      	ldr	r3, [pc, #128]	@ (8003138 <vTaskStartScheduler+0xc0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030bc:	2301      	movs	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	e001      	b.n	80030c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d11d      	bne.n	8003108 <vTaskStartScheduler+0x90>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	613b      	str	r3, [r7, #16]
}
 80030de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030e0:	4b16      	ldr	r3, [pc, #88]	@ (800313c <vTaskStartScheduler+0xc4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3358      	adds	r3, #88	@ 0x58
 80030e6:	4a16      	ldr	r2, [pc, #88]	@ (8003140 <vTaskStartScheduler+0xc8>)
 80030e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030ea:	4b16      	ldr	r3, [pc, #88]	@ (8003144 <vTaskStartScheduler+0xcc>)
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295
 80030f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030f2:	4b15      	ldr	r3, [pc, #84]	@ (8003148 <vTaskStartScheduler+0xd0>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030f8:	4b14      	ldr	r3, [pc, #80]	@ (800314c <vTaskStartScheduler+0xd4>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80030fe:	f7fd fa37 	bl	8000570 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003102:	f000 fc5d 	bl	80039c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003106:	e00f      	b.n	8003128 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d10b      	bne.n	8003128 <vTaskStartScheduler+0xb0>
	__asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	60fb      	str	r3, [r7, #12]
}
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	e7fd      	b.n	8003124 <vTaskStartScheduler+0xac>
}
 8003128:	bf00      	nop
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	08005004 	.word	0x08005004
 8003134:	08003519 	.word	0x08003519
 8003138:	20000540 	.word	0x20000540
 800313c:	2000041c 	.word	0x2000041c
 8003140:	2000001c 	.word	0x2000001c
 8003144:	2000053c 	.word	0x2000053c
 8003148:	20000528 	.word	0x20000528
 800314c:	20000520 	.word	0x20000520

08003150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003154:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <vTaskSuspendAll+0x18>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	4a03      	ldr	r2, [pc, #12]	@ (8003168 <vTaskSuspendAll+0x18>)
 800315c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	20000544 	.word	0x20000544

0800316c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800317a:	4b42      	ldr	r3, [pc, #264]	@ (8003284 <xTaskResumeAll+0x118>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <xTaskResumeAll+0x2e>
	__asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	603b      	str	r3, [r7, #0]
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	e7fd      	b.n	8003196 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800319a:	f000 fcb5 	bl	8003b08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800319e:	4b39      	ldr	r3, [pc, #228]	@ (8003284 <xTaskResumeAll+0x118>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	4a37      	ldr	r2, [pc, #220]	@ (8003284 <xTaskResumeAll+0x118>)
 80031a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031a8:	4b36      	ldr	r3, [pc, #216]	@ (8003284 <xTaskResumeAll+0x118>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d161      	bne.n	8003274 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031b0:	4b35      	ldr	r3, [pc, #212]	@ (8003288 <xTaskResumeAll+0x11c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d05d      	beq.n	8003274 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031b8:	e02e      	b.n	8003218 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ba:	4b34      	ldr	r3, [pc, #208]	@ (800328c <xTaskResumeAll+0x120>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3318      	adds	r3, #24
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fcd1 	bl	8002b6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fccc 	bl	8002b6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	2201      	movs	r2, #1
 80031dc:	409a      	lsls	r2, r3
 80031de:	4b2c      	ldr	r3, [pc, #176]	@ (8003290 <xTaskResumeAll+0x124>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003290 <xTaskResumeAll+0x124>)
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4a27      	ldr	r2, [pc, #156]	@ (8003294 <xTaskResumeAll+0x128>)
 80031f6:	441a      	add	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f7ff fc58 	bl	8002ab4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003208:	4b23      	ldr	r3, [pc, #140]	@ (8003298 <xTaskResumeAll+0x12c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003212:	4b22      	ldr	r3, [pc, #136]	@ (800329c <xTaskResumeAll+0x130>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003218:	4b1c      	ldr	r3, [pc, #112]	@ (800328c <xTaskResumeAll+0x120>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1cc      	bne.n	80031ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003226:	f000 fab5 	bl	8003794 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800322a:	4b1d      	ldr	r3, [pc, #116]	@ (80032a0 <xTaskResumeAll+0x134>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003236:	f000 f837 	bl	80032a8 <xTaskIncrementTick>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003240:	4b16      	ldr	r3, [pc, #88]	@ (800329c <xTaskResumeAll+0x130>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3b01      	subs	r3, #1
 800324a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f1      	bne.n	8003236 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003252:	4b13      	ldr	r3, [pc, #76]	@ (80032a0 <xTaskResumeAll+0x134>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003258:	4b10      	ldr	r3, [pc, #64]	@ (800329c <xTaskResumeAll+0x130>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003260:	2301      	movs	r3, #1
 8003262:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003264:	4b0f      	ldr	r3, [pc, #60]	@ (80032a4 <xTaskResumeAll+0x138>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003274:	f000 fc7a 	bl	8003b6c <vPortExitCritical>

	return xAlreadyYielded;
 8003278:	68bb      	ldr	r3, [r7, #8]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000544 	.word	0x20000544
 8003288:	2000051c 	.word	0x2000051c
 800328c:	200004dc 	.word	0x200004dc
 8003290:	20000524 	.word	0x20000524
 8003294:	20000420 	.word	0x20000420
 8003298:	2000041c 	.word	0x2000041c
 800329c:	20000530 	.word	0x20000530
 80032a0:	2000052c 	.word	0x2000052c
 80032a4:	e000ed04 	.word	0xe000ed04

080032a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032b2:	4b4f      	ldr	r3, [pc, #316]	@ (80033f0 <xTaskIncrementTick+0x148>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f040 808f 	bne.w	80033da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032bc:	4b4d      	ldr	r3, [pc, #308]	@ (80033f4 <xTaskIncrementTick+0x14c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032c4:	4a4b      	ldr	r2, [pc, #300]	@ (80033f4 <xTaskIncrementTick+0x14c>)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d121      	bne.n	8003314 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80032d0:	4b49      	ldr	r3, [pc, #292]	@ (80033f8 <xTaskIncrementTick+0x150>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	603b      	str	r3, [r7, #0]
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	e7fd      	b.n	80032ee <xTaskIncrementTick+0x46>
 80032f2:	4b41      	ldr	r3, [pc, #260]	@ (80033f8 <xTaskIncrementTick+0x150>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	4b40      	ldr	r3, [pc, #256]	@ (80033fc <xTaskIncrementTick+0x154>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a3e      	ldr	r2, [pc, #248]	@ (80033f8 <xTaskIncrementTick+0x150>)
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4a3e      	ldr	r2, [pc, #248]	@ (80033fc <xTaskIncrementTick+0x154>)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4b3e      	ldr	r3, [pc, #248]	@ (8003400 <xTaskIncrementTick+0x158>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3301      	adds	r3, #1
 800330c:	4a3c      	ldr	r2, [pc, #240]	@ (8003400 <xTaskIncrementTick+0x158>)
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	f000 fa40 	bl	8003794 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003314:	4b3b      	ldr	r3, [pc, #236]	@ (8003404 <xTaskIncrementTick+0x15c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	429a      	cmp	r2, r3
 800331c:	d348      	bcc.n	80033b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800331e:	4b36      	ldr	r3, [pc, #216]	@ (80033f8 <xTaskIncrementTick+0x150>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d104      	bne.n	8003332 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003328:	4b36      	ldr	r3, [pc, #216]	@ (8003404 <xTaskIncrementTick+0x15c>)
 800332a:	f04f 32ff 	mov.w	r2, #4294967295
 800332e:	601a      	str	r2, [r3, #0]
					break;
 8003330:	e03e      	b.n	80033b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003332:	4b31      	ldr	r3, [pc, #196]	@ (80033f8 <xTaskIncrementTick+0x150>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d203      	bcs.n	8003352 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800334a:	4a2e      	ldr	r2, [pc, #184]	@ (8003404 <xTaskIncrementTick+0x15c>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003350:	e02e      	b.n	80033b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3304      	adds	r3, #4
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fc09 	bl	8002b6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d004      	beq.n	800336e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	3318      	adds	r3, #24
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fc00 	bl	8002b6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	2201      	movs	r2, #1
 8003374:	409a      	lsls	r2, r3
 8003376:	4b24      	ldr	r3, [pc, #144]	@ (8003408 <xTaskIncrementTick+0x160>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4313      	orrs	r3, r2
 800337c:	4a22      	ldr	r2, [pc, #136]	@ (8003408 <xTaskIncrementTick+0x160>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4a1f      	ldr	r2, [pc, #124]	@ (800340c <xTaskIncrementTick+0x164>)
 800338e:	441a      	add	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7ff fb8c 	bl	8002ab4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003410 <xTaskIncrementTick+0x168>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d3b9      	bcc.n	800331e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80033aa:	2301      	movs	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ae:	e7b6      	b.n	800331e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033b0:	4b17      	ldr	r3, [pc, #92]	@ (8003410 <xTaskIncrementTick+0x168>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b6:	4915      	ldr	r1, [pc, #84]	@ (800340c <xTaskIncrementTick+0x164>)
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d901      	bls.n	80033cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80033c8:	2301      	movs	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80033cc:	4b11      	ldr	r3, [pc, #68]	@ (8003414 <xTaskIncrementTick+0x16c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e004      	b.n	80033e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80033da:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <xTaskIncrementTick+0x170>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003418 <xTaskIncrementTick+0x170>)
 80033e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80033e4:	697b      	ldr	r3, [r7, #20]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000544 	.word	0x20000544
 80033f4:	20000520 	.word	0x20000520
 80033f8:	200004d4 	.word	0x200004d4
 80033fc:	200004d8 	.word	0x200004d8
 8003400:	20000534 	.word	0x20000534
 8003404:	2000053c 	.word	0x2000053c
 8003408:	20000524 	.word	0x20000524
 800340c:	20000420 	.word	0x20000420
 8003410:	2000041c 	.word	0x2000041c
 8003414:	20000530 	.word	0x20000530
 8003418:	2000052c 	.word	0x2000052c

0800341c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003422:	4b35      	ldr	r3, [pc, #212]	@ (80034f8 <vTaskSwitchContext+0xdc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800342a:	4b34      	ldr	r3, [pc, #208]	@ (80034fc <vTaskSwitchContext+0xe0>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003430:	e05e      	b.n	80034f0 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8003432:	4b32      	ldr	r3, [pc, #200]	@ (80034fc <vTaskSwitchContext+0xe0>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003438:	f7fd f8a4 	bl	8000584 <getRunTimeCounterValue>
 800343c:	4603      	mov	r3, r0
 800343e:	4a30      	ldr	r2, [pc, #192]	@ (8003500 <vTaskSwitchContext+0xe4>)
 8003440:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8003442:	4b2f      	ldr	r3, [pc, #188]	@ (8003500 <vTaskSwitchContext+0xe4>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b2f      	ldr	r3, [pc, #188]	@ (8003504 <vTaskSwitchContext+0xe8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d909      	bls.n	8003462 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800344e:	4b2e      	ldr	r3, [pc, #184]	@ (8003508 <vTaskSwitchContext+0xec>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003454:	4a2a      	ldr	r2, [pc, #168]	@ (8003500 <vTaskSwitchContext+0xe4>)
 8003456:	6810      	ldr	r0, [r2, #0]
 8003458:	4a2a      	ldr	r2, [pc, #168]	@ (8003504 <vTaskSwitchContext+0xe8>)
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	1a82      	subs	r2, r0, r2
 800345e:	440a      	add	r2, r1
 8003460:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8003462:	4b27      	ldr	r3, [pc, #156]	@ (8003500 <vTaskSwitchContext+0xe4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a27      	ldr	r2, [pc, #156]	@ (8003504 <vTaskSwitchContext+0xe8>)
 8003468:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346a:	4b28      	ldr	r3, [pc, #160]	@ (800350c <vTaskSwitchContext+0xf0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003478:	7afb      	ldrb	r3, [r7, #11]
 800347a:	f1c3 031f 	rsb	r3, r3, #31
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	4923      	ldr	r1, [pc, #140]	@ (8003510 <vTaskSwitchContext+0xf4>)
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <vTaskSwitchContext+0x90>
	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	607b      	str	r3, [r7, #4]
}
 80034a6:	bf00      	nop
 80034a8:	bf00      	nop
 80034aa:	e7fd      	b.n	80034a8 <vTaskSwitchContext+0x8c>
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4a16      	ldr	r2, [pc, #88]	@ (8003510 <vTaskSwitchContext+0xf4>)
 80034b8:	4413      	add	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	3308      	adds	r3, #8
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d104      	bne.n	80034dc <vTaskSwitchContext+0xc0>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	4a09      	ldr	r2, [pc, #36]	@ (8003508 <vTaskSwitchContext+0xec>)
 80034e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034e6:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <vTaskSwitchContext+0xec>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3358      	adds	r3, #88	@ 0x58
 80034ec:	4a09      	ldr	r2, [pc, #36]	@ (8003514 <vTaskSwitchContext+0xf8>)
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000544 	.word	0x20000544
 80034fc:	20000530 	.word	0x20000530
 8003500:	2000054c 	.word	0x2000054c
 8003504:	20000548 	.word	0x20000548
 8003508:	2000041c 	.word	0x2000041c
 800350c:	20000524 	.word	0x20000524
 8003510:	20000420 	.word	0x20000420
 8003514:	2000001c 	.word	0x2000001c

08003518 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003520:	f000 f852 	bl	80035c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <prvIdleTask+0x28>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d9f9      	bls.n	8003520 <prvIdleTask+0x8>
			{
				taskYIELD();
 800352c:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <prvIdleTask+0x2c>)
 800352e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800353c:	e7f0      	b.n	8003520 <prvIdleTask+0x8>
 800353e:	bf00      	nop
 8003540:	20000420 	.word	0x20000420
 8003544:	e000ed04 	.word	0xe000ed04

08003548 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	e00c      	b.n	800356e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4a12      	ldr	r2, [pc, #72]	@ (80035a8 <prvInitialiseTaskLists+0x60>)
 8003560:	4413      	add	r3, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fa79 	bl	8002a5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3301      	adds	r3, #1
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b06      	cmp	r3, #6
 8003572:	d9ef      	bls.n	8003554 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003574:	480d      	ldr	r0, [pc, #52]	@ (80035ac <prvInitialiseTaskLists+0x64>)
 8003576:	f7ff fa70 	bl	8002a5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800357a:	480d      	ldr	r0, [pc, #52]	@ (80035b0 <prvInitialiseTaskLists+0x68>)
 800357c:	f7ff fa6d 	bl	8002a5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003580:	480c      	ldr	r0, [pc, #48]	@ (80035b4 <prvInitialiseTaskLists+0x6c>)
 8003582:	f7ff fa6a 	bl	8002a5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003586:	480c      	ldr	r0, [pc, #48]	@ (80035b8 <prvInitialiseTaskLists+0x70>)
 8003588:	f7ff fa67 	bl	8002a5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800358c:	480b      	ldr	r0, [pc, #44]	@ (80035bc <prvInitialiseTaskLists+0x74>)
 800358e:	f7ff fa64 	bl	8002a5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003592:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <prvInitialiseTaskLists+0x78>)
 8003594:	4a05      	ldr	r2, [pc, #20]	@ (80035ac <prvInitialiseTaskLists+0x64>)
 8003596:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003598:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <prvInitialiseTaskLists+0x7c>)
 800359a:	4a05      	ldr	r2, [pc, #20]	@ (80035b0 <prvInitialiseTaskLists+0x68>)
 800359c:	601a      	str	r2, [r3, #0]
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000420 	.word	0x20000420
 80035ac:	200004ac 	.word	0x200004ac
 80035b0:	200004c0 	.word	0x200004c0
 80035b4:	200004dc 	.word	0x200004dc
 80035b8:	200004f0 	.word	0x200004f0
 80035bc:	20000508 	.word	0x20000508
 80035c0:	200004d4 	.word	0x200004d4
 80035c4:	200004d8 	.word	0x200004d8

080035c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035ce:	e019      	b.n	8003604 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80035d0:	f000 fa9a 	bl	8003b08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d4:	4b10      	ldr	r3, [pc, #64]	@ (8003618 <prvCheckTasksWaitingTermination+0x50>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fac4 	bl	8002b6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <prvCheckTasksWaitingTermination+0x54>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a0b      	ldr	r2, [pc, #44]	@ (800361c <prvCheckTasksWaitingTermination+0x54>)
 80035ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80035f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <prvCheckTasksWaitingTermination+0x58>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <prvCheckTasksWaitingTermination+0x58>)
 80035f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80035fa:	f000 fab7 	bl	8003b6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f892 	bl	8003728 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003604:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <prvCheckTasksWaitingTermination+0x58>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e1      	bne.n	80035d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200004f0 	.word	0x200004f0
 800361c:	2000051c 	.word	0x2000051c
 8003620:	20000504 	.word	0x20000504

08003624 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <vTaskGetInfo+0x1a>
 8003638:	4b2c      	ldr	r3, [pc, #176]	@ (80036ec <vTaskGetInfo+0xc8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	e000      	b.n	8003640 <vTaskGetInfo+0x1c>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d01a      	beq.n	80036b6 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8003680:	4b1a      	ldr	r3, [pc, #104]	@ (80036ec <vTaskGetInfo+0xc8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	429a      	cmp	r2, r3
 8003688:	d103      	bne.n	8003692 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2200      	movs	r2, #0
 800368e:	731a      	strb	r2, [r3, #12]
 8003690:	e018      	b.n	80036c4 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	2b03      	cmp	r3, #3
 800369c:	d112      	bne.n	80036c4 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800369e:	f7ff fd57 	bl	8003150 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2202      	movs	r2, #2
 80036ae:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80036b0:	f7ff fd5c 	bl	800316c <xTaskResumeAll>
 80036b4:	e006      	b.n	80036c4 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f7ff fc76 	bl	8002fa8 <eTaskGetState>
 80036bc:	4603      	mov	r3, r0
 80036be:	461a      	mov	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f80e 	bl	80036f0 <prvTaskCheckFreeStackSpace>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461a      	mov	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80036dc:	e002      	b.n	80036e4 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2200      	movs	r2, #0
 80036e2:	841a      	strh	r2, [r3, #32]
	}
 80036e4:	bf00      	nop
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	2000041c 	.word	0x2000041c

080036f0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80036fc:	e005      	b.n	800370a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3301      	adds	r3, #1
 8003702:	607b      	str	r3, [r7, #4]
			ulCount++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3301      	adds	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2ba5      	cmp	r3, #165	@ 0xa5
 8003710:	d0f5      	beq.n	80036fe <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	b29b      	uxth	r3, r3
	}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3358      	adds	r3, #88	@ 0x58
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fde5 	bl	8004304 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8003740:	2b00      	cmp	r3, #0
 8003742:	d108      	bne.n	8003756 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fb8b 	bl	8003e64 <vPortFree>
				vPortFree( pxTCB );
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fb88 	bl	8003e64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003754:	e019      	b.n	800378a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800375c:	2b01      	cmp	r3, #1
 800375e:	d103      	bne.n	8003768 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fb7f 	bl	8003e64 <vPortFree>
	}
 8003766:	e010      	b.n	800378a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800376e:	2b02      	cmp	r3, #2
 8003770:	d00b      	beq.n	800378a <prvDeleteTCB+0x62>
	__asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	60fb      	str	r3, [r7, #12]
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	e7fd      	b.n	8003786 <prvDeleteTCB+0x5e>
	}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800379a:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <prvResetNextTaskUnblockTime+0x38>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d104      	bne.n	80037ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037a4:	4b0a      	ldr	r3, [pc, #40]	@ (80037d0 <prvResetNextTaskUnblockTime+0x3c>)
 80037a6:	f04f 32ff 	mov.w	r2, #4294967295
 80037aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037ac:	e008      	b.n	80037c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ae:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <prvResetNextTaskUnblockTime+0x38>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a04      	ldr	r2, [pc, #16]	@ (80037d0 <prvResetNextTaskUnblockTime+0x3c>)
 80037be:	6013      	str	r3, [r2, #0]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	200004d4 	.word	0x200004d4
 80037d0:	2000053c 	.word	0x2000053c

080037d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037de:	4b29      	ldr	r3, [pc, #164]	@ (8003884 <prvAddCurrentTaskToDelayedList+0xb0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037e4:	4b28      	ldr	r3, [pc, #160]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff f9bf 	bl	8002b6e <uxListRemove>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037f6:	4b24      	ldr	r3, [pc, #144]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	2201      	movs	r2, #1
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43da      	mvns	r2, r3
 8003804:	4b21      	ldr	r3, [pc, #132]	@ (800388c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4013      	ands	r3, r2
 800380a:	4a20      	ldr	r2, [pc, #128]	@ (800388c <prvAddCurrentTaskToDelayedList+0xb8>)
 800380c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d10a      	bne.n	800382c <prvAddCurrentTaskToDelayedList+0x58>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800381c:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3304      	adds	r3, #4
 8003822:	4619      	mov	r1, r3
 8003824:	481a      	ldr	r0, [pc, #104]	@ (8003890 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003826:	f7ff f945 	bl	8002ab4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800382a:	e026      	b.n	800387a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003834:	4b14      	ldr	r3, [pc, #80]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	429a      	cmp	r2, r3
 8003842:	d209      	bcs.n	8003858 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003844:	4b13      	ldr	r3, [pc, #76]	@ (8003894 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4b0f      	ldr	r3, [pc, #60]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3304      	adds	r3, #4
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f7ff f953 	bl	8002afc <vListInsert>
}
 8003856:	e010      	b.n	800387a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003858:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <prvAddCurrentTaskToDelayedList+0xc4>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3304      	adds	r3, #4
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f7ff f949 	bl	8002afc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800386a:	4b0c      	ldr	r3, [pc, #48]	@ (800389c <prvAddCurrentTaskToDelayedList+0xc8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	429a      	cmp	r2, r3
 8003872:	d202      	bcs.n	800387a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003874:	4a09      	ldr	r2, [pc, #36]	@ (800389c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	6013      	str	r3, [r2, #0]
}
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000520 	.word	0x20000520
 8003888:	2000041c 	.word	0x2000041c
 800388c:	20000524 	.word	0x20000524
 8003890:	20000508 	.word	0x20000508
 8003894:	200004d8 	.word	0x200004d8
 8003898:	200004d4 	.word	0x200004d4
 800389c:	2000053c 	.word	0x2000053c

080038a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3b04      	subs	r3, #4
 80038b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3b04      	subs	r3, #4
 80038be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f023 0201 	bic.w	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3b04      	subs	r3, #4
 80038ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003904 <pxPortInitialiseStack+0x64>)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3b14      	subs	r3, #20
 80038da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3b04      	subs	r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f06f 0202 	mvn.w	r2, #2
 80038ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3b20      	subs	r3, #32
 80038f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038f6:	68fb      	ldr	r3, [r7, #12]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	08003909 	.word	0x08003909

08003908 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003912:	4b13      	ldr	r3, [pc, #76]	@ (8003960 <prvTaskExitError+0x58>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d00b      	beq.n	8003934 <prvTaskExitError+0x2c>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60fb      	str	r3, [r7, #12]
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	e7fd      	b.n	8003930 <prvTaskExitError+0x28>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	60bb      	str	r3, [r7, #8]
}
 8003946:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003948:	bf00      	nop
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0fc      	beq.n	800394a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	2000000c 	.word	0x2000000c
	...

08003970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003970:	4b07      	ldr	r3, [pc, #28]	@ (8003990 <pxCurrentTCBConst2>)
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	6808      	ldr	r0, [r1, #0]
 8003976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397a:	f380 8809 	msr	PSP, r0
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f04f 0000 	mov.w	r0, #0
 8003986:	f380 8811 	msr	BASEPRI, r0
 800398a:	4770      	bx	lr
 800398c:	f3af 8000 	nop.w

08003990 <pxCurrentTCBConst2>:
 8003990:	2000041c 	.word	0x2000041c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop

08003998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003998:	4808      	ldr	r0, [pc, #32]	@ (80039bc <prvPortStartFirstTask+0x24>)
 800399a:	6800      	ldr	r0, [r0, #0]
 800399c:	6800      	ldr	r0, [r0, #0]
 800399e:	f380 8808 	msr	MSP, r0
 80039a2:	f04f 0000 	mov.w	r0, #0
 80039a6:	f380 8814 	msr	CONTROL, r0
 80039aa:	b662      	cpsie	i
 80039ac:	b661      	cpsie	f
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	df00      	svc	0
 80039b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80039ba:	bf00      	nop
 80039bc:	e000ed08 	.word	0xe000ed08

080039c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80039c6:	4b47      	ldr	r3, [pc, #284]	@ (8003ae4 <xPortStartScheduler+0x124>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a47      	ldr	r2, [pc, #284]	@ (8003ae8 <xPortStartScheduler+0x128>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d10b      	bne.n	80039e8 <xPortStartScheduler+0x28>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	613b      	str	r3, [r7, #16]
}
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	e7fd      	b.n	80039e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80039e8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ae4 <xPortStartScheduler+0x124>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a3f      	ldr	r2, [pc, #252]	@ (8003aec <xPortStartScheduler+0x12c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d10b      	bne.n	8003a0a <xPortStartScheduler+0x4a>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	60fb      	str	r3, [r7, #12]
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	e7fd      	b.n	8003a06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a0a:	4b39      	ldr	r3, [pc, #228]	@ (8003af0 <xPortStartScheduler+0x130>)
 8003a0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	22ff      	movs	r2, #255	@ 0xff
 8003a1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	4b31      	ldr	r3, [pc, #196]	@ (8003af4 <xPortStartScheduler+0x134>)
 8003a30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a32:	4b31      	ldr	r3, [pc, #196]	@ (8003af8 <xPortStartScheduler+0x138>)
 8003a34:	2207      	movs	r2, #7
 8003a36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a38:	e009      	b.n	8003a4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003af8 <xPortStartScheduler+0x138>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	4a2d      	ldr	r2, [pc, #180]	@ (8003af8 <xPortStartScheduler+0x138>)
 8003a42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a56:	2b80      	cmp	r3, #128	@ 0x80
 8003a58:	d0ef      	beq.n	8003a3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a5a:	4b27      	ldr	r3, [pc, #156]	@ (8003af8 <xPortStartScheduler+0x138>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f1c3 0307 	rsb	r3, r3, #7
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d00b      	beq.n	8003a7e <xPortStartScheduler+0xbe>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	60bb      	str	r3, [r7, #8]
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	e7fd      	b.n	8003a7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <xPortStartScheduler+0x138>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	4a1c      	ldr	r2, [pc, #112]	@ (8003af8 <xPortStartScheduler+0x138>)
 8003a86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a88:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <xPortStartScheduler+0x138>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a90:	4a19      	ldr	r2, [pc, #100]	@ (8003af8 <xPortStartScheduler+0x138>)
 8003a92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a9c:	4b17      	ldr	r3, [pc, #92]	@ (8003afc <xPortStartScheduler+0x13c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a16      	ldr	r2, [pc, #88]	@ (8003afc <xPortStartScheduler+0x13c>)
 8003aa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003aa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003aa8:	4b14      	ldr	r3, [pc, #80]	@ (8003afc <xPortStartScheduler+0x13c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a13      	ldr	r2, [pc, #76]	@ (8003afc <xPortStartScheduler+0x13c>)
 8003aae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003ab2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ab4:	f000 f8da 	bl	8003c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ab8:	4b11      	ldr	r3, [pc, #68]	@ (8003b00 <xPortStartScheduler+0x140>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003abe:	f000 f8f9 	bl	8003cb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ac2:	4b10      	ldr	r3, [pc, #64]	@ (8003b04 <xPortStartScheduler+0x144>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8003b04 <xPortStartScheduler+0x144>)
 8003ac8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003acc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ace:	f7ff ff63 	bl	8003998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ad2:	f7ff fca3 	bl	800341c <vTaskSwitchContext>
	prvTaskExitError();
 8003ad6:	f7ff ff17 	bl	8003908 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	e000ed00 	.word	0xe000ed00
 8003ae8:	410fc271 	.word	0x410fc271
 8003aec:	410fc270 	.word	0x410fc270
 8003af0:	e000e400 	.word	0xe000e400
 8003af4:	20000550 	.word	0x20000550
 8003af8:	20000554 	.word	0x20000554
 8003afc:	e000ed20 	.word	0xe000ed20
 8003b00:	2000000c 	.word	0x2000000c
 8003b04:	e000ef34 	.word	0xe000ef34

08003b08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	607b      	str	r3, [r7, #4]
}
 8003b20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b22:	4b10      	ldr	r3, [pc, #64]	@ (8003b64 <vPortEnterCritical+0x5c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3301      	adds	r3, #1
 8003b28:	4a0e      	ldr	r2, [pc, #56]	@ (8003b64 <vPortEnterCritical+0x5c>)
 8003b2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <vPortEnterCritical+0x5c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d110      	bne.n	8003b56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b34:	4b0c      	ldr	r3, [pc, #48]	@ (8003b68 <vPortEnterCritical+0x60>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <vPortEnterCritical+0x4e>
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	603b      	str	r3, [r7, #0]
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	e7fd      	b.n	8003b52 <vPortEnterCritical+0x4a>
	}
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b72:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <vPortExitCritical+0x50>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <vPortExitCritical+0x26>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	607b      	str	r3, [r7, #4]
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	e7fd      	b.n	8003b8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b92:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <vPortExitCritical+0x50>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	4a08      	ldr	r2, [pc, #32]	@ (8003bbc <vPortExitCritical+0x50>)
 8003b9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b9c:	4b07      	ldr	r3, [pc, #28]	@ (8003bbc <vPortExitCritical+0x50>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <vPortExitCritical+0x44>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	2000000c 	.word	0x2000000c

08003bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003bc0:	f3ef 8009 	mrs	r0, PSP
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	4b15      	ldr	r3, [pc, #84]	@ (8003c20 <pxCurrentTCBConst>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	f01e 0f10 	tst.w	lr, #16
 8003bd0:	bf08      	it	eq
 8003bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bda:	6010      	str	r0, [r2, #0]
 8003bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003be0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003be4:	f380 8811 	msr	BASEPRI, r0
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f7ff fc14 	bl	800341c <vTaskSwitchContext>
 8003bf4:	f04f 0000 	mov.w	r0, #0
 8003bf8:	f380 8811 	msr	BASEPRI, r0
 8003bfc:	bc09      	pop	{r0, r3}
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	6808      	ldr	r0, [r1, #0]
 8003c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c06:	f01e 0f10 	tst.w	lr, #16
 8003c0a:	bf08      	it	eq
 8003c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c10:	f380 8809 	msr	PSP, r0
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	f3af 8000 	nop.w

08003c20 <pxCurrentTCBConst>:
 8003c20:	2000041c 	.word	0x2000041c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop

08003c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	607b      	str	r3, [r7, #4]
}
 8003c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c42:	f7ff fb31 	bl	80032a8 <xTaskIncrementTick>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <SysTick_Handler+0x40>)
 8003c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	2300      	movs	r3, #0
 8003c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	f383 8811 	msr	BASEPRI, r3
}
 8003c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <vPortSetupTimerInterrupt+0x34>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <vPortSetupTimerInterrupt+0x38>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca8 <vPortSetupTimerInterrupt+0x3c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0a      	ldr	r2, [pc, #40]	@ (8003cac <vPortSetupTimerInterrupt+0x40>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	4a09      	ldr	r2, [pc, #36]	@ (8003cb0 <vPortSetupTimerInterrupt+0x44>)
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c8e:	4b04      	ldr	r3, [pc, #16]	@ (8003ca0 <vPortSetupTimerInterrupt+0x34>)
 8003c90:	2207      	movs	r2, #7
 8003c92:	601a      	str	r2, [r3, #0]
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e000e010 	.word	0xe000e010
 8003ca4:	e000e018 	.word	0xe000e018
 8003ca8:	20000000 	.word	0x20000000
 8003cac:	10624dd3 	.word	0x10624dd3
 8003cb0:	e000e014 	.word	0xe000e014

08003cb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003cb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003cc4 <vPortEnableVFP+0x10>
 8003cb8:	6801      	ldr	r1, [r0, #0]
 8003cba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003cbe:	6001      	str	r1, [r0, #0]
 8003cc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003cc2:	bf00      	nop
 8003cc4:	e000ed88 	.word	0xe000ed88

08003cc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	@ 0x28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003cd4:	f7ff fa3c 	bl	8003150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003cd8:	4b5c      	ldr	r3, [pc, #368]	@ (8003e4c <pvPortMalloc+0x184>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ce0:	f000 f924 	bl	8003f2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8003e50 <pvPortMalloc+0x188>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f040 8095 	bne.w	8003e1c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01e      	beq.n	8003d36 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d015      	beq.n	8003d36 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f023 0307 	bic.w	r3, r3, #7
 8003d10:	3308      	adds	r3, #8
 8003d12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00b      	beq.n	8003d36 <pvPortMalloc+0x6e>
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	617b      	str	r3, [r7, #20]
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	e7fd      	b.n	8003d32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d06f      	beq.n	8003e1c <pvPortMalloc+0x154>
 8003d3c:	4b45      	ldr	r3, [pc, #276]	@ (8003e54 <pvPortMalloc+0x18c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d86a      	bhi.n	8003e1c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d46:	4b44      	ldr	r3, [pc, #272]	@ (8003e58 <pvPortMalloc+0x190>)
 8003d48:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d4a:	4b43      	ldr	r3, [pc, #268]	@ (8003e58 <pvPortMalloc+0x190>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d50:	e004      	b.n	8003d5c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d903      	bls.n	8003d6e <pvPortMalloc+0xa6>
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f1      	bne.n	8003d52 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d6e:	4b37      	ldr	r3, [pc, #220]	@ (8003e4c <pvPortMalloc+0x184>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d051      	beq.n	8003e1c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	4413      	add	r3, r2
 8003d80:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	1ad2      	subs	r2, r2, r3
 8003d92:	2308      	movs	r3, #8
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d920      	bls.n	8003ddc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4413      	add	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <pvPortMalloc+0xfc>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	613b      	str	r3, [r7, #16]
}
 8003dbe:	bf00      	nop
 8003dc0:	bf00      	nop
 8003dc2:	e7fd      	b.n	8003dc0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	1ad2      	subs	r2, r2, r3
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003dd6:	69b8      	ldr	r0, [r7, #24]
 8003dd8:	f000 f90a 	bl	8003ff0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e54 <pvPortMalloc+0x18c>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e54 <pvPortMalloc+0x18c>)
 8003de8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003dea:	4b1a      	ldr	r3, [pc, #104]	@ (8003e54 <pvPortMalloc+0x18c>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b1b      	ldr	r3, [pc, #108]	@ (8003e5c <pvPortMalloc+0x194>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d203      	bcs.n	8003dfe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003df6:	4b17      	ldr	r3, [pc, #92]	@ (8003e54 <pvPortMalloc+0x18c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a18      	ldr	r2, [pc, #96]	@ (8003e5c <pvPortMalloc+0x194>)
 8003dfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	4b13      	ldr	r3, [pc, #76]	@ (8003e50 <pvPortMalloc+0x188>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003e12:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <pvPortMalloc+0x198>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	4a11      	ldr	r2, [pc, #68]	@ (8003e60 <pvPortMalloc+0x198>)
 8003e1a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e1c:	f7ff f9a6 	bl	800316c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <pvPortMalloc+0x17a>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	60fb      	str	r3, [r7, #12]
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	e7fd      	b.n	8003e3e <pvPortMalloc+0x176>
	return pvReturn;
 8003e42:	69fb      	ldr	r3, [r7, #28]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3728      	adds	r7, #40	@ 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20004160 	.word	0x20004160
 8003e50:	20004174 	.word	0x20004174
 8003e54:	20004164 	.word	0x20004164
 8003e58:	20004158 	.word	0x20004158
 8003e5c:	20004168 	.word	0x20004168
 8003e60:	2000416c 	.word	0x2000416c

08003e64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d04f      	beq.n	8003f16 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e76:	2308      	movs	r3, #8
 8003e78:	425b      	negs	r3, r3
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <vPortFree+0xbc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <vPortFree+0x46>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	60fb      	str	r3, [r7, #12]
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	e7fd      	b.n	8003ea6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <vPortFree+0x66>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	60bb      	str	r3, [r7, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	4b14      	ldr	r3, [pc, #80]	@ (8003f20 <vPortFree+0xbc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01e      	beq.n	8003f16 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d11a      	bne.n	8003f16 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f20 <vPortFree+0xbc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	401a      	ands	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ef0:	f7ff f92e 	bl	8003150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f24 <vPortFree+0xc0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4413      	add	r3, r2
 8003efe:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <vPortFree+0xc0>)
 8003f00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f02:	6938      	ldr	r0, [r7, #16]
 8003f04:	f000 f874 	bl	8003ff0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f08:	4b07      	ldr	r3, [pc, #28]	@ (8003f28 <vPortFree+0xc4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	4a06      	ldr	r2, [pc, #24]	@ (8003f28 <vPortFree+0xc4>)
 8003f10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003f12:	f7ff f92b 	bl	800316c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20004174 	.word	0x20004174
 8003f24:	20004164 	.word	0x20004164
 8003f28:	20004170 	.word	0x20004170

08003f2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f32:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003f36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f38:	4b27      	ldr	r3, [pc, #156]	@ (8003fd8 <prvHeapInit+0xac>)
 8003f3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00c      	beq.n	8003f60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3307      	adds	r3, #7
 8003f4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0307 	bic.w	r3, r3, #7
 8003f52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd8 <prvHeapInit+0xac>)
 8003f5c:	4413      	add	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f64:	4a1d      	ldr	r2, [pc, #116]	@ (8003fdc <prvHeapInit+0xb0>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003fdc <prvHeapInit+0xb0>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	4413      	add	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f78:	2208      	movs	r2, #8
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0307 	bic.w	r3, r3, #7
 8003f86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a15      	ldr	r2, [pc, #84]	@ (8003fe0 <prvHeapInit+0xb4>)
 8003f8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f8e:	4b14      	ldr	r3, [pc, #80]	@ (8003fe0 <prvHeapInit+0xb4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f96:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <prvHeapInit+0xb4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	1ad2      	subs	r2, r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fac:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe0 <prvHeapInit+0xb4>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe4 <prvHeapInit+0xb8>)
 8003fba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4a09      	ldr	r2, [pc, #36]	@ (8003fe8 <prvHeapInit+0xbc>)
 8003fc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fc4:	4b09      	ldr	r3, [pc, #36]	@ (8003fec <prvHeapInit+0xc0>)
 8003fc6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003fca:	601a      	str	r2, [r3, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	20000558 	.word	0x20000558
 8003fdc:	20004158 	.word	0x20004158
 8003fe0:	20004160 	.word	0x20004160
 8003fe4:	20004168 	.word	0x20004168
 8003fe8:	20004164 	.word	0x20004164
 8003fec:	20004174 	.word	0x20004174

08003ff0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ff8:	4b28      	ldr	r3, [pc, #160]	@ (800409c <prvInsertBlockIntoFreeList+0xac>)
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e002      	b.n	8004004 <prvInsertBlockIntoFreeList+0x14>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d8f7      	bhi.n	8003ffe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	4413      	add	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	429a      	cmp	r2, r3
 800401e:	d108      	bne.n	8004032 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	441a      	add	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	441a      	add	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d118      	bne.n	8004078 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b15      	ldr	r3, [pc, #84]	@ (80040a0 <prvInsertBlockIntoFreeList+0xb0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d00d      	beq.n	800406e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	441a      	add	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e008      	b.n	8004080 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800406e:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <prvInsertBlockIntoFreeList+0xb0>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e003      	b.n	8004080 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	429a      	cmp	r2, r3
 8004086:	d002      	beq.n	800408e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20004158 	.word	0x20004158
 80040a0:	20004160 	.word	0x20004160

080040a4 <std>:
 80040a4:	2300      	movs	r3, #0
 80040a6:	b510      	push	{r4, lr}
 80040a8:	4604      	mov	r4, r0
 80040aa:	e9c0 3300 	strd	r3, r3, [r0]
 80040ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040b2:	6083      	str	r3, [r0, #8]
 80040b4:	8181      	strh	r1, [r0, #12]
 80040b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80040b8:	81c2      	strh	r2, [r0, #14]
 80040ba:	6183      	str	r3, [r0, #24]
 80040bc:	4619      	mov	r1, r3
 80040be:	2208      	movs	r2, #8
 80040c0:	305c      	adds	r0, #92	@ 0x5c
 80040c2:	f000 f906 	bl	80042d2 <memset>
 80040c6:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <std+0x58>)
 80040c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80040ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004100 <std+0x5c>)
 80040cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <std+0x60>)
 80040d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <std+0x64>)
 80040d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80040d6:	4b0d      	ldr	r3, [pc, #52]	@ (800410c <std+0x68>)
 80040d8:	6224      	str	r4, [r4, #32]
 80040da:	429c      	cmp	r4, r3
 80040dc:	d006      	beq.n	80040ec <std+0x48>
 80040de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80040e2:	4294      	cmp	r4, r2
 80040e4:	d002      	beq.n	80040ec <std+0x48>
 80040e6:	33d0      	adds	r3, #208	@ 0xd0
 80040e8:	429c      	cmp	r4, r3
 80040ea:	d105      	bne.n	80040f8 <std+0x54>
 80040ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80040f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040f4:	f000 b9bc 	b.w	8004470 <__retarget_lock_init_recursive>
 80040f8:	bd10      	pop	{r4, pc}
 80040fa:	bf00      	nop
 80040fc:	0800424d 	.word	0x0800424d
 8004100:	0800426f 	.word	0x0800426f
 8004104:	080042a7 	.word	0x080042a7
 8004108:	080042cb 	.word	0x080042cb
 800410c:	20004178 	.word	0x20004178

08004110 <stdio_exit_handler>:
 8004110:	4a02      	ldr	r2, [pc, #8]	@ (800411c <stdio_exit_handler+0xc>)
 8004112:	4903      	ldr	r1, [pc, #12]	@ (8004120 <stdio_exit_handler+0x10>)
 8004114:	4803      	ldr	r0, [pc, #12]	@ (8004124 <stdio_exit_handler+0x14>)
 8004116:	f000 b869 	b.w	80041ec <_fwalk_sglue>
 800411a:	bf00      	nop
 800411c:	20000010 	.word	0x20000010
 8004120:	08004d11 	.word	0x08004d11
 8004124:	20000020 	.word	0x20000020

08004128 <cleanup_stdio>:
 8004128:	6841      	ldr	r1, [r0, #4]
 800412a:	4b0c      	ldr	r3, [pc, #48]	@ (800415c <cleanup_stdio+0x34>)
 800412c:	4299      	cmp	r1, r3
 800412e:	b510      	push	{r4, lr}
 8004130:	4604      	mov	r4, r0
 8004132:	d001      	beq.n	8004138 <cleanup_stdio+0x10>
 8004134:	f000 fdec 	bl	8004d10 <_fflush_r>
 8004138:	68a1      	ldr	r1, [r4, #8]
 800413a:	4b09      	ldr	r3, [pc, #36]	@ (8004160 <cleanup_stdio+0x38>)
 800413c:	4299      	cmp	r1, r3
 800413e:	d002      	beq.n	8004146 <cleanup_stdio+0x1e>
 8004140:	4620      	mov	r0, r4
 8004142:	f000 fde5 	bl	8004d10 <_fflush_r>
 8004146:	68e1      	ldr	r1, [r4, #12]
 8004148:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <cleanup_stdio+0x3c>)
 800414a:	4299      	cmp	r1, r3
 800414c:	d004      	beq.n	8004158 <cleanup_stdio+0x30>
 800414e:	4620      	mov	r0, r4
 8004150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004154:	f000 bddc 	b.w	8004d10 <_fflush_r>
 8004158:	bd10      	pop	{r4, pc}
 800415a:	bf00      	nop
 800415c:	20004178 	.word	0x20004178
 8004160:	200041e0 	.word	0x200041e0
 8004164:	20004248 	.word	0x20004248

08004168 <global_stdio_init.part.0>:
 8004168:	b510      	push	{r4, lr}
 800416a:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <global_stdio_init.part.0+0x30>)
 800416c:	4c0b      	ldr	r4, [pc, #44]	@ (800419c <global_stdio_init.part.0+0x34>)
 800416e:	4a0c      	ldr	r2, [pc, #48]	@ (80041a0 <global_stdio_init.part.0+0x38>)
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	4620      	mov	r0, r4
 8004174:	2200      	movs	r2, #0
 8004176:	2104      	movs	r1, #4
 8004178:	f7ff ff94 	bl	80040a4 <std>
 800417c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004180:	2201      	movs	r2, #1
 8004182:	2109      	movs	r1, #9
 8004184:	f7ff ff8e 	bl	80040a4 <std>
 8004188:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800418c:	2202      	movs	r2, #2
 800418e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004192:	2112      	movs	r1, #18
 8004194:	f7ff bf86 	b.w	80040a4 <std>
 8004198:	200042b0 	.word	0x200042b0
 800419c:	20004178 	.word	0x20004178
 80041a0:	08004111 	.word	0x08004111

080041a4 <__sfp_lock_acquire>:
 80041a4:	4801      	ldr	r0, [pc, #4]	@ (80041ac <__sfp_lock_acquire+0x8>)
 80041a6:	f000 b964 	b.w	8004472 <__retarget_lock_acquire_recursive>
 80041aa:	bf00      	nop
 80041ac:	200042b9 	.word	0x200042b9

080041b0 <__sfp_lock_release>:
 80041b0:	4801      	ldr	r0, [pc, #4]	@ (80041b8 <__sfp_lock_release+0x8>)
 80041b2:	f000 b95f 	b.w	8004474 <__retarget_lock_release_recursive>
 80041b6:	bf00      	nop
 80041b8:	200042b9 	.word	0x200042b9

080041bc <__sinit>:
 80041bc:	b510      	push	{r4, lr}
 80041be:	4604      	mov	r4, r0
 80041c0:	f7ff fff0 	bl	80041a4 <__sfp_lock_acquire>
 80041c4:	6a23      	ldr	r3, [r4, #32]
 80041c6:	b11b      	cbz	r3, 80041d0 <__sinit+0x14>
 80041c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041cc:	f7ff bff0 	b.w	80041b0 <__sfp_lock_release>
 80041d0:	4b04      	ldr	r3, [pc, #16]	@ (80041e4 <__sinit+0x28>)
 80041d2:	6223      	str	r3, [r4, #32]
 80041d4:	4b04      	ldr	r3, [pc, #16]	@ (80041e8 <__sinit+0x2c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f5      	bne.n	80041c8 <__sinit+0xc>
 80041dc:	f7ff ffc4 	bl	8004168 <global_stdio_init.part.0>
 80041e0:	e7f2      	b.n	80041c8 <__sinit+0xc>
 80041e2:	bf00      	nop
 80041e4:	08004129 	.word	0x08004129
 80041e8:	200042b0 	.word	0x200042b0

080041ec <_fwalk_sglue>:
 80041ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f0:	4607      	mov	r7, r0
 80041f2:	4688      	mov	r8, r1
 80041f4:	4614      	mov	r4, r2
 80041f6:	2600      	movs	r6, #0
 80041f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004200:	d505      	bpl.n	800420e <_fwalk_sglue+0x22>
 8004202:	6824      	ldr	r4, [r4, #0]
 8004204:	2c00      	cmp	r4, #0
 8004206:	d1f7      	bne.n	80041f8 <_fwalk_sglue+0xc>
 8004208:	4630      	mov	r0, r6
 800420a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800420e:	89ab      	ldrh	r3, [r5, #12]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d907      	bls.n	8004224 <_fwalk_sglue+0x38>
 8004214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004218:	3301      	adds	r3, #1
 800421a:	d003      	beq.n	8004224 <_fwalk_sglue+0x38>
 800421c:	4629      	mov	r1, r5
 800421e:	4638      	mov	r0, r7
 8004220:	47c0      	blx	r8
 8004222:	4306      	orrs	r6, r0
 8004224:	3568      	adds	r5, #104	@ 0x68
 8004226:	e7e9      	b.n	80041fc <_fwalk_sglue+0x10>

08004228 <iprintf>:
 8004228:	b40f      	push	{r0, r1, r2, r3}
 800422a:	b507      	push	{r0, r1, r2, lr}
 800422c:	4906      	ldr	r1, [pc, #24]	@ (8004248 <iprintf+0x20>)
 800422e:	ab04      	add	r3, sp, #16
 8004230:	6808      	ldr	r0, [r1, #0]
 8004232:	f853 2b04 	ldr.w	r2, [r3], #4
 8004236:	6881      	ldr	r1, [r0, #8]
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	f000 fa3f 	bl	80046bc <_vfiprintf_r>
 800423e:	b003      	add	sp, #12
 8004240:	f85d eb04 	ldr.w	lr, [sp], #4
 8004244:	b004      	add	sp, #16
 8004246:	4770      	bx	lr
 8004248:	2000001c 	.word	0x2000001c

0800424c <__sread>:
 800424c:	b510      	push	{r4, lr}
 800424e:	460c      	mov	r4, r1
 8004250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004254:	f000 f8be 	bl	80043d4 <_read_r>
 8004258:	2800      	cmp	r0, #0
 800425a:	bfab      	itete	ge
 800425c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800425e:	89a3      	ldrhlt	r3, [r4, #12]
 8004260:	181b      	addge	r3, r3, r0
 8004262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004266:	bfac      	ite	ge
 8004268:	6563      	strge	r3, [r4, #84]	@ 0x54
 800426a:	81a3      	strhlt	r3, [r4, #12]
 800426c:	bd10      	pop	{r4, pc}

0800426e <__swrite>:
 800426e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004272:	461f      	mov	r7, r3
 8004274:	898b      	ldrh	r3, [r1, #12]
 8004276:	05db      	lsls	r3, r3, #23
 8004278:	4605      	mov	r5, r0
 800427a:	460c      	mov	r4, r1
 800427c:	4616      	mov	r6, r2
 800427e:	d505      	bpl.n	800428c <__swrite+0x1e>
 8004280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004284:	2302      	movs	r3, #2
 8004286:	2200      	movs	r2, #0
 8004288:	f000 f892 	bl	80043b0 <_lseek_r>
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	4632      	mov	r2, r6
 800429a:	463b      	mov	r3, r7
 800429c:	4628      	mov	r0, r5
 800429e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042a2:	f000 b8a9 	b.w	80043f8 <_write_r>

080042a6 <__sseek>:
 80042a6:	b510      	push	{r4, lr}
 80042a8:	460c      	mov	r4, r1
 80042aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ae:	f000 f87f 	bl	80043b0 <_lseek_r>
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	bf15      	itete	ne
 80042b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80042ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80042be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80042c2:	81a3      	strheq	r3, [r4, #12]
 80042c4:	bf18      	it	ne
 80042c6:	81a3      	strhne	r3, [r4, #12]
 80042c8:	bd10      	pop	{r4, pc}

080042ca <__sclose>:
 80042ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ce:	f000 b809 	b.w	80042e4 <_close_r>

080042d2 <memset>:
 80042d2:	4402      	add	r2, r0
 80042d4:	4603      	mov	r3, r0
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d100      	bne.n	80042dc <memset+0xa>
 80042da:	4770      	bx	lr
 80042dc:	f803 1b01 	strb.w	r1, [r3], #1
 80042e0:	e7f9      	b.n	80042d6 <memset+0x4>
	...

080042e4 <_close_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	4d06      	ldr	r5, [pc, #24]	@ (8004300 <_close_r+0x1c>)
 80042e8:	2300      	movs	r3, #0
 80042ea:	4604      	mov	r4, r0
 80042ec:	4608      	mov	r0, r1
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	f7fc fc57 	bl	8000ba2 <_close>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d102      	bne.n	80042fe <_close_r+0x1a>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	b103      	cbz	r3, 80042fe <_close_r+0x1a>
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	200042b4 	.word	0x200042b4

08004304 <_reclaim_reent>:
 8004304:	4b29      	ldr	r3, [pc, #164]	@ (80043ac <_reclaim_reent+0xa8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4283      	cmp	r3, r0
 800430a:	b570      	push	{r4, r5, r6, lr}
 800430c:	4604      	mov	r4, r0
 800430e:	d04b      	beq.n	80043a8 <_reclaim_reent+0xa4>
 8004310:	69c3      	ldr	r3, [r0, #28]
 8004312:	b1ab      	cbz	r3, 8004340 <_reclaim_reent+0x3c>
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	b16b      	cbz	r3, 8004334 <_reclaim_reent+0x30>
 8004318:	2500      	movs	r5, #0
 800431a:	69e3      	ldr	r3, [r4, #28]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	5959      	ldr	r1, [r3, r5]
 8004320:	2900      	cmp	r1, #0
 8004322:	d13b      	bne.n	800439c <_reclaim_reent+0x98>
 8004324:	3504      	adds	r5, #4
 8004326:	2d80      	cmp	r5, #128	@ 0x80
 8004328:	d1f7      	bne.n	800431a <_reclaim_reent+0x16>
 800432a:	69e3      	ldr	r3, [r4, #28]
 800432c:	4620      	mov	r0, r4
 800432e:	68d9      	ldr	r1, [r3, #12]
 8004330:	f000 f8a2 	bl	8004478 <_free_r>
 8004334:	69e3      	ldr	r3, [r4, #28]
 8004336:	6819      	ldr	r1, [r3, #0]
 8004338:	b111      	cbz	r1, 8004340 <_reclaim_reent+0x3c>
 800433a:	4620      	mov	r0, r4
 800433c:	f000 f89c 	bl	8004478 <_free_r>
 8004340:	6961      	ldr	r1, [r4, #20]
 8004342:	b111      	cbz	r1, 800434a <_reclaim_reent+0x46>
 8004344:	4620      	mov	r0, r4
 8004346:	f000 f897 	bl	8004478 <_free_r>
 800434a:	69e1      	ldr	r1, [r4, #28]
 800434c:	b111      	cbz	r1, 8004354 <_reclaim_reent+0x50>
 800434e:	4620      	mov	r0, r4
 8004350:	f000 f892 	bl	8004478 <_free_r>
 8004354:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004356:	b111      	cbz	r1, 800435e <_reclaim_reent+0x5a>
 8004358:	4620      	mov	r0, r4
 800435a:	f000 f88d 	bl	8004478 <_free_r>
 800435e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004360:	b111      	cbz	r1, 8004368 <_reclaim_reent+0x64>
 8004362:	4620      	mov	r0, r4
 8004364:	f000 f888 	bl	8004478 <_free_r>
 8004368:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800436a:	b111      	cbz	r1, 8004372 <_reclaim_reent+0x6e>
 800436c:	4620      	mov	r0, r4
 800436e:	f000 f883 	bl	8004478 <_free_r>
 8004372:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004374:	b111      	cbz	r1, 800437c <_reclaim_reent+0x78>
 8004376:	4620      	mov	r0, r4
 8004378:	f000 f87e 	bl	8004478 <_free_r>
 800437c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800437e:	b111      	cbz	r1, 8004386 <_reclaim_reent+0x82>
 8004380:	4620      	mov	r0, r4
 8004382:	f000 f879 	bl	8004478 <_free_r>
 8004386:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004388:	b111      	cbz	r1, 8004390 <_reclaim_reent+0x8c>
 800438a:	4620      	mov	r0, r4
 800438c:	f000 f874 	bl	8004478 <_free_r>
 8004390:	6a23      	ldr	r3, [r4, #32]
 8004392:	b14b      	cbz	r3, 80043a8 <_reclaim_reent+0xa4>
 8004394:	4620      	mov	r0, r4
 8004396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800439a:	4718      	bx	r3
 800439c:	680e      	ldr	r6, [r1, #0]
 800439e:	4620      	mov	r0, r4
 80043a0:	f000 f86a 	bl	8004478 <_free_r>
 80043a4:	4631      	mov	r1, r6
 80043a6:	e7bb      	b.n	8004320 <_reclaim_reent+0x1c>
 80043a8:	bd70      	pop	{r4, r5, r6, pc}
 80043aa:	bf00      	nop
 80043ac:	2000001c 	.word	0x2000001c

080043b0 <_lseek_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	4d07      	ldr	r5, [pc, #28]	@ (80043d0 <_lseek_r+0x20>)
 80043b4:	4604      	mov	r4, r0
 80043b6:	4608      	mov	r0, r1
 80043b8:	4611      	mov	r1, r2
 80043ba:	2200      	movs	r2, #0
 80043bc:	602a      	str	r2, [r5, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	f7fc fc16 	bl	8000bf0 <_lseek>
 80043c4:	1c43      	adds	r3, r0, #1
 80043c6:	d102      	bne.n	80043ce <_lseek_r+0x1e>
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	b103      	cbz	r3, 80043ce <_lseek_r+0x1e>
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	bd38      	pop	{r3, r4, r5, pc}
 80043d0:	200042b4 	.word	0x200042b4

080043d4 <_read_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4d07      	ldr	r5, [pc, #28]	@ (80043f4 <_read_r+0x20>)
 80043d8:	4604      	mov	r4, r0
 80043da:	4608      	mov	r0, r1
 80043dc:	4611      	mov	r1, r2
 80043de:	2200      	movs	r2, #0
 80043e0:	602a      	str	r2, [r5, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f7fc fba4 	bl	8000b30 <_read>
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	d102      	bne.n	80043f2 <_read_r+0x1e>
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	b103      	cbz	r3, 80043f2 <_read_r+0x1e>
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
 80043f4:	200042b4 	.word	0x200042b4

080043f8 <_write_r>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	4d07      	ldr	r5, [pc, #28]	@ (8004418 <_write_r+0x20>)
 80043fc:	4604      	mov	r4, r0
 80043fe:	4608      	mov	r0, r1
 8004400:	4611      	mov	r1, r2
 8004402:	2200      	movs	r2, #0
 8004404:	602a      	str	r2, [r5, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	f7fc fbaf 	bl	8000b6a <_write>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d102      	bne.n	8004416 <_write_r+0x1e>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	b103      	cbz	r3, 8004416 <_write_r+0x1e>
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	bd38      	pop	{r3, r4, r5, pc}
 8004418:	200042b4 	.word	0x200042b4

0800441c <__errno>:
 800441c:	4b01      	ldr	r3, [pc, #4]	@ (8004424 <__errno+0x8>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	2000001c 	.word	0x2000001c

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4d0d      	ldr	r5, [pc, #52]	@ (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	@ (8004464 <__libc_init_array+0x3c>)
 800442e:	1b64      	subs	r4, r4, r5
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2600      	movs	r6, #0
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4d0b      	ldr	r5, [pc, #44]	@ (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	@ (800446c <__libc_init_array+0x44>)
 800443c:	f000 fdb8 	bl	8004fb0 <_init>
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2600      	movs	r6, #0
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	08005088 	.word	0x08005088
 8004464:	08005088 	.word	0x08005088
 8004468:	08005088 	.word	0x08005088
 800446c:	0800508c 	.word	0x0800508c

08004470 <__retarget_lock_init_recursive>:
 8004470:	4770      	bx	lr

08004472 <__retarget_lock_acquire_recursive>:
 8004472:	4770      	bx	lr

08004474 <__retarget_lock_release_recursive>:
 8004474:	4770      	bx	lr
	...

08004478 <_free_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4605      	mov	r5, r0
 800447c:	2900      	cmp	r1, #0
 800447e:	d041      	beq.n	8004504 <_free_r+0x8c>
 8004480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004484:	1f0c      	subs	r4, r1, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	bfb8      	it	lt
 800448a:	18e4      	addlt	r4, r4, r3
 800448c:	f000 f8e0 	bl	8004650 <__malloc_lock>
 8004490:	4a1d      	ldr	r2, [pc, #116]	@ (8004508 <_free_r+0x90>)
 8004492:	6813      	ldr	r3, [r2, #0]
 8004494:	b933      	cbnz	r3, 80044a4 <_free_r+0x2c>
 8004496:	6063      	str	r3, [r4, #4]
 8004498:	6014      	str	r4, [r2, #0]
 800449a:	4628      	mov	r0, r5
 800449c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044a0:	f000 b8dc 	b.w	800465c <__malloc_unlock>
 80044a4:	42a3      	cmp	r3, r4
 80044a6:	d908      	bls.n	80044ba <_free_r+0x42>
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	1821      	adds	r1, r4, r0
 80044ac:	428b      	cmp	r3, r1
 80044ae:	bf01      	itttt	eq
 80044b0:	6819      	ldreq	r1, [r3, #0]
 80044b2:	685b      	ldreq	r3, [r3, #4]
 80044b4:	1809      	addeq	r1, r1, r0
 80044b6:	6021      	streq	r1, [r4, #0]
 80044b8:	e7ed      	b.n	8004496 <_free_r+0x1e>
 80044ba:	461a      	mov	r2, r3
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	b10b      	cbz	r3, 80044c4 <_free_r+0x4c>
 80044c0:	42a3      	cmp	r3, r4
 80044c2:	d9fa      	bls.n	80044ba <_free_r+0x42>
 80044c4:	6811      	ldr	r1, [r2, #0]
 80044c6:	1850      	adds	r0, r2, r1
 80044c8:	42a0      	cmp	r0, r4
 80044ca:	d10b      	bne.n	80044e4 <_free_r+0x6c>
 80044cc:	6820      	ldr	r0, [r4, #0]
 80044ce:	4401      	add	r1, r0
 80044d0:	1850      	adds	r0, r2, r1
 80044d2:	4283      	cmp	r3, r0
 80044d4:	6011      	str	r1, [r2, #0]
 80044d6:	d1e0      	bne.n	800449a <_free_r+0x22>
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	6053      	str	r3, [r2, #4]
 80044de:	4408      	add	r0, r1
 80044e0:	6010      	str	r0, [r2, #0]
 80044e2:	e7da      	b.n	800449a <_free_r+0x22>
 80044e4:	d902      	bls.n	80044ec <_free_r+0x74>
 80044e6:	230c      	movs	r3, #12
 80044e8:	602b      	str	r3, [r5, #0]
 80044ea:	e7d6      	b.n	800449a <_free_r+0x22>
 80044ec:	6820      	ldr	r0, [r4, #0]
 80044ee:	1821      	adds	r1, r4, r0
 80044f0:	428b      	cmp	r3, r1
 80044f2:	bf04      	itt	eq
 80044f4:	6819      	ldreq	r1, [r3, #0]
 80044f6:	685b      	ldreq	r3, [r3, #4]
 80044f8:	6063      	str	r3, [r4, #4]
 80044fa:	bf04      	itt	eq
 80044fc:	1809      	addeq	r1, r1, r0
 80044fe:	6021      	streq	r1, [r4, #0]
 8004500:	6054      	str	r4, [r2, #4]
 8004502:	e7ca      	b.n	800449a <_free_r+0x22>
 8004504:	bd38      	pop	{r3, r4, r5, pc}
 8004506:	bf00      	nop
 8004508:	200042c0 	.word	0x200042c0

0800450c <sbrk_aligned>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	4e0f      	ldr	r6, [pc, #60]	@ (800454c <sbrk_aligned+0x40>)
 8004510:	460c      	mov	r4, r1
 8004512:	6831      	ldr	r1, [r6, #0]
 8004514:	4605      	mov	r5, r0
 8004516:	b911      	cbnz	r1, 800451e <sbrk_aligned+0x12>
 8004518:	f000 fcb6 	bl	8004e88 <_sbrk_r>
 800451c:	6030      	str	r0, [r6, #0]
 800451e:	4621      	mov	r1, r4
 8004520:	4628      	mov	r0, r5
 8004522:	f000 fcb1 	bl	8004e88 <_sbrk_r>
 8004526:	1c43      	adds	r3, r0, #1
 8004528:	d103      	bne.n	8004532 <sbrk_aligned+0x26>
 800452a:	f04f 34ff 	mov.w	r4, #4294967295
 800452e:	4620      	mov	r0, r4
 8004530:	bd70      	pop	{r4, r5, r6, pc}
 8004532:	1cc4      	adds	r4, r0, #3
 8004534:	f024 0403 	bic.w	r4, r4, #3
 8004538:	42a0      	cmp	r0, r4
 800453a:	d0f8      	beq.n	800452e <sbrk_aligned+0x22>
 800453c:	1a21      	subs	r1, r4, r0
 800453e:	4628      	mov	r0, r5
 8004540:	f000 fca2 	bl	8004e88 <_sbrk_r>
 8004544:	3001      	adds	r0, #1
 8004546:	d1f2      	bne.n	800452e <sbrk_aligned+0x22>
 8004548:	e7ef      	b.n	800452a <sbrk_aligned+0x1e>
 800454a:	bf00      	nop
 800454c:	200042bc 	.word	0x200042bc

08004550 <_malloc_r>:
 8004550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004554:	1ccd      	adds	r5, r1, #3
 8004556:	f025 0503 	bic.w	r5, r5, #3
 800455a:	3508      	adds	r5, #8
 800455c:	2d0c      	cmp	r5, #12
 800455e:	bf38      	it	cc
 8004560:	250c      	movcc	r5, #12
 8004562:	2d00      	cmp	r5, #0
 8004564:	4606      	mov	r6, r0
 8004566:	db01      	blt.n	800456c <_malloc_r+0x1c>
 8004568:	42a9      	cmp	r1, r5
 800456a:	d904      	bls.n	8004576 <_malloc_r+0x26>
 800456c:	230c      	movs	r3, #12
 800456e:	6033      	str	r3, [r6, #0]
 8004570:	2000      	movs	r0, #0
 8004572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800464c <_malloc_r+0xfc>
 800457a:	f000 f869 	bl	8004650 <__malloc_lock>
 800457e:	f8d8 3000 	ldr.w	r3, [r8]
 8004582:	461c      	mov	r4, r3
 8004584:	bb44      	cbnz	r4, 80045d8 <_malloc_r+0x88>
 8004586:	4629      	mov	r1, r5
 8004588:	4630      	mov	r0, r6
 800458a:	f7ff ffbf 	bl	800450c <sbrk_aligned>
 800458e:	1c43      	adds	r3, r0, #1
 8004590:	4604      	mov	r4, r0
 8004592:	d158      	bne.n	8004646 <_malloc_r+0xf6>
 8004594:	f8d8 4000 	ldr.w	r4, [r8]
 8004598:	4627      	mov	r7, r4
 800459a:	2f00      	cmp	r7, #0
 800459c:	d143      	bne.n	8004626 <_malloc_r+0xd6>
 800459e:	2c00      	cmp	r4, #0
 80045a0:	d04b      	beq.n	800463a <_malloc_r+0xea>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	4639      	mov	r1, r7
 80045a6:	4630      	mov	r0, r6
 80045a8:	eb04 0903 	add.w	r9, r4, r3
 80045ac:	f000 fc6c 	bl	8004e88 <_sbrk_r>
 80045b0:	4581      	cmp	r9, r0
 80045b2:	d142      	bne.n	800463a <_malloc_r+0xea>
 80045b4:	6821      	ldr	r1, [r4, #0]
 80045b6:	1a6d      	subs	r5, r5, r1
 80045b8:	4629      	mov	r1, r5
 80045ba:	4630      	mov	r0, r6
 80045bc:	f7ff ffa6 	bl	800450c <sbrk_aligned>
 80045c0:	3001      	adds	r0, #1
 80045c2:	d03a      	beq.n	800463a <_malloc_r+0xea>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	442b      	add	r3, r5
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	f8d8 3000 	ldr.w	r3, [r8]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	bb62      	cbnz	r2, 800462c <_malloc_r+0xdc>
 80045d2:	f8c8 7000 	str.w	r7, [r8]
 80045d6:	e00f      	b.n	80045f8 <_malloc_r+0xa8>
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	1b52      	subs	r2, r2, r5
 80045dc:	d420      	bmi.n	8004620 <_malloc_r+0xd0>
 80045de:	2a0b      	cmp	r2, #11
 80045e0:	d917      	bls.n	8004612 <_malloc_r+0xc2>
 80045e2:	1961      	adds	r1, r4, r5
 80045e4:	42a3      	cmp	r3, r4
 80045e6:	6025      	str	r5, [r4, #0]
 80045e8:	bf18      	it	ne
 80045ea:	6059      	strne	r1, [r3, #4]
 80045ec:	6863      	ldr	r3, [r4, #4]
 80045ee:	bf08      	it	eq
 80045f0:	f8c8 1000 	streq.w	r1, [r8]
 80045f4:	5162      	str	r2, [r4, r5]
 80045f6:	604b      	str	r3, [r1, #4]
 80045f8:	4630      	mov	r0, r6
 80045fa:	f000 f82f 	bl	800465c <__malloc_unlock>
 80045fe:	f104 000b 	add.w	r0, r4, #11
 8004602:	1d23      	adds	r3, r4, #4
 8004604:	f020 0007 	bic.w	r0, r0, #7
 8004608:	1ac2      	subs	r2, r0, r3
 800460a:	bf1c      	itt	ne
 800460c:	1a1b      	subne	r3, r3, r0
 800460e:	50a3      	strne	r3, [r4, r2]
 8004610:	e7af      	b.n	8004572 <_malloc_r+0x22>
 8004612:	6862      	ldr	r2, [r4, #4]
 8004614:	42a3      	cmp	r3, r4
 8004616:	bf0c      	ite	eq
 8004618:	f8c8 2000 	streq.w	r2, [r8]
 800461c:	605a      	strne	r2, [r3, #4]
 800461e:	e7eb      	b.n	80045f8 <_malloc_r+0xa8>
 8004620:	4623      	mov	r3, r4
 8004622:	6864      	ldr	r4, [r4, #4]
 8004624:	e7ae      	b.n	8004584 <_malloc_r+0x34>
 8004626:	463c      	mov	r4, r7
 8004628:	687f      	ldr	r7, [r7, #4]
 800462a:	e7b6      	b.n	800459a <_malloc_r+0x4a>
 800462c:	461a      	mov	r2, r3
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	42a3      	cmp	r3, r4
 8004632:	d1fb      	bne.n	800462c <_malloc_r+0xdc>
 8004634:	2300      	movs	r3, #0
 8004636:	6053      	str	r3, [r2, #4]
 8004638:	e7de      	b.n	80045f8 <_malloc_r+0xa8>
 800463a:	230c      	movs	r3, #12
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	4630      	mov	r0, r6
 8004640:	f000 f80c 	bl	800465c <__malloc_unlock>
 8004644:	e794      	b.n	8004570 <_malloc_r+0x20>
 8004646:	6005      	str	r5, [r0, #0]
 8004648:	e7d6      	b.n	80045f8 <_malloc_r+0xa8>
 800464a:	bf00      	nop
 800464c:	200042c0 	.word	0x200042c0

08004650 <__malloc_lock>:
 8004650:	4801      	ldr	r0, [pc, #4]	@ (8004658 <__malloc_lock+0x8>)
 8004652:	f7ff bf0e 	b.w	8004472 <__retarget_lock_acquire_recursive>
 8004656:	bf00      	nop
 8004658:	200042b8 	.word	0x200042b8

0800465c <__malloc_unlock>:
 800465c:	4801      	ldr	r0, [pc, #4]	@ (8004664 <__malloc_unlock+0x8>)
 800465e:	f7ff bf09 	b.w	8004474 <__retarget_lock_release_recursive>
 8004662:	bf00      	nop
 8004664:	200042b8 	.word	0x200042b8

08004668 <__sfputc_r>:
 8004668:	6893      	ldr	r3, [r2, #8]
 800466a:	3b01      	subs	r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	b410      	push	{r4}
 8004670:	6093      	str	r3, [r2, #8]
 8004672:	da08      	bge.n	8004686 <__sfputc_r+0x1e>
 8004674:	6994      	ldr	r4, [r2, #24]
 8004676:	42a3      	cmp	r3, r4
 8004678:	db01      	blt.n	800467e <__sfputc_r+0x16>
 800467a:	290a      	cmp	r1, #10
 800467c:	d103      	bne.n	8004686 <__sfputc_r+0x1e>
 800467e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004682:	f000 bb6d 	b.w	8004d60 <__swbuf_r>
 8004686:	6813      	ldr	r3, [r2, #0]
 8004688:	1c58      	adds	r0, r3, #1
 800468a:	6010      	str	r0, [r2, #0]
 800468c:	7019      	strb	r1, [r3, #0]
 800468e:	4608      	mov	r0, r1
 8004690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004694:	4770      	bx	lr

08004696 <__sfputs_r>:
 8004696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004698:	4606      	mov	r6, r0
 800469a:	460f      	mov	r7, r1
 800469c:	4614      	mov	r4, r2
 800469e:	18d5      	adds	r5, r2, r3
 80046a0:	42ac      	cmp	r4, r5
 80046a2:	d101      	bne.n	80046a8 <__sfputs_r+0x12>
 80046a4:	2000      	movs	r0, #0
 80046a6:	e007      	b.n	80046b8 <__sfputs_r+0x22>
 80046a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ac:	463a      	mov	r2, r7
 80046ae:	4630      	mov	r0, r6
 80046b0:	f7ff ffda 	bl	8004668 <__sfputc_r>
 80046b4:	1c43      	adds	r3, r0, #1
 80046b6:	d1f3      	bne.n	80046a0 <__sfputs_r+0xa>
 80046b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046bc <_vfiprintf_r>:
 80046bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	460d      	mov	r5, r1
 80046c2:	b09d      	sub	sp, #116	@ 0x74
 80046c4:	4614      	mov	r4, r2
 80046c6:	4698      	mov	r8, r3
 80046c8:	4606      	mov	r6, r0
 80046ca:	b118      	cbz	r0, 80046d4 <_vfiprintf_r+0x18>
 80046cc:	6a03      	ldr	r3, [r0, #32]
 80046ce:	b90b      	cbnz	r3, 80046d4 <_vfiprintf_r+0x18>
 80046d0:	f7ff fd74 	bl	80041bc <__sinit>
 80046d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046d6:	07d9      	lsls	r1, r3, #31
 80046d8:	d405      	bmi.n	80046e6 <_vfiprintf_r+0x2a>
 80046da:	89ab      	ldrh	r3, [r5, #12]
 80046dc:	059a      	lsls	r2, r3, #22
 80046de:	d402      	bmi.n	80046e6 <_vfiprintf_r+0x2a>
 80046e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046e2:	f7ff fec6 	bl	8004472 <__retarget_lock_acquire_recursive>
 80046e6:	89ab      	ldrh	r3, [r5, #12]
 80046e8:	071b      	lsls	r3, r3, #28
 80046ea:	d501      	bpl.n	80046f0 <_vfiprintf_r+0x34>
 80046ec:	692b      	ldr	r3, [r5, #16]
 80046ee:	b99b      	cbnz	r3, 8004718 <_vfiprintf_r+0x5c>
 80046f0:	4629      	mov	r1, r5
 80046f2:	4630      	mov	r0, r6
 80046f4:	f000 fb72 	bl	8004ddc <__swsetup_r>
 80046f8:	b170      	cbz	r0, 8004718 <_vfiprintf_r+0x5c>
 80046fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046fc:	07dc      	lsls	r4, r3, #31
 80046fe:	d504      	bpl.n	800470a <_vfiprintf_r+0x4e>
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	b01d      	add	sp, #116	@ 0x74
 8004706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800470a:	89ab      	ldrh	r3, [r5, #12]
 800470c:	0598      	lsls	r0, r3, #22
 800470e:	d4f7      	bmi.n	8004700 <_vfiprintf_r+0x44>
 8004710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004712:	f7ff feaf 	bl	8004474 <__retarget_lock_release_recursive>
 8004716:	e7f3      	b.n	8004700 <_vfiprintf_r+0x44>
 8004718:	2300      	movs	r3, #0
 800471a:	9309      	str	r3, [sp, #36]	@ 0x24
 800471c:	2320      	movs	r3, #32
 800471e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004722:	f8cd 800c 	str.w	r8, [sp, #12]
 8004726:	2330      	movs	r3, #48	@ 0x30
 8004728:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80048d8 <_vfiprintf_r+0x21c>
 800472c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004730:	f04f 0901 	mov.w	r9, #1
 8004734:	4623      	mov	r3, r4
 8004736:	469a      	mov	sl, r3
 8004738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800473c:	b10a      	cbz	r2, 8004742 <_vfiprintf_r+0x86>
 800473e:	2a25      	cmp	r2, #37	@ 0x25
 8004740:	d1f9      	bne.n	8004736 <_vfiprintf_r+0x7a>
 8004742:	ebba 0b04 	subs.w	fp, sl, r4
 8004746:	d00b      	beq.n	8004760 <_vfiprintf_r+0xa4>
 8004748:	465b      	mov	r3, fp
 800474a:	4622      	mov	r2, r4
 800474c:	4629      	mov	r1, r5
 800474e:	4630      	mov	r0, r6
 8004750:	f7ff ffa1 	bl	8004696 <__sfputs_r>
 8004754:	3001      	adds	r0, #1
 8004756:	f000 80a7 	beq.w	80048a8 <_vfiprintf_r+0x1ec>
 800475a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800475c:	445a      	add	r2, fp
 800475e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004760:	f89a 3000 	ldrb.w	r3, [sl]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 809f 	beq.w	80048a8 <_vfiprintf_r+0x1ec>
 800476a:	2300      	movs	r3, #0
 800476c:	f04f 32ff 	mov.w	r2, #4294967295
 8004770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004774:	f10a 0a01 	add.w	sl, sl, #1
 8004778:	9304      	str	r3, [sp, #16]
 800477a:	9307      	str	r3, [sp, #28]
 800477c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004780:	931a      	str	r3, [sp, #104]	@ 0x68
 8004782:	4654      	mov	r4, sl
 8004784:	2205      	movs	r2, #5
 8004786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800478a:	4853      	ldr	r0, [pc, #332]	@ (80048d8 <_vfiprintf_r+0x21c>)
 800478c:	f7fb fd28 	bl	80001e0 <memchr>
 8004790:	9a04      	ldr	r2, [sp, #16]
 8004792:	b9d8      	cbnz	r0, 80047cc <_vfiprintf_r+0x110>
 8004794:	06d1      	lsls	r1, r2, #27
 8004796:	bf44      	itt	mi
 8004798:	2320      	movmi	r3, #32
 800479a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800479e:	0713      	lsls	r3, r2, #28
 80047a0:	bf44      	itt	mi
 80047a2:	232b      	movmi	r3, #43	@ 0x2b
 80047a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047a8:	f89a 3000 	ldrb.w	r3, [sl]
 80047ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ae:	d015      	beq.n	80047dc <_vfiprintf_r+0x120>
 80047b0:	9a07      	ldr	r2, [sp, #28]
 80047b2:	4654      	mov	r4, sl
 80047b4:	2000      	movs	r0, #0
 80047b6:	f04f 0c0a 	mov.w	ip, #10
 80047ba:	4621      	mov	r1, r4
 80047bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047c0:	3b30      	subs	r3, #48	@ 0x30
 80047c2:	2b09      	cmp	r3, #9
 80047c4:	d94b      	bls.n	800485e <_vfiprintf_r+0x1a2>
 80047c6:	b1b0      	cbz	r0, 80047f6 <_vfiprintf_r+0x13a>
 80047c8:	9207      	str	r2, [sp, #28]
 80047ca:	e014      	b.n	80047f6 <_vfiprintf_r+0x13a>
 80047cc:	eba0 0308 	sub.w	r3, r0, r8
 80047d0:	fa09 f303 	lsl.w	r3, r9, r3
 80047d4:	4313      	orrs	r3, r2
 80047d6:	9304      	str	r3, [sp, #16]
 80047d8:	46a2      	mov	sl, r4
 80047da:	e7d2      	b.n	8004782 <_vfiprintf_r+0xc6>
 80047dc:	9b03      	ldr	r3, [sp, #12]
 80047de:	1d19      	adds	r1, r3, #4
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	9103      	str	r1, [sp, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bfbb      	ittet	lt
 80047e8:	425b      	neglt	r3, r3
 80047ea:	f042 0202 	orrlt.w	r2, r2, #2
 80047ee:	9307      	strge	r3, [sp, #28]
 80047f0:	9307      	strlt	r3, [sp, #28]
 80047f2:	bfb8      	it	lt
 80047f4:	9204      	strlt	r2, [sp, #16]
 80047f6:	7823      	ldrb	r3, [r4, #0]
 80047f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80047fa:	d10a      	bne.n	8004812 <_vfiprintf_r+0x156>
 80047fc:	7863      	ldrb	r3, [r4, #1]
 80047fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004800:	d132      	bne.n	8004868 <_vfiprintf_r+0x1ac>
 8004802:	9b03      	ldr	r3, [sp, #12]
 8004804:	1d1a      	adds	r2, r3, #4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	9203      	str	r2, [sp, #12]
 800480a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800480e:	3402      	adds	r4, #2
 8004810:	9305      	str	r3, [sp, #20]
 8004812:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80048e8 <_vfiprintf_r+0x22c>
 8004816:	7821      	ldrb	r1, [r4, #0]
 8004818:	2203      	movs	r2, #3
 800481a:	4650      	mov	r0, sl
 800481c:	f7fb fce0 	bl	80001e0 <memchr>
 8004820:	b138      	cbz	r0, 8004832 <_vfiprintf_r+0x176>
 8004822:	9b04      	ldr	r3, [sp, #16]
 8004824:	eba0 000a 	sub.w	r0, r0, sl
 8004828:	2240      	movs	r2, #64	@ 0x40
 800482a:	4082      	lsls	r2, r0
 800482c:	4313      	orrs	r3, r2
 800482e:	3401      	adds	r4, #1
 8004830:	9304      	str	r3, [sp, #16]
 8004832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004836:	4829      	ldr	r0, [pc, #164]	@ (80048dc <_vfiprintf_r+0x220>)
 8004838:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800483c:	2206      	movs	r2, #6
 800483e:	f7fb fccf 	bl	80001e0 <memchr>
 8004842:	2800      	cmp	r0, #0
 8004844:	d03f      	beq.n	80048c6 <_vfiprintf_r+0x20a>
 8004846:	4b26      	ldr	r3, [pc, #152]	@ (80048e0 <_vfiprintf_r+0x224>)
 8004848:	bb1b      	cbnz	r3, 8004892 <_vfiprintf_r+0x1d6>
 800484a:	9b03      	ldr	r3, [sp, #12]
 800484c:	3307      	adds	r3, #7
 800484e:	f023 0307 	bic.w	r3, r3, #7
 8004852:	3308      	adds	r3, #8
 8004854:	9303      	str	r3, [sp, #12]
 8004856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004858:	443b      	add	r3, r7
 800485a:	9309      	str	r3, [sp, #36]	@ 0x24
 800485c:	e76a      	b.n	8004734 <_vfiprintf_r+0x78>
 800485e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004862:	460c      	mov	r4, r1
 8004864:	2001      	movs	r0, #1
 8004866:	e7a8      	b.n	80047ba <_vfiprintf_r+0xfe>
 8004868:	2300      	movs	r3, #0
 800486a:	3401      	adds	r4, #1
 800486c:	9305      	str	r3, [sp, #20]
 800486e:	4619      	mov	r1, r3
 8004870:	f04f 0c0a 	mov.w	ip, #10
 8004874:	4620      	mov	r0, r4
 8004876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800487a:	3a30      	subs	r2, #48	@ 0x30
 800487c:	2a09      	cmp	r2, #9
 800487e:	d903      	bls.n	8004888 <_vfiprintf_r+0x1cc>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0c6      	beq.n	8004812 <_vfiprintf_r+0x156>
 8004884:	9105      	str	r1, [sp, #20]
 8004886:	e7c4      	b.n	8004812 <_vfiprintf_r+0x156>
 8004888:	fb0c 2101 	mla	r1, ip, r1, r2
 800488c:	4604      	mov	r4, r0
 800488e:	2301      	movs	r3, #1
 8004890:	e7f0      	b.n	8004874 <_vfiprintf_r+0x1b8>
 8004892:	ab03      	add	r3, sp, #12
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	462a      	mov	r2, r5
 8004898:	4b12      	ldr	r3, [pc, #72]	@ (80048e4 <_vfiprintf_r+0x228>)
 800489a:	a904      	add	r1, sp, #16
 800489c:	4630      	mov	r0, r6
 800489e:	f3af 8000 	nop.w
 80048a2:	4607      	mov	r7, r0
 80048a4:	1c78      	adds	r0, r7, #1
 80048a6:	d1d6      	bne.n	8004856 <_vfiprintf_r+0x19a>
 80048a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048aa:	07d9      	lsls	r1, r3, #31
 80048ac:	d405      	bmi.n	80048ba <_vfiprintf_r+0x1fe>
 80048ae:	89ab      	ldrh	r3, [r5, #12]
 80048b0:	059a      	lsls	r2, r3, #22
 80048b2:	d402      	bmi.n	80048ba <_vfiprintf_r+0x1fe>
 80048b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048b6:	f7ff fddd 	bl	8004474 <__retarget_lock_release_recursive>
 80048ba:	89ab      	ldrh	r3, [r5, #12]
 80048bc:	065b      	lsls	r3, r3, #25
 80048be:	f53f af1f 	bmi.w	8004700 <_vfiprintf_r+0x44>
 80048c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048c4:	e71e      	b.n	8004704 <_vfiprintf_r+0x48>
 80048c6:	ab03      	add	r3, sp, #12
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	462a      	mov	r2, r5
 80048cc:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <_vfiprintf_r+0x228>)
 80048ce:	a904      	add	r1, sp, #16
 80048d0:	4630      	mov	r0, r6
 80048d2:	f000 f879 	bl	80049c8 <_printf_i>
 80048d6:	e7e4      	b.n	80048a2 <_vfiprintf_r+0x1e6>
 80048d8:	0800504c 	.word	0x0800504c
 80048dc:	08005056 	.word	0x08005056
 80048e0:	00000000 	.word	0x00000000
 80048e4:	08004697 	.word	0x08004697
 80048e8:	08005052 	.word	0x08005052

080048ec <_printf_common>:
 80048ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	4616      	mov	r6, r2
 80048f2:	4698      	mov	r8, r3
 80048f4:	688a      	ldr	r2, [r1, #8]
 80048f6:	690b      	ldr	r3, [r1, #16]
 80048f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048fc:	4293      	cmp	r3, r2
 80048fe:	bfb8      	it	lt
 8004900:	4613      	movlt	r3, r2
 8004902:	6033      	str	r3, [r6, #0]
 8004904:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004908:	4607      	mov	r7, r0
 800490a:	460c      	mov	r4, r1
 800490c:	b10a      	cbz	r2, 8004912 <_printf_common+0x26>
 800490e:	3301      	adds	r3, #1
 8004910:	6033      	str	r3, [r6, #0]
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	0699      	lsls	r1, r3, #26
 8004916:	bf42      	ittt	mi
 8004918:	6833      	ldrmi	r3, [r6, #0]
 800491a:	3302      	addmi	r3, #2
 800491c:	6033      	strmi	r3, [r6, #0]
 800491e:	6825      	ldr	r5, [r4, #0]
 8004920:	f015 0506 	ands.w	r5, r5, #6
 8004924:	d106      	bne.n	8004934 <_printf_common+0x48>
 8004926:	f104 0a19 	add.w	sl, r4, #25
 800492a:	68e3      	ldr	r3, [r4, #12]
 800492c:	6832      	ldr	r2, [r6, #0]
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	42ab      	cmp	r3, r5
 8004932:	dc26      	bgt.n	8004982 <_printf_common+0x96>
 8004934:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004938:	6822      	ldr	r2, [r4, #0]
 800493a:	3b00      	subs	r3, #0
 800493c:	bf18      	it	ne
 800493e:	2301      	movne	r3, #1
 8004940:	0692      	lsls	r2, r2, #26
 8004942:	d42b      	bmi.n	800499c <_printf_common+0xb0>
 8004944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004948:	4641      	mov	r1, r8
 800494a:	4638      	mov	r0, r7
 800494c:	47c8      	blx	r9
 800494e:	3001      	adds	r0, #1
 8004950:	d01e      	beq.n	8004990 <_printf_common+0xa4>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	6922      	ldr	r2, [r4, #16]
 8004956:	f003 0306 	and.w	r3, r3, #6
 800495a:	2b04      	cmp	r3, #4
 800495c:	bf02      	ittt	eq
 800495e:	68e5      	ldreq	r5, [r4, #12]
 8004960:	6833      	ldreq	r3, [r6, #0]
 8004962:	1aed      	subeq	r5, r5, r3
 8004964:	68a3      	ldr	r3, [r4, #8]
 8004966:	bf0c      	ite	eq
 8004968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800496c:	2500      	movne	r5, #0
 800496e:	4293      	cmp	r3, r2
 8004970:	bfc4      	itt	gt
 8004972:	1a9b      	subgt	r3, r3, r2
 8004974:	18ed      	addgt	r5, r5, r3
 8004976:	2600      	movs	r6, #0
 8004978:	341a      	adds	r4, #26
 800497a:	42b5      	cmp	r5, r6
 800497c:	d11a      	bne.n	80049b4 <_printf_common+0xc8>
 800497e:	2000      	movs	r0, #0
 8004980:	e008      	b.n	8004994 <_printf_common+0xa8>
 8004982:	2301      	movs	r3, #1
 8004984:	4652      	mov	r2, sl
 8004986:	4641      	mov	r1, r8
 8004988:	4638      	mov	r0, r7
 800498a:	47c8      	blx	r9
 800498c:	3001      	adds	r0, #1
 800498e:	d103      	bne.n	8004998 <_printf_common+0xac>
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004998:	3501      	adds	r5, #1
 800499a:	e7c6      	b.n	800492a <_printf_common+0x3e>
 800499c:	18e1      	adds	r1, r4, r3
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	2030      	movs	r0, #48	@ 0x30
 80049a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049a6:	4422      	add	r2, r4
 80049a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049b0:	3302      	adds	r3, #2
 80049b2:	e7c7      	b.n	8004944 <_printf_common+0x58>
 80049b4:	2301      	movs	r3, #1
 80049b6:	4622      	mov	r2, r4
 80049b8:	4641      	mov	r1, r8
 80049ba:	4638      	mov	r0, r7
 80049bc:	47c8      	blx	r9
 80049be:	3001      	adds	r0, #1
 80049c0:	d0e6      	beq.n	8004990 <_printf_common+0xa4>
 80049c2:	3601      	adds	r6, #1
 80049c4:	e7d9      	b.n	800497a <_printf_common+0x8e>
	...

080049c8 <_printf_i>:
 80049c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049cc:	7e0f      	ldrb	r7, [r1, #24]
 80049ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049d0:	2f78      	cmp	r7, #120	@ 0x78
 80049d2:	4691      	mov	r9, r2
 80049d4:	4680      	mov	r8, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	469a      	mov	sl, r3
 80049da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049de:	d807      	bhi.n	80049f0 <_printf_i+0x28>
 80049e0:	2f62      	cmp	r7, #98	@ 0x62
 80049e2:	d80a      	bhi.n	80049fa <_printf_i+0x32>
 80049e4:	2f00      	cmp	r7, #0
 80049e6:	f000 80d2 	beq.w	8004b8e <_printf_i+0x1c6>
 80049ea:	2f58      	cmp	r7, #88	@ 0x58
 80049ec:	f000 80b9 	beq.w	8004b62 <_printf_i+0x19a>
 80049f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049f8:	e03a      	b.n	8004a70 <_printf_i+0xa8>
 80049fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049fe:	2b15      	cmp	r3, #21
 8004a00:	d8f6      	bhi.n	80049f0 <_printf_i+0x28>
 8004a02:	a101      	add	r1, pc, #4	@ (adr r1, 8004a08 <_printf_i+0x40>)
 8004a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a08:	08004a61 	.word	0x08004a61
 8004a0c:	08004a75 	.word	0x08004a75
 8004a10:	080049f1 	.word	0x080049f1
 8004a14:	080049f1 	.word	0x080049f1
 8004a18:	080049f1 	.word	0x080049f1
 8004a1c:	080049f1 	.word	0x080049f1
 8004a20:	08004a75 	.word	0x08004a75
 8004a24:	080049f1 	.word	0x080049f1
 8004a28:	080049f1 	.word	0x080049f1
 8004a2c:	080049f1 	.word	0x080049f1
 8004a30:	080049f1 	.word	0x080049f1
 8004a34:	08004b75 	.word	0x08004b75
 8004a38:	08004a9f 	.word	0x08004a9f
 8004a3c:	08004b2f 	.word	0x08004b2f
 8004a40:	080049f1 	.word	0x080049f1
 8004a44:	080049f1 	.word	0x080049f1
 8004a48:	08004b97 	.word	0x08004b97
 8004a4c:	080049f1 	.word	0x080049f1
 8004a50:	08004a9f 	.word	0x08004a9f
 8004a54:	080049f1 	.word	0x080049f1
 8004a58:	080049f1 	.word	0x080049f1
 8004a5c:	08004b37 	.word	0x08004b37
 8004a60:	6833      	ldr	r3, [r6, #0]
 8004a62:	1d1a      	adds	r2, r3, #4
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6032      	str	r2, [r6, #0]
 8004a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a70:	2301      	movs	r3, #1
 8004a72:	e09d      	b.n	8004bb0 <_printf_i+0x1e8>
 8004a74:	6833      	ldr	r3, [r6, #0]
 8004a76:	6820      	ldr	r0, [r4, #0]
 8004a78:	1d19      	adds	r1, r3, #4
 8004a7a:	6031      	str	r1, [r6, #0]
 8004a7c:	0606      	lsls	r6, r0, #24
 8004a7e:	d501      	bpl.n	8004a84 <_printf_i+0xbc>
 8004a80:	681d      	ldr	r5, [r3, #0]
 8004a82:	e003      	b.n	8004a8c <_printf_i+0xc4>
 8004a84:	0645      	lsls	r5, r0, #25
 8004a86:	d5fb      	bpl.n	8004a80 <_printf_i+0xb8>
 8004a88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a8c:	2d00      	cmp	r5, #0
 8004a8e:	da03      	bge.n	8004a98 <_printf_i+0xd0>
 8004a90:	232d      	movs	r3, #45	@ 0x2d
 8004a92:	426d      	negs	r5, r5
 8004a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a98:	4859      	ldr	r0, [pc, #356]	@ (8004c00 <_printf_i+0x238>)
 8004a9a:	230a      	movs	r3, #10
 8004a9c:	e011      	b.n	8004ac2 <_printf_i+0xfa>
 8004a9e:	6821      	ldr	r1, [r4, #0]
 8004aa0:	6833      	ldr	r3, [r6, #0]
 8004aa2:	0608      	lsls	r0, r1, #24
 8004aa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004aa8:	d402      	bmi.n	8004ab0 <_printf_i+0xe8>
 8004aaa:	0649      	lsls	r1, r1, #25
 8004aac:	bf48      	it	mi
 8004aae:	b2ad      	uxthmi	r5, r5
 8004ab0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ab2:	4853      	ldr	r0, [pc, #332]	@ (8004c00 <_printf_i+0x238>)
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	bf14      	ite	ne
 8004ab8:	230a      	movne	r3, #10
 8004aba:	2308      	moveq	r3, #8
 8004abc:	2100      	movs	r1, #0
 8004abe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ac2:	6866      	ldr	r6, [r4, #4]
 8004ac4:	60a6      	str	r6, [r4, #8]
 8004ac6:	2e00      	cmp	r6, #0
 8004ac8:	bfa2      	ittt	ge
 8004aca:	6821      	ldrge	r1, [r4, #0]
 8004acc:	f021 0104 	bicge.w	r1, r1, #4
 8004ad0:	6021      	strge	r1, [r4, #0]
 8004ad2:	b90d      	cbnz	r5, 8004ad8 <_printf_i+0x110>
 8004ad4:	2e00      	cmp	r6, #0
 8004ad6:	d04b      	beq.n	8004b70 <_printf_i+0x1a8>
 8004ad8:	4616      	mov	r6, r2
 8004ada:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ade:	fb03 5711 	mls	r7, r3, r1, r5
 8004ae2:	5dc7      	ldrb	r7, [r0, r7]
 8004ae4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ae8:	462f      	mov	r7, r5
 8004aea:	42bb      	cmp	r3, r7
 8004aec:	460d      	mov	r5, r1
 8004aee:	d9f4      	bls.n	8004ada <_printf_i+0x112>
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d10b      	bne.n	8004b0c <_printf_i+0x144>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	07df      	lsls	r7, r3, #31
 8004af8:	d508      	bpl.n	8004b0c <_printf_i+0x144>
 8004afa:	6923      	ldr	r3, [r4, #16]
 8004afc:	6861      	ldr	r1, [r4, #4]
 8004afe:	4299      	cmp	r1, r3
 8004b00:	bfde      	ittt	le
 8004b02:	2330      	movle	r3, #48	@ 0x30
 8004b04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b0c:	1b92      	subs	r2, r2, r6
 8004b0e:	6122      	str	r2, [r4, #16]
 8004b10:	f8cd a000 	str.w	sl, [sp]
 8004b14:	464b      	mov	r3, r9
 8004b16:	aa03      	add	r2, sp, #12
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	f7ff fee6 	bl	80048ec <_printf_common>
 8004b20:	3001      	adds	r0, #1
 8004b22:	d14a      	bne.n	8004bba <_printf_i+0x1f2>
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	b004      	add	sp, #16
 8004b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	f043 0320 	orr.w	r3, r3, #32
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	4833      	ldr	r0, [pc, #204]	@ (8004c04 <_printf_i+0x23c>)
 8004b38:	2778      	movs	r7, #120	@ 0x78
 8004b3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	6831      	ldr	r1, [r6, #0]
 8004b42:	061f      	lsls	r7, r3, #24
 8004b44:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b48:	d402      	bmi.n	8004b50 <_printf_i+0x188>
 8004b4a:	065f      	lsls	r7, r3, #25
 8004b4c:	bf48      	it	mi
 8004b4e:	b2ad      	uxthmi	r5, r5
 8004b50:	6031      	str	r1, [r6, #0]
 8004b52:	07d9      	lsls	r1, r3, #31
 8004b54:	bf44      	itt	mi
 8004b56:	f043 0320 	orrmi.w	r3, r3, #32
 8004b5a:	6023      	strmi	r3, [r4, #0]
 8004b5c:	b11d      	cbz	r5, 8004b66 <_printf_i+0x19e>
 8004b5e:	2310      	movs	r3, #16
 8004b60:	e7ac      	b.n	8004abc <_printf_i+0xf4>
 8004b62:	4827      	ldr	r0, [pc, #156]	@ (8004c00 <_printf_i+0x238>)
 8004b64:	e7e9      	b.n	8004b3a <_printf_i+0x172>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	f023 0320 	bic.w	r3, r3, #32
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	e7f6      	b.n	8004b5e <_printf_i+0x196>
 8004b70:	4616      	mov	r6, r2
 8004b72:	e7bd      	b.n	8004af0 <_printf_i+0x128>
 8004b74:	6833      	ldr	r3, [r6, #0]
 8004b76:	6825      	ldr	r5, [r4, #0]
 8004b78:	6961      	ldr	r1, [r4, #20]
 8004b7a:	1d18      	adds	r0, r3, #4
 8004b7c:	6030      	str	r0, [r6, #0]
 8004b7e:	062e      	lsls	r6, r5, #24
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	d501      	bpl.n	8004b88 <_printf_i+0x1c0>
 8004b84:	6019      	str	r1, [r3, #0]
 8004b86:	e002      	b.n	8004b8e <_printf_i+0x1c6>
 8004b88:	0668      	lsls	r0, r5, #25
 8004b8a:	d5fb      	bpl.n	8004b84 <_printf_i+0x1bc>
 8004b8c:	8019      	strh	r1, [r3, #0]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	6123      	str	r3, [r4, #16]
 8004b92:	4616      	mov	r6, r2
 8004b94:	e7bc      	b.n	8004b10 <_printf_i+0x148>
 8004b96:	6833      	ldr	r3, [r6, #0]
 8004b98:	1d1a      	adds	r2, r3, #4
 8004b9a:	6032      	str	r2, [r6, #0]
 8004b9c:	681e      	ldr	r6, [r3, #0]
 8004b9e:	6862      	ldr	r2, [r4, #4]
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f7fb fb1c 	bl	80001e0 <memchr>
 8004ba8:	b108      	cbz	r0, 8004bae <_printf_i+0x1e6>
 8004baa:	1b80      	subs	r0, r0, r6
 8004bac:	6060      	str	r0, [r4, #4]
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	6123      	str	r3, [r4, #16]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bb8:	e7aa      	b.n	8004b10 <_printf_i+0x148>
 8004bba:	6923      	ldr	r3, [r4, #16]
 8004bbc:	4632      	mov	r2, r6
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	47d0      	blx	sl
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d0ad      	beq.n	8004b24 <_printf_i+0x15c>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	079b      	lsls	r3, r3, #30
 8004bcc:	d413      	bmi.n	8004bf6 <_printf_i+0x22e>
 8004bce:	68e0      	ldr	r0, [r4, #12]
 8004bd0:	9b03      	ldr	r3, [sp, #12]
 8004bd2:	4298      	cmp	r0, r3
 8004bd4:	bfb8      	it	lt
 8004bd6:	4618      	movlt	r0, r3
 8004bd8:	e7a6      	b.n	8004b28 <_printf_i+0x160>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	4632      	mov	r2, r6
 8004bde:	4649      	mov	r1, r9
 8004be0:	4640      	mov	r0, r8
 8004be2:	47d0      	blx	sl
 8004be4:	3001      	adds	r0, #1
 8004be6:	d09d      	beq.n	8004b24 <_printf_i+0x15c>
 8004be8:	3501      	adds	r5, #1
 8004bea:	68e3      	ldr	r3, [r4, #12]
 8004bec:	9903      	ldr	r1, [sp, #12]
 8004bee:	1a5b      	subs	r3, r3, r1
 8004bf0:	42ab      	cmp	r3, r5
 8004bf2:	dcf2      	bgt.n	8004bda <_printf_i+0x212>
 8004bf4:	e7eb      	b.n	8004bce <_printf_i+0x206>
 8004bf6:	2500      	movs	r5, #0
 8004bf8:	f104 0619 	add.w	r6, r4, #25
 8004bfc:	e7f5      	b.n	8004bea <_printf_i+0x222>
 8004bfe:	bf00      	nop
 8004c00:	0800505d 	.word	0x0800505d
 8004c04:	0800506e 	.word	0x0800506e

08004c08 <__sflush_r>:
 8004c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c10:	0716      	lsls	r6, r2, #28
 8004c12:	4605      	mov	r5, r0
 8004c14:	460c      	mov	r4, r1
 8004c16:	d454      	bmi.n	8004cc2 <__sflush_r+0xba>
 8004c18:	684b      	ldr	r3, [r1, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	dc02      	bgt.n	8004c24 <__sflush_r+0x1c>
 8004c1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	dd48      	ble.n	8004cb6 <__sflush_r+0xae>
 8004c24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c26:	2e00      	cmp	r6, #0
 8004c28:	d045      	beq.n	8004cb6 <__sflush_r+0xae>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c30:	682f      	ldr	r7, [r5, #0]
 8004c32:	6a21      	ldr	r1, [r4, #32]
 8004c34:	602b      	str	r3, [r5, #0]
 8004c36:	d030      	beq.n	8004c9a <__sflush_r+0x92>
 8004c38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	0759      	lsls	r1, r3, #29
 8004c3e:	d505      	bpl.n	8004c4c <__sflush_r+0x44>
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c46:	b10b      	cbz	r3, 8004c4c <__sflush_r+0x44>
 8004c48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c4a:	1ad2      	subs	r2, r2, r3
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c50:	6a21      	ldr	r1, [r4, #32]
 8004c52:	4628      	mov	r0, r5
 8004c54:	47b0      	blx	r6
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	d106      	bne.n	8004c6a <__sflush_r+0x62>
 8004c5c:	6829      	ldr	r1, [r5, #0]
 8004c5e:	291d      	cmp	r1, #29
 8004c60:	d82b      	bhi.n	8004cba <__sflush_r+0xb2>
 8004c62:	4a2a      	ldr	r2, [pc, #168]	@ (8004d0c <__sflush_r+0x104>)
 8004c64:	410a      	asrs	r2, r1
 8004c66:	07d6      	lsls	r6, r2, #31
 8004c68:	d427      	bmi.n	8004cba <__sflush_r+0xb2>
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	6062      	str	r2, [r4, #4]
 8004c6e:	04d9      	lsls	r1, r3, #19
 8004c70:	6922      	ldr	r2, [r4, #16]
 8004c72:	6022      	str	r2, [r4, #0]
 8004c74:	d504      	bpl.n	8004c80 <__sflush_r+0x78>
 8004c76:	1c42      	adds	r2, r0, #1
 8004c78:	d101      	bne.n	8004c7e <__sflush_r+0x76>
 8004c7a:	682b      	ldr	r3, [r5, #0]
 8004c7c:	b903      	cbnz	r3, 8004c80 <__sflush_r+0x78>
 8004c7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c82:	602f      	str	r7, [r5, #0]
 8004c84:	b1b9      	cbz	r1, 8004cb6 <__sflush_r+0xae>
 8004c86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c8a:	4299      	cmp	r1, r3
 8004c8c:	d002      	beq.n	8004c94 <__sflush_r+0x8c>
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f7ff fbf2 	bl	8004478 <_free_r>
 8004c94:	2300      	movs	r3, #0
 8004c96:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c98:	e00d      	b.n	8004cb6 <__sflush_r+0xae>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b0      	blx	r6
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	1c50      	adds	r0, r2, #1
 8004ca4:	d1c9      	bne.n	8004c3a <__sflush_r+0x32>
 8004ca6:	682b      	ldr	r3, [r5, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0c6      	beq.n	8004c3a <__sflush_r+0x32>
 8004cac:	2b1d      	cmp	r3, #29
 8004cae:	d001      	beq.n	8004cb4 <__sflush_r+0xac>
 8004cb0:	2b16      	cmp	r3, #22
 8004cb2:	d11e      	bne.n	8004cf2 <__sflush_r+0xea>
 8004cb4:	602f      	str	r7, [r5, #0]
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	e022      	b.n	8004d00 <__sflush_r+0xf8>
 8004cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cbe:	b21b      	sxth	r3, r3
 8004cc0:	e01b      	b.n	8004cfa <__sflush_r+0xf2>
 8004cc2:	690f      	ldr	r7, [r1, #16]
 8004cc4:	2f00      	cmp	r7, #0
 8004cc6:	d0f6      	beq.n	8004cb6 <__sflush_r+0xae>
 8004cc8:	0793      	lsls	r3, r2, #30
 8004cca:	680e      	ldr	r6, [r1, #0]
 8004ccc:	bf08      	it	eq
 8004cce:	694b      	ldreq	r3, [r1, #20]
 8004cd0:	600f      	str	r7, [r1, #0]
 8004cd2:	bf18      	it	ne
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	eba6 0807 	sub.w	r8, r6, r7
 8004cda:	608b      	str	r3, [r1, #8]
 8004cdc:	f1b8 0f00 	cmp.w	r8, #0
 8004ce0:	dde9      	ble.n	8004cb6 <__sflush_r+0xae>
 8004ce2:	6a21      	ldr	r1, [r4, #32]
 8004ce4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ce6:	4643      	mov	r3, r8
 8004ce8:	463a      	mov	r2, r7
 8004cea:	4628      	mov	r0, r5
 8004cec:	47b0      	blx	r6
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	dc08      	bgt.n	8004d04 <__sflush_r+0xfc>
 8004cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cfa:	81a3      	strh	r3, [r4, #12]
 8004cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d04:	4407      	add	r7, r0
 8004d06:	eba8 0800 	sub.w	r8, r8, r0
 8004d0a:	e7e7      	b.n	8004cdc <__sflush_r+0xd4>
 8004d0c:	dfbffffe 	.word	0xdfbffffe

08004d10 <_fflush_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	690b      	ldr	r3, [r1, #16]
 8004d14:	4605      	mov	r5, r0
 8004d16:	460c      	mov	r4, r1
 8004d18:	b913      	cbnz	r3, 8004d20 <_fflush_r+0x10>
 8004d1a:	2500      	movs	r5, #0
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	b118      	cbz	r0, 8004d2a <_fflush_r+0x1a>
 8004d22:	6a03      	ldr	r3, [r0, #32]
 8004d24:	b90b      	cbnz	r3, 8004d2a <_fflush_r+0x1a>
 8004d26:	f7ff fa49 	bl	80041bc <__sinit>
 8004d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f3      	beq.n	8004d1a <_fflush_r+0xa>
 8004d32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d34:	07d0      	lsls	r0, r2, #31
 8004d36:	d404      	bmi.n	8004d42 <_fflush_r+0x32>
 8004d38:	0599      	lsls	r1, r3, #22
 8004d3a:	d402      	bmi.n	8004d42 <_fflush_r+0x32>
 8004d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d3e:	f7ff fb98 	bl	8004472 <__retarget_lock_acquire_recursive>
 8004d42:	4628      	mov	r0, r5
 8004d44:	4621      	mov	r1, r4
 8004d46:	f7ff ff5f 	bl	8004c08 <__sflush_r>
 8004d4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d4c:	07da      	lsls	r2, r3, #31
 8004d4e:	4605      	mov	r5, r0
 8004d50:	d4e4      	bmi.n	8004d1c <_fflush_r+0xc>
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	059b      	lsls	r3, r3, #22
 8004d56:	d4e1      	bmi.n	8004d1c <_fflush_r+0xc>
 8004d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d5a:	f7ff fb8b 	bl	8004474 <__retarget_lock_release_recursive>
 8004d5e:	e7dd      	b.n	8004d1c <_fflush_r+0xc>

08004d60 <__swbuf_r>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	460e      	mov	r6, r1
 8004d64:	4614      	mov	r4, r2
 8004d66:	4605      	mov	r5, r0
 8004d68:	b118      	cbz	r0, 8004d72 <__swbuf_r+0x12>
 8004d6a:	6a03      	ldr	r3, [r0, #32]
 8004d6c:	b90b      	cbnz	r3, 8004d72 <__swbuf_r+0x12>
 8004d6e:	f7ff fa25 	bl	80041bc <__sinit>
 8004d72:	69a3      	ldr	r3, [r4, #24]
 8004d74:	60a3      	str	r3, [r4, #8]
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	071a      	lsls	r2, r3, #28
 8004d7a:	d501      	bpl.n	8004d80 <__swbuf_r+0x20>
 8004d7c:	6923      	ldr	r3, [r4, #16]
 8004d7e:	b943      	cbnz	r3, 8004d92 <__swbuf_r+0x32>
 8004d80:	4621      	mov	r1, r4
 8004d82:	4628      	mov	r0, r5
 8004d84:	f000 f82a 	bl	8004ddc <__swsetup_r>
 8004d88:	b118      	cbz	r0, 8004d92 <__swbuf_r+0x32>
 8004d8a:	f04f 37ff 	mov.w	r7, #4294967295
 8004d8e:	4638      	mov	r0, r7
 8004d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	6922      	ldr	r2, [r4, #16]
 8004d96:	1a98      	subs	r0, r3, r2
 8004d98:	6963      	ldr	r3, [r4, #20]
 8004d9a:	b2f6      	uxtb	r6, r6
 8004d9c:	4283      	cmp	r3, r0
 8004d9e:	4637      	mov	r7, r6
 8004da0:	dc05      	bgt.n	8004dae <__swbuf_r+0x4e>
 8004da2:	4621      	mov	r1, r4
 8004da4:	4628      	mov	r0, r5
 8004da6:	f7ff ffb3 	bl	8004d10 <_fflush_r>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d1ed      	bne.n	8004d8a <__swbuf_r+0x2a>
 8004dae:	68a3      	ldr	r3, [r4, #8]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	60a3      	str	r3, [r4, #8]
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	6022      	str	r2, [r4, #0]
 8004dba:	701e      	strb	r6, [r3, #0]
 8004dbc:	6962      	ldr	r2, [r4, #20]
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d004      	beq.n	8004dce <__swbuf_r+0x6e>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	07db      	lsls	r3, r3, #31
 8004dc8:	d5e1      	bpl.n	8004d8e <__swbuf_r+0x2e>
 8004dca:	2e0a      	cmp	r6, #10
 8004dcc:	d1df      	bne.n	8004d8e <__swbuf_r+0x2e>
 8004dce:	4621      	mov	r1, r4
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f7ff ff9d 	bl	8004d10 <_fflush_r>
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d0d9      	beq.n	8004d8e <__swbuf_r+0x2e>
 8004dda:	e7d6      	b.n	8004d8a <__swbuf_r+0x2a>

08004ddc <__swsetup_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4b29      	ldr	r3, [pc, #164]	@ (8004e84 <__swsetup_r+0xa8>)
 8004de0:	4605      	mov	r5, r0
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	460c      	mov	r4, r1
 8004de6:	b118      	cbz	r0, 8004df0 <__swsetup_r+0x14>
 8004de8:	6a03      	ldr	r3, [r0, #32]
 8004dea:	b90b      	cbnz	r3, 8004df0 <__swsetup_r+0x14>
 8004dec:	f7ff f9e6 	bl	80041bc <__sinit>
 8004df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df4:	0719      	lsls	r1, r3, #28
 8004df6:	d422      	bmi.n	8004e3e <__swsetup_r+0x62>
 8004df8:	06da      	lsls	r2, r3, #27
 8004dfa:	d407      	bmi.n	8004e0c <__swsetup_r+0x30>
 8004dfc:	2209      	movs	r2, #9
 8004dfe:	602a      	str	r2, [r5, #0]
 8004e00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0a:	e033      	b.n	8004e74 <__swsetup_r+0x98>
 8004e0c:	0758      	lsls	r0, r3, #29
 8004e0e:	d512      	bpl.n	8004e36 <__swsetup_r+0x5a>
 8004e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e12:	b141      	cbz	r1, 8004e26 <__swsetup_r+0x4a>
 8004e14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e18:	4299      	cmp	r1, r3
 8004e1a:	d002      	beq.n	8004e22 <__swsetup_r+0x46>
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f7ff fb2b 	bl	8004478 <_free_r>
 8004e22:	2300      	movs	r3, #0
 8004e24:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e26:	89a3      	ldrh	r3, [r4, #12]
 8004e28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e2c:	81a3      	strh	r3, [r4, #12]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	6063      	str	r3, [r4, #4]
 8004e32:	6923      	ldr	r3, [r4, #16]
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	f043 0308 	orr.w	r3, r3, #8
 8004e3c:	81a3      	strh	r3, [r4, #12]
 8004e3e:	6923      	ldr	r3, [r4, #16]
 8004e40:	b94b      	cbnz	r3, 8004e56 <__swsetup_r+0x7a>
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e4c:	d003      	beq.n	8004e56 <__swsetup_r+0x7a>
 8004e4e:	4621      	mov	r1, r4
 8004e50:	4628      	mov	r0, r5
 8004e52:	f000 f84f 	bl	8004ef4 <__smakebuf_r>
 8004e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e5a:	f013 0201 	ands.w	r2, r3, #1
 8004e5e:	d00a      	beq.n	8004e76 <__swsetup_r+0x9a>
 8004e60:	2200      	movs	r2, #0
 8004e62:	60a2      	str	r2, [r4, #8]
 8004e64:	6962      	ldr	r2, [r4, #20]
 8004e66:	4252      	negs	r2, r2
 8004e68:	61a2      	str	r2, [r4, #24]
 8004e6a:	6922      	ldr	r2, [r4, #16]
 8004e6c:	b942      	cbnz	r2, 8004e80 <__swsetup_r+0xa4>
 8004e6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e72:	d1c5      	bne.n	8004e00 <__swsetup_r+0x24>
 8004e74:	bd38      	pop	{r3, r4, r5, pc}
 8004e76:	0799      	lsls	r1, r3, #30
 8004e78:	bf58      	it	pl
 8004e7a:	6962      	ldrpl	r2, [r4, #20]
 8004e7c:	60a2      	str	r2, [r4, #8]
 8004e7e:	e7f4      	b.n	8004e6a <__swsetup_r+0x8e>
 8004e80:	2000      	movs	r0, #0
 8004e82:	e7f7      	b.n	8004e74 <__swsetup_r+0x98>
 8004e84:	2000001c 	.word	0x2000001c

08004e88 <_sbrk_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4d06      	ldr	r5, [pc, #24]	@ (8004ea4 <_sbrk_r+0x1c>)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	4604      	mov	r4, r0
 8004e90:	4608      	mov	r0, r1
 8004e92:	602b      	str	r3, [r5, #0]
 8004e94:	f7fb feba 	bl	8000c0c <_sbrk>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d102      	bne.n	8004ea2 <_sbrk_r+0x1a>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	b103      	cbz	r3, 8004ea2 <_sbrk_r+0x1a>
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	bd38      	pop	{r3, r4, r5, pc}
 8004ea4:	200042b4 	.word	0x200042b4

08004ea8 <__swhatbuf_r>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	460c      	mov	r4, r1
 8004eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	b096      	sub	sp, #88	@ 0x58
 8004eb4:	4615      	mov	r5, r2
 8004eb6:	461e      	mov	r6, r3
 8004eb8:	da0d      	bge.n	8004ed6 <__swhatbuf_r+0x2e>
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ec0:	f04f 0100 	mov.w	r1, #0
 8004ec4:	bf14      	ite	ne
 8004ec6:	2340      	movne	r3, #64	@ 0x40
 8004ec8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ecc:	2000      	movs	r0, #0
 8004ece:	6031      	str	r1, [r6, #0]
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	b016      	add	sp, #88	@ 0x58
 8004ed4:	bd70      	pop	{r4, r5, r6, pc}
 8004ed6:	466a      	mov	r2, sp
 8004ed8:	f000 f848 	bl	8004f6c <_fstat_r>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	dbec      	blt.n	8004eba <__swhatbuf_r+0x12>
 8004ee0:	9901      	ldr	r1, [sp, #4]
 8004ee2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004ee6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004eea:	4259      	negs	r1, r3
 8004eec:	4159      	adcs	r1, r3
 8004eee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ef2:	e7eb      	b.n	8004ecc <__swhatbuf_r+0x24>

08004ef4 <__smakebuf_r>:
 8004ef4:	898b      	ldrh	r3, [r1, #12]
 8004ef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ef8:	079d      	lsls	r5, r3, #30
 8004efa:	4606      	mov	r6, r0
 8004efc:	460c      	mov	r4, r1
 8004efe:	d507      	bpl.n	8004f10 <__smakebuf_r+0x1c>
 8004f00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	6123      	str	r3, [r4, #16]
 8004f08:	2301      	movs	r3, #1
 8004f0a:	6163      	str	r3, [r4, #20]
 8004f0c:	b003      	add	sp, #12
 8004f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f10:	ab01      	add	r3, sp, #4
 8004f12:	466a      	mov	r2, sp
 8004f14:	f7ff ffc8 	bl	8004ea8 <__swhatbuf_r>
 8004f18:	9f00      	ldr	r7, [sp, #0]
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f7ff fb16 	bl	8004550 <_malloc_r>
 8004f24:	b948      	cbnz	r0, 8004f3a <__smakebuf_r+0x46>
 8004f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f2a:	059a      	lsls	r2, r3, #22
 8004f2c:	d4ee      	bmi.n	8004f0c <__smakebuf_r+0x18>
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	f043 0302 	orr.w	r3, r3, #2
 8004f36:	81a3      	strh	r3, [r4, #12]
 8004f38:	e7e2      	b.n	8004f00 <__smakebuf_r+0xc>
 8004f3a:	89a3      	ldrh	r3, [r4, #12]
 8004f3c:	6020      	str	r0, [r4, #0]
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f42:	81a3      	strh	r3, [r4, #12]
 8004f44:	9b01      	ldr	r3, [sp, #4]
 8004f46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f4a:	b15b      	cbz	r3, 8004f64 <__smakebuf_r+0x70>
 8004f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f50:	4630      	mov	r0, r6
 8004f52:	f000 f81d 	bl	8004f90 <_isatty_r>
 8004f56:	b128      	cbz	r0, 8004f64 <__smakebuf_r+0x70>
 8004f58:	89a3      	ldrh	r3, [r4, #12]
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	81a3      	strh	r3, [r4, #12]
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	431d      	orrs	r5, r3
 8004f68:	81a5      	strh	r5, [r4, #12]
 8004f6a:	e7cf      	b.n	8004f0c <__smakebuf_r+0x18>

08004f6c <_fstat_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4d07      	ldr	r5, [pc, #28]	@ (8004f8c <_fstat_r+0x20>)
 8004f70:	2300      	movs	r3, #0
 8004f72:	4604      	mov	r4, r0
 8004f74:	4608      	mov	r0, r1
 8004f76:	4611      	mov	r1, r2
 8004f78:	602b      	str	r3, [r5, #0]
 8004f7a:	f7fb fe1e 	bl	8000bba <_fstat>
 8004f7e:	1c43      	adds	r3, r0, #1
 8004f80:	d102      	bne.n	8004f88 <_fstat_r+0x1c>
 8004f82:	682b      	ldr	r3, [r5, #0]
 8004f84:	b103      	cbz	r3, 8004f88 <_fstat_r+0x1c>
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	bd38      	pop	{r3, r4, r5, pc}
 8004f8a:	bf00      	nop
 8004f8c:	200042b4 	.word	0x200042b4

08004f90 <_isatty_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4d06      	ldr	r5, [pc, #24]	@ (8004fac <_isatty_r+0x1c>)
 8004f94:	2300      	movs	r3, #0
 8004f96:	4604      	mov	r4, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	602b      	str	r3, [r5, #0]
 8004f9c:	f7fb fe1d 	bl	8000bda <_isatty>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_isatty_r+0x1a>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_isatty_r+0x1a>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	200042b4 	.word	0x200042b4

08004fb0 <_init>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr

08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
