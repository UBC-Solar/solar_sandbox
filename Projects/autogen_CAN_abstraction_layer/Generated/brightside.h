/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Thu Aug 29 13:19:22 2024.
 */

#ifndef BRIGHTSIDE_H
#define BRIGHTSIDE_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define BRIGHTSIDE_VOLTAGE_SENSORS_DATA_FRAME_ID (0x701u)
#define BRIGHTSIDE_CURRENT_SENSORS_DATA_FRAME_ID (0x702u)
#define BRIGHTSIDE_TEMP_SENSORS_DATA_FRAME_ID (0x703u)
#define BRIGHTSIDE_FAULTS_FRAME_ID (0x622u)
#define BRIGHTSIDE_VOLTAGE_SUMMARY_FRAME_ID (0x623u)
#define BRIGHTSIDE_PACK_HEALTH_FRAME_ID (0x624u)
#define BRIGHTSIDE_TEMP_SUMMARY_FRAME_ID (0x625u)
#define BRIGHTSIDE_MODULE_VOLTAGES_FRAME_ID (0x626u)
#define BRIGHTSIDE_MODULE_TEMPS_FRAME_ID (0x627u)
#define BRIGHTSIDE_ECU_STATUS_FRAME_ID (0x450u)
#define BRIGHTSIDE_INFORMATION_FRAME_ID (0x500u)
#define BRIGHTSIDE_STATUS_INFO_FRAME_ID (0x501u)
#define BRIGHTSIDE_BUS_MEASUREMENT_FRAME_ID (0x502u)
#define BRIGHTSIDE_VELOCITY_MEASUREMENT_FRAME_ID (0x503u)
#define BRIGHTSIDE_SINK_MOTOR_TEMP_MEAS_FRAME_ID (0x50bu)
#define BRIGHTSIDE_MODULE_STATUSES_FRAME_ID (0x628u)
#define BRIGHTSIDE_BALANCING_STATUS_FRAME_ID (0x629u)
#define BRIGHTSIDE_ECU_CHARGER_MODES_FRAME_ID (0x1806e5f4u)
#define BRIGHTSIDE_OBC_STATUS_FRAME_ID (0x18ff50e5u)
#define BRIGHTSIDE_PHASE_CURRENT_MEASUREMENT_FRAME_ID (0x504u)
#define BRIGHTSIDE_MOTOR_VOLTAGE_VECTOR_MEASURMENT_FRAME_ID (0x505u)
#define BRIGHTSIDE_MOTOR_CURRENT_VECTOR_MEASURMENT_FRAME_ID (0x506u)
#define BRIGHTSIDE_MOTOR_BACK_EMF_MEASUREMENT_FRAME_ID (0x507u)
#define BRIGHTSIDE_VOLTAGE_RAIL_MEASUREMENT_FIFTEEN_V_FRAME_ID (0x508u)
#define BRIGHTSIDE_VOLTAGE_RAIL_MEASUREMENT_TWO_FIVE_V_FRAME_ID (0x509u)
#define BRIGHTSIDE_FAN_SPEED_MEASUREMENT_FRAME_ID (0x50au)
#define BRIGHTSIDE_AIR_IN_CPU_TEMPERATURE_MEASUREMENT_FRAME_ID (0x50cu)
#define BRIGHTSIDE_ODOMETER_BUS_AMP_HOURS_MEASUREMENT_FRAME_ID (0x50eu)
#define BRIGHTSIDE_MITSUBA_DATA_REQUEST_FRAME_ID (0x8f89540u)
#define BRIGHTSIDE_MITSUBA_FRAME0_FRAME_ID (0x8850225u)
#define BRIGHTSIDE_MITSUBA_FRAME1_FRAME_ID (0x8950225u)
#define BRIGHTSIDE_MITSUBA_FRAME2_FRAME_ID (0x8a50225u)
#define BRIGHTSIDE_DID_NEXT_SCREEN_BUTTON_PRESS_FRAME_ID (0x400u)
#define BRIGHTSIDE_PERCENTAGE_OF_MAX_CURRENT_FRAME_ID (0x401u)
#define BRIGHTSIDE_MOTOR_POWER_RESET_COMMAND_FRAME_ID (0x402u)
#define BRIGHTSIDE_MCB_DRIVE_STATE_FRAME_ID (0x403u)
#define BRIGHTSIDE_MCB_DIAGNOSTICS_FRAME_ID (0x404u)
#define BRIGHTSIDE_RTC_TIMESTAMP_FRAME_ID (0x300u)
#define BRIGHTSIDE_IMU_X_FRAME_ID (0x752u)
#define BRIGHTSIDE_IMU_Y_FRAME_ID (0x753u)
#define BRIGHTSIDE_IMU_Z_FRAME_ID (0x754u)
#define BRIGHTSIDE_GPS_LATITUDE_FRAME_ID (0x755u)
#define BRIGHTSIDE_GPS_LONGITUDE_FRAME_ID (0x756u)
#define BRIGHTSIDE_GPS_ALTITUDE_HDOP_FRAME_ID (0x757u)
#define BRIGHTSIDE_GPS_SIDE_COUNT_FRAME_ID (0x758u)
#define BRIGHTSIDE_TEL_DIAGNOSTICS_FRAME_ID (0x750u)
#define BRIGHTSIDE_MCB_GITHASH_FRAME_ID (0x405u)
#define BRIGHTSIDE_AIR_OUT_CAP_TEMP_FRAME_ID (0x50du)
#define BRIGHTSIDE_SHOCK_TRAVEL_FRAME_ID (0x710u)
#define BRIGHTSIDE_BRAKE_PRESSURE_STEERING_ANGLE_FRAME_ID (0x711u)
#define BRIGHTSIDE_VDS_DIAGNOSTICS_FRAME_ID (0x712u)
#define BRIGHTSIDE_MDI_DIAGNOSTICS_FRAME_ID (0x50fu)

/* Frame lengths in bytes. */
#define BRIGHTSIDE_VOLTAGE_SENSORS_DATA_LENGTH (8u)
#define BRIGHTSIDE_CURRENT_SENSORS_DATA_LENGTH (8u)
#define BRIGHTSIDE_TEMP_SENSORS_DATA_LENGTH (8u)
#define BRIGHTSIDE_FAULTS_LENGTH (7u)
#define BRIGHTSIDE_VOLTAGE_SUMMARY_LENGTH (6u)
#define BRIGHTSIDE_PACK_HEALTH_LENGTH (7u)
#define BRIGHTSIDE_TEMP_SUMMARY_LENGTH (5u)
#define BRIGHTSIDE_MODULE_VOLTAGES_LENGTH (5u)
#define BRIGHTSIDE_MODULE_TEMPS_LENGTH (5u)
#define BRIGHTSIDE_ECU_STATUS_LENGTH (7u)
#define BRIGHTSIDE_INFORMATION_LENGTH (8u)
#define BRIGHTSIDE_STATUS_INFO_LENGTH (8u)
#define BRIGHTSIDE_BUS_MEASUREMENT_LENGTH (8u)
#define BRIGHTSIDE_VELOCITY_MEASUREMENT_LENGTH (8u)
#define BRIGHTSIDE_SINK_MOTOR_TEMP_MEAS_LENGTH (8u)
#define BRIGHTSIDE_MODULE_STATUSES_LENGTH (5u)
#define BRIGHTSIDE_BALANCING_STATUS_LENGTH (4u)
#define BRIGHTSIDE_ECU_CHARGER_MODES_LENGTH (8u)
#define BRIGHTSIDE_OBC_STATUS_LENGTH (8u)
#define BRIGHTSIDE_PHASE_CURRENT_MEASUREMENT_LENGTH (8u)
#define BRIGHTSIDE_MOTOR_VOLTAGE_VECTOR_MEASURMENT_LENGTH (8u)
#define BRIGHTSIDE_MOTOR_CURRENT_VECTOR_MEASURMENT_LENGTH (8u)
#define BRIGHTSIDE_MOTOR_BACK_EMF_MEASUREMENT_LENGTH (8u)
#define BRIGHTSIDE_VOLTAGE_RAIL_MEASUREMENT_FIFTEEN_V_LENGTH (8u)
#define BRIGHTSIDE_VOLTAGE_RAIL_MEASUREMENT_TWO_FIVE_V_LENGTH (8u)
#define BRIGHTSIDE_FAN_SPEED_MEASUREMENT_LENGTH (8u)
#define BRIGHTSIDE_AIR_IN_CPU_TEMPERATURE_MEASUREMENT_LENGTH (8u)
#define BRIGHTSIDE_ODOMETER_BUS_AMP_HOURS_MEASUREMENT_LENGTH (8u)
#define BRIGHTSIDE_MITSUBA_DATA_REQUEST_LENGTH (1u)
#define BRIGHTSIDE_MITSUBA_FRAME0_LENGTH (8u)
#define BRIGHTSIDE_MITSUBA_FRAME1_LENGTH (5u)
#define BRIGHTSIDE_MITSUBA_FRAME2_LENGTH (5u)
#define BRIGHTSIDE_DID_NEXT_SCREEN_BUTTON_PRESS_LENGTH (1u)
#define BRIGHTSIDE_PERCENTAGE_OF_MAX_CURRENT_LENGTH (8u)
#define BRIGHTSIDE_MOTOR_POWER_RESET_COMMAND_LENGTH (8u)
#define BRIGHTSIDE_MCB_DRIVE_STATE_LENGTH (1u)
#define BRIGHTSIDE_MCB_DIAGNOSTICS_LENGTH (3u)
#define BRIGHTSIDE_RTC_TIMESTAMP_LENGTH (8u)
#define BRIGHTSIDE_IMU_X_LENGTH (8u)
#define BRIGHTSIDE_IMU_Y_LENGTH (8u)
#define BRIGHTSIDE_IMU_Z_LENGTH (8u)
#define BRIGHTSIDE_GPS_LATITUDE_LENGTH (8u)
#define BRIGHTSIDE_GPS_LONGITUDE_LENGTH (8u)
#define BRIGHTSIDE_GPS_ALTITUDE_HDOP_LENGTH (8u)
#define BRIGHTSIDE_GPS_SIDE_COUNT_LENGTH (8u)
#define BRIGHTSIDE_TEL_DIAGNOSTICS_LENGTH (1u)
#define BRIGHTSIDE_MCB_GITHASH_LENGTH (8u)
#define BRIGHTSIDE_AIR_OUT_CAP_TEMP_LENGTH (8u)
#define BRIGHTSIDE_SHOCK_TRAVEL_LENGTH (8u)
#define BRIGHTSIDE_BRAKE_PRESSURE_STEERING_ANGLE_LENGTH (8u)
#define BRIGHTSIDE_VDS_DIAGNOSTICS_LENGTH (1u)
#define BRIGHTSIDE_MDI_DIAGNOSTICS_LENGTH (8u)

/* Extended or standard frame types. */
#define BRIGHTSIDE_VOLTAGE_SENSORS_DATA_IS_EXTENDED (0)
#define BRIGHTSIDE_CURRENT_SENSORS_DATA_IS_EXTENDED (0)
#define BRIGHTSIDE_TEMP_SENSORS_DATA_IS_EXTENDED (0)
#define BRIGHTSIDE_FAULTS_IS_EXTENDED (0)
#define BRIGHTSIDE_VOLTAGE_SUMMARY_IS_EXTENDED (0)
#define BRIGHTSIDE_PACK_HEALTH_IS_EXTENDED (0)
#define BRIGHTSIDE_TEMP_SUMMARY_IS_EXTENDED (0)
#define BRIGHTSIDE_MODULE_VOLTAGES_IS_EXTENDED (0)
#define BRIGHTSIDE_MODULE_TEMPS_IS_EXTENDED (0)
#define BRIGHTSIDE_ECU_STATUS_IS_EXTENDED (0)
#define BRIGHTSIDE_INFORMATION_IS_EXTENDED (0)
#define BRIGHTSIDE_STATUS_INFO_IS_EXTENDED (0)
#define BRIGHTSIDE_BUS_MEASUREMENT_IS_EXTENDED (0)
#define BRIGHTSIDE_VELOCITY_MEASUREMENT_IS_EXTENDED (0)
#define BRIGHTSIDE_SINK_MOTOR_TEMP_MEAS_IS_EXTENDED (0)
#define BRIGHTSIDE_MODULE_STATUSES_IS_EXTENDED (0)
#define BRIGHTSIDE_BALANCING_STATUS_IS_EXTENDED (0)
#define BRIGHTSIDE_ECU_CHARGER_MODES_IS_EXTENDED (1)
#define BRIGHTSIDE_OBC_STATUS_IS_EXTENDED (1)
#define BRIGHTSIDE_PHASE_CURRENT_MEASUREMENT_IS_EXTENDED (0)
#define BRIGHTSIDE_MOTOR_VOLTAGE_VECTOR_MEASURMENT_IS_EXTENDED (0)
#define BRIGHTSIDE_MOTOR_CURRENT_VECTOR_MEASURMENT_IS_EXTENDED (0)
#define BRIGHTSIDE_MOTOR_BACK_EMF_MEASUREMENT_IS_EXTENDED (0)
#define BRIGHTSIDE_VOLTAGE_RAIL_MEASUREMENT_FIFTEEN_V_IS_EXTENDED (0)
#define BRIGHTSIDE_VOLTAGE_RAIL_MEASUREMENT_TWO_FIVE_V_IS_EXTENDED (0)
#define BRIGHTSIDE_FAN_SPEED_MEASUREMENT_IS_EXTENDED (0)
#define BRIGHTSIDE_AIR_IN_CPU_TEMPERATURE_MEASUREMENT_IS_EXTENDED (0)
#define BRIGHTSIDE_ODOMETER_BUS_AMP_HOURS_MEASUREMENT_IS_EXTENDED (0)
#define BRIGHTSIDE_MITSUBA_DATA_REQUEST_IS_EXTENDED (1)
#define BRIGHTSIDE_MITSUBA_FRAME0_IS_EXTENDED (1)
#define BRIGHTSIDE_MITSUBA_FRAME1_IS_EXTENDED (1)
#define BRIGHTSIDE_MITSUBA_FRAME2_IS_EXTENDED (1)
#define BRIGHTSIDE_DID_NEXT_SCREEN_BUTTON_PRESS_IS_EXTENDED (0)
#define BRIGHTSIDE_PERCENTAGE_OF_MAX_CURRENT_IS_EXTENDED (0)
#define BRIGHTSIDE_MOTOR_POWER_RESET_COMMAND_IS_EXTENDED (0)
#define BRIGHTSIDE_MCB_DRIVE_STATE_IS_EXTENDED (0)
#define BRIGHTSIDE_MCB_DIAGNOSTICS_IS_EXTENDED (0)
#define BRIGHTSIDE_RTC_TIMESTAMP_IS_EXTENDED (0)
#define BRIGHTSIDE_IMU_X_IS_EXTENDED (0)
#define BRIGHTSIDE_IMU_Y_IS_EXTENDED (0)
#define BRIGHTSIDE_IMU_Z_IS_EXTENDED (0)
#define BRIGHTSIDE_GPS_LATITUDE_IS_EXTENDED (0)
#define BRIGHTSIDE_GPS_LONGITUDE_IS_EXTENDED (0)
#define BRIGHTSIDE_GPS_ALTITUDE_HDOP_IS_EXTENDED (0)
#define BRIGHTSIDE_GPS_SIDE_COUNT_IS_EXTENDED (0)
#define BRIGHTSIDE_TEL_DIAGNOSTICS_IS_EXTENDED (0)
#define BRIGHTSIDE_MCB_GITHASH_IS_EXTENDED (0)
#define BRIGHTSIDE_AIR_OUT_CAP_TEMP_IS_EXTENDED (0)
#define BRIGHTSIDE_SHOCK_TRAVEL_IS_EXTENDED (0)
#define BRIGHTSIDE_BRAKE_PRESSURE_STEERING_ANGLE_IS_EXTENDED (0)
#define BRIGHTSIDE_VDS_DIAGNOSTICS_IS_EXTENDED (0)
#define BRIGHTSIDE_MDI_DIAGNOSTICS_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define BRIGHTSIDE_VOLTAGE_SENSORS_DATA_NAME "VoltageSensorsData"
#define BRIGHTSIDE_CURRENT_SENSORS_DATA_NAME "CurrentSensorsData"
#define BRIGHTSIDE_TEMP_SENSORS_DATA_NAME "TempSensorsData"
#define BRIGHTSIDE_FAULTS_NAME "Faults"
#define BRIGHTSIDE_VOLTAGE_SUMMARY_NAME "VoltageSummary"
#define BRIGHTSIDE_PACK_HEALTH_NAME "PackHealth"
#define BRIGHTSIDE_TEMP_SUMMARY_NAME "TempSummary"
#define BRIGHTSIDE_MODULE_VOLTAGES_NAME "ModuleVoltages"
#define BRIGHTSIDE_MODULE_TEMPS_NAME "ModuleTemps"
#define BRIGHTSIDE_ECU_STATUS_NAME "ECUStatus"
#define BRIGHTSIDE_INFORMATION_NAME "Information"
#define BRIGHTSIDE_STATUS_INFO_NAME "StatusInfo"
#define BRIGHTSIDE_BUS_MEASUREMENT_NAME "BusMeasurement"
#define BRIGHTSIDE_VELOCITY_MEASUREMENT_NAME "VelocityMeasurement"
#define BRIGHTSIDE_SINK_MOTOR_TEMP_MEAS_NAME "SinkMotorTempMeas"
#define BRIGHTSIDE_MODULE_STATUSES_NAME "ModuleStatuses"
#define BRIGHTSIDE_BALANCING_STATUS_NAME "BalancingStatus"
#define BRIGHTSIDE_ECU_CHARGER_MODES_NAME "ECUChargerModes"
#define BRIGHTSIDE_OBC_STATUS_NAME "OBCStatus"
#define BRIGHTSIDE_PHASE_CURRENT_MEASUREMENT_NAME "PhaseCurrentMeasurement"
#define BRIGHTSIDE_MOTOR_VOLTAGE_VECTOR_MEASURMENT_NAME "MotorVoltageVectorMeasurment"
#define BRIGHTSIDE_MOTOR_CURRENT_VECTOR_MEASURMENT_NAME "MotorCurrentVectorMeasurment"
#define BRIGHTSIDE_MOTOR_BACK_EMF_MEASUREMENT_NAME "MotorBackEMFMeasurement"
#define BRIGHTSIDE_VOLTAGE_RAIL_MEASUREMENT_FIFTEEN_V_NAME "VoltageRailMeasurement_FifteenV"
#define BRIGHTSIDE_VOLTAGE_RAIL_MEASUREMENT_TWO_FIVE_V_NAME "VoltageRailMeasurement_TwoFiveV"
#define BRIGHTSIDE_FAN_SPEED_MEASUREMENT_NAME "FanSpeedMeasurement"
#define BRIGHTSIDE_AIR_IN_CPU_TEMPERATURE_MEASUREMENT_NAME "AirInCPUTemperatureMeasurement"
#define BRIGHTSIDE_ODOMETER_BUS_AMP_HOURS_MEASUREMENT_NAME "OdometerBusAmpHoursMeasurement"
#define BRIGHTSIDE_MITSUBA_DATA_REQUEST_NAME "MitsubaDataRequest"
#define BRIGHTSIDE_MITSUBA_FRAME0_NAME "Mitsuba_Frame0"
#define BRIGHTSIDE_MITSUBA_FRAME1_NAME "Mitsuba_Frame1"
#define BRIGHTSIDE_MITSUBA_FRAME2_NAME "Mitsuba_Frame2"
#define BRIGHTSIDE_DID_NEXT_SCREEN_BUTTON_PRESS_NAME "DIDNextScreenButtonPress"
#define BRIGHTSIDE_PERCENTAGE_OF_MAX_CURRENT_NAME "PercentageOfMaxCurrent"
#define BRIGHTSIDE_MOTOR_POWER_RESET_COMMAND_NAME "MotorPowerResetCommand"
#define BRIGHTSIDE_MCB_DRIVE_STATE_NAME "MCBDriveState"
#define BRIGHTSIDE_MCB_DIAGNOSTICS_NAME "MCBDiagnostics"
#define BRIGHTSIDE_RTC_TIMESTAMP_NAME "RTCTimestamp"
#define BRIGHTSIDE_IMU_X_NAME "IMU_X"
#define BRIGHTSIDE_IMU_Y_NAME "IMU_Y"
#define BRIGHTSIDE_IMU_Z_NAME "IMU_Z"
#define BRIGHTSIDE_GPS_LATITUDE_NAME "GPSLatitude"
#define BRIGHTSIDE_GPS_LONGITUDE_NAME "GPSLongitude"
#define BRIGHTSIDE_GPS_ALTITUDE_HDOP_NAME "GPSAltitudeHdop"
#define BRIGHTSIDE_GPS_SIDE_COUNT_NAME "GPSSideCount"
#define BRIGHTSIDE_TEL_DIAGNOSTICS_NAME "TELDiagnostics"
#define BRIGHTSIDE_MCB_GITHASH_NAME "MCBGithash"
#define BRIGHTSIDE_AIR_OUT_CAP_TEMP_NAME "AirOutCapTemp"
#define BRIGHTSIDE_SHOCK_TRAVEL_NAME "ShockTravel"
#define BRIGHTSIDE_BRAKE_PRESSURE_STEERING_ANGLE_NAME "BrakePressureSteeringAngle"
#define BRIGHTSIDE_VDS_DIAGNOSTICS_NAME "VDSDiagnostics"
#define BRIGHTSIDE_MDI_DIAGNOSTICS_NAME "MDIDiagnostics"

/* Signal Names. */
#define BRIGHTSIDE_VOLTAGE_SENSORS_DATA_VOLT_SENSOR1_NAME "VoltSensor1"
#define BRIGHTSIDE_VOLTAGE_SENSORS_DATA_VOLT_SENSOR2_NAME "VoltSensor2"
#define BRIGHTSIDE_CURRENT_SENSORS_DATA_CURRENT_SENSOR1_NAME "CurrentSensor1"
#define BRIGHTSIDE_CURRENT_SENSORS_DATA_CURRENT_SENSOR2_NAME "CurrentSensor2"
#define BRIGHTSIDE_TEMP_SENSORS_DATA_TEMP_SENSORS1_NAME "TempSensors1"
#define BRIGHTSIDE_TEMP_SENSORS_DATA_TEMP_SENSORS2_NAME "TempSensors2"
#define BRIGHTSIDE_TEMP_SENSORS_DATA_TEMP_SENSORS3_NAME "TempSensors3"
#define BRIGHTSIDE_TEMP_SENSORS_DATA_TEMP_SENSORS4_NAME "TempSensors4"
#define BRIGHTSIDE_TEMP_SENSORS_DATA_TEMP_SENSORS5_NAME "TempSensors5"
#define BRIGHTSIDE_TEMP_SENSORS_DATA_TEMP_SENSORS6_NAME "TempSensors6"
#define BRIGHTSIDE_TEMP_SENSORS_DATA_TEMP_SENSORS7_NAME "TempSensors7"
#define BRIGHTSIDE_TEMP_SENSORS_DATA_TEMP_SENSORS8_NAME "TempSensors8"
#define BRIGHTSIDE_FAULTS_SLAVE_BOARD_COMM_NAME "SlaveBoardComm"
#define BRIGHTSIDE_FAULTS_BMS_SELF_TEST_NAME "BMSSelfTest"
#define BRIGHTSIDE_FAULTS_OVER_TEMP_NAME "OverTemp"
#define BRIGHTSIDE_FAULTS_UNDER_VOLTAGE_NAME "UnderVoltage"
#define BRIGHTSIDE_FAULTS_OVER_VOLTAGE_NAME "OverVoltage"
#define BRIGHTSIDE_FAULTS_ISO_LOST_NAME "IsoLost"
#define BRIGHTSIDE_FAULTS_CHARGE_OVERCURRENT_NAME "ChargeOvercurrent"
#define BRIGHTSIDE_FAULTS_VOLT_OUTOF_RANGE_NAME "VoltOutofRange"
#define BRIGHTSIDE_FAULTS_TEMP_OUTOF_RANGE_NAME "TempOutofRange"
#define BRIGHTSIDE_FAULTS_PACK_BALANCING_ACTIVE_NAME "PackBalancingActive"
#define BRIGHTSIDE_FAULTS_LLIM_ACTIVE_NAME "LLIMActive"
#define BRIGHTSIDE_FAULTS_HLIM_ACTIVE_NAME "HLIMActive"
#define BRIGHTSIDE_FAULTS_CHARGE_OVER_TEMP_NAME "ChargeOverTemp"
#define BRIGHTSIDE_FAULTS_LOW_VOLTAGE_NAME "LowVoltage"
#define BRIGHTSIDE_FAULTS_HIGH_VOLTAGE_NAME "HighVoltage"
#define BRIGHTSIDE_FAULTS_LOW_TEMP_NAME "LowTemp"
#define BRIGHTSIDE_FAULTS_HIGH_TEMP_NAME "HighTemp"
#define BRIGHTSIDE_FAULTS_REQUEST_REGEN_OFF_NAME "RequestRegenOff"
#define BRIGHTSIDE_FAULTS_NO_ECU_CURRENT_MESSAGE_NAME "NoECUCurrentMessage"
#define BRIGHTSIDE_VOLTAGE_SUMMARY_TOTAL_PACK_VOLTAGE_NAME "TotalPackVoltage"
#define BRIGHTSIDE_VOLTAGE_SUMMARY_VOLTAGEOF_LEAST_NAME "VoltageofLeast"
#define BRIGHTSIDE_VOLTAGE_SUMMARY_INDEXOF_LOWEST_MODULE_NAME "IndexofLowestModule"
#define BRIGHTSIDE_VOLTAGE_SUMMARY_VOLTAGEOF_HIGHEST_NAME "VoltageofHighest"
#define BRIGHTSIDE_VOLTAGE_SUMMARY_INDEXOF_HIGHEST_MODULE_NAME "IndexofHighestModule"
#define BRIGHTSIDE_PACK_HEALTH_SOC_NAME "SOC"
#define BRIGHTSIDE_PACK_HEALTH_DEPTHOF_DISCHARGE_NAME "DepthofDischarge"
#define BRIGHTSIDE_PACK_HEALTH_CAPACITY_NAME "Capacity"
#define BRIGHTSIDE_PACK_HEALTH_B0X00_NAME "b0x00"
#define BRIGHTSIDE_PACK_HEALTH_SOH_NAME "SOH"
#define BRIGHTSIDE_TEMP_SUMMARY_AVERAGE_TEMP_NAME "AverageTemp"
#define BRIGHTSIDE_TEMP_SUMMARY_MIN_TEMP_NAME "MinTemp"
#define BRIGHTSIDE_TEMP_SUMMARY_INDEXOF_LOWEST_TEMP_NAME "IndexofLowestTemp"
#define BRIGHTSIDE_TEMP_SUMMARY_MAX_TEMP_NAME "MaxTemp"
#define BRIGHTSIDE_TEMP_SUMMARY_INDEXOF_HIGHEST_TEMP_NAME "IndexofHighestTemp"
#define BRIGHTSIDE_MODULE_VOLTAGES_MULTIPLEXING_BITS_NAME "MultiplexingBits"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE1_NAME "Voltage1"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE5_NAME "Voltage5"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE9_NAME "Voltage9"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE13_NAME "Voltage13"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE17_NAME "Voltage17"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE21_NAME "Voltage21"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE25_NAME "Voltage25"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE29_NAME "Voltage29"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE2_NAME "Voltage2"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE6_NAME "Voltage6"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE10_NAME "Voltage10"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE14_NAME "Voltage14"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE18_NAME "Voltage18"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE22_NAME "Voltage22"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE26_NAME "Voltage26"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE30_NAME "Voltage30"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE3_NAME "Voltage3"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE7_NAME "Voltage7"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE11_NAME "Voltage11"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE15_NAME "Voltage15"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE19_NAME "Voltage19"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE23_NAME "Voltage23"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE27_NAME "Voltage27"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE31_NAME "Voltage31"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE4_NAME "Voltage4"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE8_NAME "Voltage8"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE12_NAME "Voltage12"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE16_NAME "Voltage16"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE20_NAME "Voltage20"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE24_NAME "Voltage24"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE28_NAME "Voltage28"
#define BRIGHTSIDE_MODULE_VOLTAGES_VOLTAGE32_NAME "Voltage32"
#define BRIGHTSIDE_MODULE_TEMPS_MULTIPLEXING_BITS_NAME "MultiplexingBits"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP1_NAME "Temp1"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP5_NAME "Temp5"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP9_NAME "Temp9"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP13_NAME "Temp13"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP17_NAME "Temp17"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP21_NAME "Temp21"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP25_NAME "Temp25"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP29_NAME "Temp29"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP2_NAME "Temp2"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP6_NAME "Temp6"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP10_NAME "Temp10"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP14_NAME "Temp14"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP18_NAME "Temp18"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP22_NAME "Temp22"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP26_NAME "Temp26"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP30_NAME "Temp30"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP3_NAME "Temp3"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP7_NAME "Temp7"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP11_NAME "Temp11"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP15_NAME "Temp15"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP19_NAME "Temp19"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP23_NAME "Temp23"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP27_NAME "Temp27"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP31_NAME "Temp31"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP4_NAME "Temp4"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP8_NAME "Temp8"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP12_NAME "Temp12"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP16_NAME "Temp16"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP20_NAME "Temp20"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP24_NAME "Temp24"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP28_NAME "Temp28"
#define BRIGHTSIDE_MODULE_TEMPS_TEMP32_NAME "Temp32"
#define BRIGHTSIDE_ECU_STATUS_PACK_CURRENT_NAME "PackCurrent"
#define BRIGHTSIDE_ECU_STATUS_SUPP_BATT_VOLTAGE_NAME "SuppBattVoltage"
#define BRIGHTSIDE_ECU_STATUS_LV_CURRENT_NAME "LVCurrent"
#define BRIGHTSIDE_ECU_STATUS_PACK_OVER_DISCHARGE_WARNING_NAME "PackOverDischargeWarning"
#define BRIGHTSIDE_ECU_STATUS_PACK_OVER_CHARGE_WARNING_NAME "PackOverChargeWarning"
#define BRIGHTSIDE_ECU_STATUS_DOC_NAME "DOC"
#define BRIGHTSIDE_ECU_STATUS_COC_NAME "COC"
#define BRIGHTSIDE_ECU_STATUS_RESET_FROM_WATCHDOG_NAME "ResetFromWatchdog"
#define BRIGHTSIDE_ECU_STATUS_ESTOP_PRESSED_NAME "ESTOP_Pressed"
#define BRIGHTSIDE_ECU_STATUS_VICOR_HEAT_SINK_TEMP_NAME "VicorHeatSinkTemp"
#define BRIGHTSIDE_INFORMATION_TRITIUM_ID_NAME "TritiumID"
#define BRIGHTSIDE_INFORMATION_SERIAL_NUMBER_NAME "SerialNumber"
#define BRIGHTSIDE_STATUS_INFO_BRIDGE_PWM_NAME "BridgePWM"
#define BRIGHTSIDE_STATUS_INFO_MOTOR_CURRENT_NAME "MotorCurrent"
#define BRIGHTSIDE_STATUS_INFO_VELOCITY_NAME "Velocity"
#define BRIGHTSIDE_STATUS_INFO_BUS_CURRENT_NAME "BusCurrent"
#define BRIGHTSIDE_STATUS_INFO_BUS_VOLT_UPPER_LIM_NAME "BusVoltUpperLim"
#define BRIGHTSIDE_STATUS_INFO_BUS_VOLT_LOWER_LIM_NAME "BusVoltLowerLim"
#define BRIGHTSIDE_STATUS_INFO_HEADSINK_TEMP_NAME "HeadsinkTemp"
#define BRIGHTSIDE_STATUS_INFO_RESERVED_NAME "Reserved"
#define BRIGHTSIDE_STATUS_INFO_HARDWARE_OVER_CURRENT_NAME "HardwareOverCurrent"
#define BRIGHTSIDE_STATUS_INFO_SOFTWARE_OVER_CURRENT_NAME "SoftwareOverCurrent"
#define BRIGHTSIDE_STATUS_INFO_DC_BUS_OVER_VOLTAGE_NAME "DCBusOverVoltage"
#define BRIGHTSIDE_STATUS_INFO_BAD_MOTOR_POS_HALL_SEQ_NAME "BadMotorPosHallSeq"
#define BRIGHTSIDE_STATUS_INFO_WATCHDOG_CAUSED_LAST_NAME "WatchdogCausedLast"
#define BRIGHTSIDE_STATUS_INFO_CONFIG_READ_ERROR_NAME "ConfigReadError"
#define BRIGHTSIDE_STATUS_INFO_A15_V_RAIL_UNDER_VOLT_LOCK_NAME "A15VRailUnderVoltLock"
#define BRIGHTSIDE_STATUS_INFO_RESERVED2_NAME "Reserved2"
#define BRIGHTSIDE_STATUS_INFO_ACTIVE_MOTOR_NAME "ActiveMotor"
#define BRIGHTSIDE_STATUS_INFO_RESERVED3_NAME "Reserved3"
#define BRIGHTSIDE_BUS_MEASUREMENT_BUS_VOLTAGE_NAME "BusVoltage"
#define BRIGHTSIDE_BUS_MEASUREMENT_BUS_CURRENT_NAME "BusCurrent"
#define BRIGHTSIDE_VELOCITY_MEASUREMENT_MOTOR_VELOCITY_NAME "MotorVelocity"
#define BRIGHTSIDE_VELOCITY_MEASUREMENT_VEHICLE_VELOCITY_NAME "VehicleVelocity"
#define BRIGHTSIDE_SINK_MOTOR_TEMP_MEAS_MOTOR_TEMP_NAME "MotorTemp"
#define BRIGHTSIDE_SINK_MOTOR_TEMP_MEAS_SURFACE_TEMP_CONTROLLER_NAME "SurfaceTempController"
#define BRIGHTSIDE_MODULE_STATUSES_MULTIPLEXING_BITS_NAME "MultiplexingBits"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE1_NAME "Module1"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE5_NAME "Module5"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE9_NAME "Module9"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE13_NAME "Module13"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE17_NAME "Module17"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE21_NAME "Module21"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE25_NAME "Module25"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE29_NAME "Module29"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE2_NAME "Module2"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE6_NAME "Module6"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE10_NAME "Module10"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE14_NAME "Module14"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE18_NAME "Module18"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE22_NAME "Module22"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE26_NAME "Module26"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE30_NAME "Module30"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE3_NAME "Module3"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE7_NAME "Module7"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE11_NAME "Module11"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE15_NAME "Module15"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE19_NAME "Module19"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE23_NAME "Module23"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE27_NAME "Module27"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE31_NAME "Module31"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE4_NAME "Module4"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE8_NAME "Module8"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE12_NAME "Module12"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE16_NAME "Module16"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE20_NAME "Module20"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE24_NAME "Module24"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE28_NAME "Module28"
#define BRIGHTSIDE_MODULE_STATUSES_MODULE32_NAME "Module32"
#define BRIGHTSIDE_BALANCING_STATUS_MOD1_BAL_ACTIVE_NAME "Mod1_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD2_BAL_ACTIVE_NAME "Mod2_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD3_BAL_ACTIVE_NAME "Mod3_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD4_BAL_ACTIVE_NAME "Mod4_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD5_BAL_ACTIVE_NAME "Mod5_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD6_BAL_ACTIVE_NAME "Mod6_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD7_BAL_ACTIVE_NAME "Mod7_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD8_BAL_ACTIVE_NAME "Mod8_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD9_BAL_ACTIVE_NAME "Mod9_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD10_BAL_ACTIVE_NAME "Mod10_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD11_BAL_ACTIVE_NAME "Mod11_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD12_BAL_ACTIVE_NAME "Mod12_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD13_BAL_ACTIVE_NAME "Mod13_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD14_BAL_ACTIVE_NAME "Mod14_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD15_BAL_ACTIVE_NAME "Mod15_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD16_BAL_ACTIVE_NAME "Mod16_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD17_BAL_ACTIVE_NAME "Mod17_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD18_BAL_ACTIVE_NAME "Mod18_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD19_BAL_ACTIVE_NAME "Mod19_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD20_BAL_ACTIVE_NAME "Mod20_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD21_BAL_ACTIVE_NAME "Mod21_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD22_BAL_ACTIVE_NAME "Mod22_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD23_BAL_ACTIVE_NAME "Mod23_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD24_BAL_ACTIVE_NAME "Mod24_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD25_BAL_ACTIVE_NAME "Mod25_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD26_BAL_ACTIVE_NAME "Mod26_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD27_BAL_ACTIVE_NAME "Mod27_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD28_BAL_ACTIVE_NAME "Mod28_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD29_BAL_ACTIVE_NAME "Mod29_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD30_BAL_ACTIVE_NAME "Mod30_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD31_BAL_ACTIVE_NAME "Mod31_BalActive"
#define BRIGHTSIDE_BALANCING_STATUS_MOD32_BAL_ACTIVE_NAME "Mod32_BalActive"
#define BRIGHTSIDE_ECU_CHARGER_MODES_MAX_CHARGING_VOLTAGE_NAME "MaxChargingVoltage"
#define BRIGHTSIDE_ECU_CHARGER_MODES_MAX_CHARGING_CURRENT_NAME "MaxChargingCurrent"
#define BRIGHTSIDE_ECU_CHARGER_MODES_CHARGER_ENABLES_NAME "ChargerEnables"
#define BRIGHTSIDE_ECU_CHARGER_MODES_CHARGING_MODES_NAME "ChargingModes"
#define BRIGHTSIDE_OBC_STATUS_OUTPUT_VOLTAGE_NAME "OutputVoltage"
#define BRIGHTSIDE_OBC_STATUS_OUTPUT_CURRENT_NAME "OutputCurrent"
#define BRIGHTSIDE_OBC_STATUS_HARDWARE_PROTECTION_NAME "HardwareProtection"
#define BRIGHTSIDE_OBC_STATUS_TEMEPRATURE_PROTECTION_NAME "TemepratureProtection"
#define BRIGHTSIDE_OBC_STATUS_INPUT_VOLTAGE_STATUS_NAME "InputVoltageStatus"
#define BRIGHTSIDE_OBC_STATUS_OUTPUT_UNDER_VOLTAGE_NAME "OutputUnderVoltage"
#define BRIGHTSIDE_OBC_STATUS_OUTPUT_OVER_VOLTAGE_NAME "OutputOverVoltage"
#define BRIGHTSIDE_OBC_STATUS_OUTPUT_OVER_CURRENT_NAME "OutputOverCurrent"
#define BRIGHTSIDE_OBC_STATUS_OUTPUT_SHORT_CIRCUIT_NAME "OutputShortCircuit"
#define BRIGHTSIDE_OBC_STATUS_COMMUNICATION_STATUS_NAME "CommunicationStatus"
#define BRIGHTSIDE_OBC_STATUS_WORKING_STATUS_NAME "WorkingStatus"
#define BRIGHTSIDE_OBC_STATUS_COMPLETION_OF_INITIALIZATION_NAME "CompletionOfInitialization"
#define BRIGHTSIDE_OBC_STATUS_FAN_ENABLE_NAME "FanEnable"
#define BRIGHTSIDE_OBC_STATUS_COOLING_PUMP_FAN_ENABLE_NAME "CoolingPumpFanEnable"
#define BRIGHTSIDE_OBC_STATUS_C_CSIGNAL_STATUS_NAME "CCsignalStatus"
#define BRIGHTSIDE_OBC_STATUS_CP_SIGNAL_STATUS_NAME "CPSignalStatus"
#define BRIGHTSIDE_OBC_STATUS_CHARGING_SOCKET_TEMP_FAULT_NAME "ChargingSocketTempFault"
#define BRIGHTSIDE_OBC_STATUS_ELECTRONIC_LOCK_STATE_NAME "ElectronicLockState"
#define BRIGHTSIDE_OBC_STATUS_S2_SWITCH_CONTROL_STATUS_NAME "S2SwitchControlStatus"
#define BRIGHTSIDE_OBC_STATUS_TEMPERATURRE_NAME "Temperaturre"
#define BRIGHTSIDE_MITSUBA_DATA_REQUEST_REQUEST_FOR_FRAMES_NAME "RequestForFrames"
#define BRIGHTSIDE_MITSUBA_FRAME0_BATTERY_VOLTAGE_NAME "BatteryVoltage"
#define BRIGHTSIDE_MITSUBA_FRAME0_BATTERY_CURRENT_NAME "BatteryCurrent"
#define BRIGHTSIDE_MITSUBA_FRAME0_BATTERY_CURRENT_DIRECTION_NAME "BatteryCurrentDirection"
#define BRIGHTSIDE_MITSUBA_FRAME0_MOTOR_CURRENT_PEAK_AVERAGE_NAME "MotorCurrentPeakAverage"
#define BRIGHTSIDE_MITSUBA_FRAME0_FET_TEMPERATURE_NAME "FETTemperature"
#define BRIGHTSIDE_MITSUBA_FRAME0_MOTOR_ROTATING_SPEED_NAME "MotorRotatingSpeed"
#define BRIGHTSIDE_MITSUBA_FRAME0_PWM_DUTY_NAME "PWMDuty"
#define BRIGHTSIDE_MITSUBA_FRAME0_LEAD_ANGLE_NAME "LeadAngle"
#define BRIGHTSIDE_MITSUBA_FRAME1_POWER_MODE_NAME "PowerMode"
#define BRIGHTSIDE_MITSUBA_FRAME1_MOTOR_CONTROL_MODE_NAME "MotorControlMode"
#define BRIGHTSIDE_MITSUBA_FRAME1_ACCELERATOR_POSITION_NAME "AcceleratorPosition"
#define BRIGHTSIDE_MITSUBA_FRAME1_REGENERATION_VR_POSITION_NAME "RegenerationVRPosition"
#define BRIGHTSIDE_MITSUBA_FRAME1_DIGIT_SW_POSITION_NAME "DigitSWPosition"
#define BRIGHTSIDE_MITSUBA_FRAME1_OUTPUT_TARGET_VALUE_NAME "OutputTargetValue"
#define BRIGHTSIDE_MITSUBA_FRAME1_DRIVE_ACTION_STATUS_NAME "DriveActionStatus"
#define BRIGHTSIDE_MITSUBA_FRAME1_REGENERATION_STATUS_NAME "RegenerationStatus"
#define BRIGHTSIDE_MITSUBA_FRAME2_ANALOG_SENSOR_ERROR_NAME "AnalogSensorError"
#define BRIGHTSIDE_MITSUBA_FRAME2_MOTOR_CURRENT_SENSOR_U_ERROR_NAME "MotorCurrentSensorUError"
#define BRIGHTSIDE_MITSUBA_FRAME2_MOTOR_CURRENT_SENSOR_W_ERROR_NAME "MotorCurrentSensorWError"
#define BRIGHTSIDE_MITSUBA_FRAME2_FET_THERMISTOR_ERROR_NAME "FETThermistorError"
#define BRIGHTSIDE_MITSUBA_FRAME2_RFU_NAME "RFU"
#define BRIGHTSIDE_MITSUBA_FRAME2_BATTERY_VOLTAGE_SENSOR_ERROR_NAME "BatteryVoltageSensorError"
#define BRIGHTSIDE_MITSUBA_FRAME2_BATTERY_CURRENT_SENSOR_ERROR_NAME "BatteryCurrentSensorError"
#define BRIGHTSIDE_MITSUBA_FRAME2_BATTERY_CURRENT_SENSOR_ADJUST_ERROR_NAME "BatteryCurrentSensorAdjustError"
#define BRIGHTSIDE_MITSUBA_FRAME2_MOTOR_CURRENT_SENSOR_ADJUST_ERROR_NAME "MotorCurrentSensorAdjustError"
#define BRIGHTSIDE_MITSUBA_FRAME2_ACCELERATOR_POSITION_ERROR_NAME "AcceleratorPositionError"
#define BRIGHTSIDE_MITSUBA_FRAME2_RFU2_NAME "RFU2"
#define BRIGHTSIDE_MITSUBA_FRAME2_CONTROLLER_VOLTAGE_SENSOR_ERROR_NAME "ControllerVoltageSensorError"
#define BRIGHTSIDE_MITSUBA_FRAME2_RFU3_NAME "RFU3"
#define BRIGHTSIDE_MITSUBA_FRAME2_POWER_SYSTEM_ERROR_NAME "PowerSystemError"
#define BRIGHTSIDE_MITSUBA_FRAME2_OVER_CURRENT_ERROR_NAME "OverCurrentError"
#define BRIGHTSIDE_MITSUBA_FRAME2_RFU4_NAME "RFU4"
#define BRIGHTSIDE_MITSUBA_FRAME2_OVER_VOLTAGE_ERROR_NAME "OverVoltageError"
#define BRIGHTSIDE_MITSUBA_FRAME2_RFU5_NAME "RFU5"
#define BRIGHTSIDE_MITSUBA_FRAME2_OVER_CURRENT_LIMIT_NAME "OverCurrentLimit"
#define BRIGHTSIDE_MITSUBA_FRAME2_RFU6_NAME "RFU6"
#define BRIGHTSIDE_MITSUBA_FRAME2_MOTOR_SYSTEM_ERROR_NAME "MotorSystemError"
#define BRIGHTSIDE_MITSUBA_FRAME2_MOTOR_LOCK_NAME "MotorLock"
#define BRIGHTSIDE_MITSUBA_FRAME2_HALL_SENSOR_SHORT_NAME "HallSensorShort"
#define BRIGHTSIDE_MITSUBA_FRAME2_HALL_SENSOR_OPEN_NAME "HallSensorOpen"
#define BRIGHTSIDE_MITSUBA_FRAME2_RFU7_NAME "RFU7"
#define BRIGHTSIDE_MITSUBA_FRAME2_OVER_HEAT_LEVEL_NAME "OverHeatLevel"
#define BRIGHTSIDE_DID_NEXT_SCREEN_BUTTON_PRESS_NEXT_SCREEN_PRESSED_NAME "NextScreenPressed"
#define BRIGHTSIDE_DID_NEXT_SCREEN_BUTTON_PRESS_UNUSED5_NAME "Unused5"
#define BRIGHTSIDE_PERCENTAGE_OF_MAX_CURRENT_MOTOR_VELOCITY_NAME "MotorVelocity"
#define BRIGHTSIDE_PERCENTAGE_OF_MAX_CURRENT_MOTOR_CURRENT_NAME "MotorCurrent"
#define BRIGHTSIDE_MOTOR_POWER_RESET_COMMAND_RESET_COMMAND_NAME "ResetCommand"
#define BRIGHTSIDE_MOTOR_POWER_RESET_COMMAND_RESERVED_NAME "Reserved"
#define BRIGHTSIDE_MOTOR_POWER_RESET_COMMAND_BUS_CURRENT_NAME "BusCurrent"
#define BRIGHTSIDE_MCB_DRIVE_STATE_DRIVE_STATE_NAME "DriveState"
#define BRIGHTSIDE_MCB_DIAGNOSTICS_THROTTLE_ADC_READING_NAME "ThrottleADCReading"
#define BRIGHTSIDE_MCB_DIAGNOSTICS_PEDAL_ADC_OUT_OF_RANGE_NAME "PedalADCOutOfRange"
#define BRIGHTSIDE_MCB_DIAGNOSTICS_REGEN_ENABLED_NAME "RegenEnabled"
#define BRIGHTSIDE_MCB_DIAGNOSTICS_CRUISE_CONTROL_ENABLED_NAME "CruiseControlEnabled"
#define BRIGHTSIDE_MCB_DIAGNOSTICS_MECH_BRAKE_PRESSED_NAME "MechBrakePressed"
#define BRIGHTSIDE_MCB_DIAGNOSTICS_MDI_COMM_FAULT_NAME "MDICommFault"
#define BRIGHTSIDE_RTC_TIMESTAMP_SECOND_NAME "Second"
#define BRIGHTSIDE_RTC_TIMESTAMP_MINUTE_NAME "Minute"
#define BRIGHTSIDE_RTC_TIMESTAMP_HOUR_NAME "Hour"
#define BRIGHTSIDE_RTC_TIMESTAMP_DAY_NAME "Day"
#define BRIGHTSIDE_RTC_TIMESTAMP_MONTH_NAME "Month"
#define BRIGHTSIDE_RTC_TIMESTAMP_YEAR_NAME "Year"
#define BRIGHTSIDE_IMU_X_ACCELERATION_X_NAME "Acceleration_X"
#define BRIGHTSIDE_IMU_X_GYROSCOPE_X_NAME "Gyroscope_X"
#define BRIGHTSIDE_IMU_Y_ACCELERATION_Y_NAME "Acceleration_Y"
#define BRIGHTSIDE_IMU_Y_GYROSCOPE_Y_NAME "Gyroscope_Y"
#define BRIGHTSIDE_IMU_Z_ACCELERATION_Z_NAME "Acceleration_Z"
#define BRIGHTSIDE_IMU_Z_GYROSCOPE_Z_NAME "Gyroscope_Z"
#define BRIGHTSIDE_GPS_LATITUDE_LATITUDE_NAME "Latitude"
#define BRIGHTSIDE_GPS_LONGITUDE_LONGITUDE_NAME "Longitude"
#define BRIGHTSIDE_GPS_ALTITUDE_HDOP_ALTITUDE_NAME "Altitude"
#define BRIGHTSIDE_GPS_ALTITUDE_HDOP_HDOP_NAME "Hdop"
#define BRIGHTSIDE_GPS_SIDE_COUNT_LATSIDE_NAME "Latside"
#define BRIGHTSIDE_GPS_SIDE_COUNT_LONSIDE_NAME "Lonside"
#define BRIGHTSIDE_GPS_SIDE_COUNT_SATELLITE_COUNT_NAME "SatelliteCount"
#define BRIGHTSIDE_TEL_DIAGNOSTICS_RTC_RESET_NAME "RTCReset"
#define BRIGHTSIDE_TEL_DIAGNOSTICS_GPS_FIX_NAME "GPSFix"
#define BRIGHTSIDE_TEL_DIAGNOSTICS_IMU_FAIL_NAME "IMUFail"
#define BRIGHTSIDE_TEL_DIAGNOSTICS_WATCHDOG_RESET_NAME "WatchdogReset"
#define BRIGHTSIDE_MCB_GITHASH_SHORT_GITHASH_NAME "ShortGithash"
#define BRIGHTSIDE_SHOCK_TRAVEL_SHOCK_TRAVEL1_NAME "ShockTravel1"
#define BRIGHTSIDE_SHOCK_TRAVEL_SHOCK_TRAVEL2_NAME "ShockTravel2"
#define BRIGHTSIDE_SHOCK_TRAVEL_SHOCK_TRAVEL3_NAME "ShockTravel3"
#define BRIGHTSIDE_SHOCK_TRAVEL_SHOCK_TRAVEL4_NAME "ShockTravel4"
#define BRIGHTSIDE_BRAKE_PRESSURE_STEERING_ANGLE_BRAKE_PRESSURE1_NAME "BrakePressure1"
#define BRIGHTSIDE_BRAKE_PRESSURE_STEERING_ANGLE_BRAKE_PRESSURE2_NAME "BrakePressure2"
#define BRIGHTSIDE_BRAKE_PRESSURE_STEERING_ANGLE_BRAKE_PRESSURE3_NAME "BrakePressure3"
#define BRIGHTSIDE_BRAKE_PRESSURE_STEERING_ANGLE_STEERING_ANGLE_NAME "SteeringAngle"
#define BRIGHTSIDE_VDS_DIAGNOSTICS_IWDG_STATUS_NAME "IWDGStatus"
#define BRIGHTSIDE_VDS_DIAGNOSTICS_DMA_STATUS_NAME "DMAStatus"
#define BRIGHTSIDE_MDI_DIAGNOSTICS_MCB_DRIVE_CMD_TIMEOUT_NAME "MCBDriveCmdTimeout"
#define BRIGHTSIDE_MDI_DIAGNOSTICS_DIRECTION_SENT_TO_MC_NAME "DirectionSentToMC"
#define BRIGHTSIDE_MDI_DIAGNOSTICS_DRIVE_MODE_TO_MC_NAME "DriveModeToMC"
#define BRIGHTSIDE_MDI_DIAGNOSTICS_REGEN_SENT_TO_MC_NAME "RegenSentToMC"

/**
 * Signals in message VoltageSensorsData.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_voltage_sensors_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float volt_sensor1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float volt_sensor2;
};

/**
 * Signals in message CurrentSensorsData.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_current_sensors_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float current_sensor1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float current_sensor2;
};

/**
 * Signals in message TempSensorsData.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_temp_sensors_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp_sensors1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp_sensors2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp_sensors3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp_sensors4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp_sensors5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp_sensors6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp_sensors7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp_sensors8;
};

/**
 * Signals in message Faults.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_faults_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t slave_board_comm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_self_test;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t over_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t under_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t over_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t iso_lost;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t volt_outof_range;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp_outof_range;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pack_balancing_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t llim_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hlim_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_over_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t low_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t high_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t low_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t high_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t request_regen_off;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t no_ecu_current_message;
};

/**
 * Signals in message VoltageSummary.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_voltage_summary_t {
    /**
     * Range: 0..65520 (0..140 V)
     * Scale: 0.0021367521368
     * Offset: 0
     */
    uint16_t total_pack_voltage;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltageof_least;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t indexof_lowest_module;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltageof_highest;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t indexof_highest_module;
};

/**
 * Signals in message PackHealth.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_pack_health_t {
    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t soc;

    /**
     * Range: 0..65 (0..65 kAH)
     * Scale: 1
     * Offset: 0
     */
    uint16_t depthof_discharge;

    /**
     * Range: 0..65 (0..65 kAH)
     * Scale: 1
     * Offset: 0
     */
    uint16_t capacity;

    /**
     * Unused
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t b0x00;

    /**
     * Unused
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t soh;
};

/**
 * Signals in message TempSummary.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_temp_summary_t {
    /**
     * Twos Complement
     *
     * Range: -127..127 (-127..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t average_temp;

    /**
     * Twos Complement
     *
     * Range: -127..127 (-127..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t min_temp;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t indexof_lowest_temp;

    /**
     * Twos Complement
     *
     * Range: -127..127 (-127..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t max_temp;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t indexof_highest_temp;
};

/**
 * Signals in message ModuleVoltages.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_module_voltages_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t multiplexing_bits;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage1;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage5;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage9;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage13;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage17;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage21;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage25;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage29;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage2;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage6;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage10;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage14;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage18;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage22;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage26;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage30;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage3;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage7;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage11;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage15;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage19;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage23;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage27;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage31;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage4;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage8;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage12;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage16;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage20;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage24;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage28;

    /**
     * Range: 0..255 (0..5 V)
     * Scale: 0.019607843137
     * Offset: 0
     */
    uint8_t voltage32;
};

/**
 * Signals in message ModuleTemps.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_module_temps_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t multiplexing_bits;

    /**
     * Twos Complement
     *
     * Range: -127..127 (-127..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t temp1;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp5;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp9;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp13;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp17;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp21;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp25;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp29;

    /**
     * Twos Complement
     *
     * Range: -127..127 (-127..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t temp2;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp6;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp10;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp14;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp18;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp22;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp26;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp30;

    /**
     * Twos Complement
     *
     * Range: -127..127 (-127..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t temp3;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp7;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp11;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp15;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp19;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp23;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp27;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp31;

    /**
     * Twos Complement
     *
     * Range: -127..127 (-127..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t temp4;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp8;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp12;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp16;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp20;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp24;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp28;

    /**
     * Twos Complement
     *
     * Range: 4294967169..127 (4294967169..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp32;
};

/**
 * Signals in message ECUStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_ecu_status_t {
    /**
     * int16_t, positive is discharging from PACK(divide by 65.535 to get value in A) Must cast back to int16_t if retrieving value from CAN bus
     *
     * Range: -8323..8323 (-127..127 A)
     * Scale: 0.015259021897
     * Offset: 0
     */
    int16_t pack_current;

    /**
     * 
     * uint16_t, divide by 1000 to get V
     *
     * Range: 0..16000 (0..16 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t supp_batt_voltage;

    /**
     * Unsigned, 0-30A (divide by 8.5 to get value in A)
     * 
     * 
     *
     * Range: 0..255 (0..30 A)
     * Scale: 0.11764705882
     * Offset: 0
     */
    uint8_t lv_current;

    /**
     * Active High
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pack_over_discharge_warning;

    /**
     * Active High
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pack_over_charge_warning;

    /**
     * Discharge overcurrent
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t doc;

    /**
     * Charge overcurrent
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t coc;

    /**
     * Active High
     * 
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reset_from_watchdog;

    /**
     * Active High
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t estop_pressed;

    /**
     * int8_t -127 to 127Ã¯Â¿Â½C
     *
     * Range: -127..127 (-127..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vicor_heat_sink_temp;
};

/**
 * Signals in message Information.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_information_t {
    /**
     * Unused char[4]string
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t tritium_id;

    /**
     * Unused
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t serial_number;
};

/**
 * Signals in message StatusInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_status_info_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bridge_pwm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t velocity;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bus_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bus_volt_upper_lim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bus_volt_lower_lim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t headsink_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hardware_over_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t software_over_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_bus_over_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bad_motor_pos_hall_seq;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t watchdog_caused_last;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t config_read_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t a15_v_rail_under_volt_lock;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t active_motor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved3;
};

/**
 * Signals in message BusMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_bus_measurement_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t bus_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t bus_current;
};

/**
 * Signals in message VelocityMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_velocity_measurement_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float motor_velocity;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vehicle_velocity;
};

/**
 * Signals in message SinkMotorTempMeas.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_sink_motor_temp_meas_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t motor_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t surface_temp_controller;
};

/**
 * Signals in message ModuleStatuses.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_module_statuses_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t multiplexing_bits;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module17;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module21;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module25;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module29;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module18;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module22;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module26;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module30;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module19;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module23;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module27;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module31;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module20;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module24;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module28;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t module32;
};

/**
 * Signals in message BalancingStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_balancing_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod1_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod2_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod3_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod4_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod5_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod6_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod7_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod8_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod9_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod10_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod11_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod12_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod13_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod14_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod15_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod16_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod17_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod18_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod19_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod20_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod21_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod22_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod23_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod24_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod25_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod26_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod27_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod28_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod29_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod30_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod31_bal_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mod32_bal_active;
};

/**
 * Signals in message ECUChargerModes.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_ecu_charger_modes_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_charging_voltage;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_charging_current;

    /**
     * 0x00: Start charger
     * 0x01: Close output of charger
     * 0x02: Stop charging (sleep mode)
     * Other values: Unused
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charger_enables;

    /**
     * 0x00: charging mode
     * 0x01: Heating mode(charger heats the heating film inside the battery, the charger does not need to detect the output voltage to work. When designing the resistance value of the heating film, it should be noted that the working voltage of the heating film must be between the MIN voltage and the MAX voltage of the battery. Preferably close to the battery's maximum voltage. It is best to turn off the output before switching modes)
     * Other values: Unused
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charging_modes;
};

/**
 * Signals in message OBCStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_obc_status_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t output_voltage;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t output_current;

    /**
     * 0: Normal, 1: Hardware Protection
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hardware_protection;

    /**
     * 0: Normal, 1: Internal Temp. Protection
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temeprature_protection;

    /**
     * 0: Normal, 1: Input under voltage, 2: Input over voltage, 3: No Input Voltage
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t input_voltage_status;

    /**
     * 0: Normal, 1: Fault
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t output_under_voltage;

    /**
     * 0: Normal, 1: Fault
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t output_over_voltage;

    /**
     * 0: Normal, 1: Fault
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t output_over_current;

    /**
     * 0: Normal, 1: Fault
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t output_short_circuit;

    /**
     * 0: Communication is normal 1: Receive communication timeout
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t communication_status;

    /**
     * 0: Undefined, 1: work, 2: Stop, 3: Stop or standby
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t working_status;

    /**
     * 0: Not Complete, 1: Complete
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t completion_of_initialization;

    /**
     * 0: Close, 1: Open
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fan_enable;

    /**
     * 0: Close, 1: Open
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cooling_pump_fan_enable;

    /**
     * CC: Resistance value inside charger gun, 1.5k ohms = max 8A, 680 ohms = 16A, 220 ohms = 32A
     * 
     * 0: Not Connected, 1: Half Connected, 2: Normally Connected, 3: Resistance detection error
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t c_csignal_status;

    /**
     * CP: Power supply capacity depending on duty cycle
     * 
     * 0: No CP signal detected, 1: CP signal normal
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_signal_status;

    /**
     * 0: Normal, 1: Overheating
     * 
     * Overheating fault occurs when temp is > 90 degrees
     *  and >15 min or if temp is >120 degrees
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charging_socket_temp_fault;

    /**
     * 0: in Judgment, 1: Locked, 2: Unlocked, 3: Unlock fault, 4: Locked fault
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t electronic_lock_state;

    /**
     * 0: Switch off, 1: Closed
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t s2_switch_control_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t temperaturre;
};

/**
 * Signals in message PhaseCurrentMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_phase_current_measurement_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message MotorVoltageVectorMeasurment.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_motor_voltage_vector_measurment_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message MotorCurrentVectorMeasurment.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_motor_current_vector_measurment_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message MotorBackEMFMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_motor_back_emf_measurement_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message VoltageRailMeasurement_FifteenV.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_voltage_rail_measurement_fifteen_v_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message VoltageRailMeasurement_TwoFiveV.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_voltage_rail_measurement_two_five_v_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message FanSpeedMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_fan_speed_measurement_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message AirInCPUTemperatureMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_air_in_cpu_temperature_measurement_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message OdometerBusAmpHoursMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_odometer_bus_amp_hours_measurement_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message MitsubaDataRequest.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_mitsuba_data_request_t {
    /**
     * (0000 0111) is all the frames. Comes from MDI to mitsuba motor controller
     *
     * Range: -
     * Scale: 2
     * Offset: 0
     */
    uint8_t request_for_frames;
};

/**
 * Signals in message Mitsuba_Frame0.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_mitsuba_frame0_t {
    /**
     * 0.5V/LSB
     *
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t battery_voltage;

    /**
     * 1A/LSB
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t battery_current;

    /**
     * 0:positive current. 1:negative
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_current_direction;

    /**
     * 1A/LSB
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_current_peak_average;

    /**
     * 5deg (C)/LSB
     *
     * Range: -
     * Scale: 5
     * Offset: 0
     */
    uint8_t fet_temperature;

    /**
     * 1rpm/LSB
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rotating_speed;

    /**
     * 0.5%/LSB (only in PWM control mode)
     *
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t pwm_duty;

    /**
     * 0.5deg/LSB (electric lead angle)
     *
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t lead_angle;
};

/**
 * Signals in message Mitsuba_Frame1.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_mitsuba_frame1_t {
    /**
     * 0: Eco Mode. 1: Power Mode
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_mode;

    /**
     * 0: Current Mode. 1: PWM Mode
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_control_mode;

    /**
     * 0.5%/LSB
     *
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t accelerator_position;

    /**
     * 0.5%/LSB
     *
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t regeneration_vr_position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t digit_sw_position;

    /**
     * 0.5A/LSB (Current mode)
     *
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t output_target_value;

    /**
     * 0: Stop. 1: RFU. 2: Forward Drive. 3: Reverse Drive
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_action_status;

    /**
     * 0: Drive. 1: Regeneration
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t regeneration_status;
};

/**
 * Signals in message Mitsuba_Frame2.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_mitsuba_frame2_t {
    /**
     * AD sensor error
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t analog_sensor_error;

    /**
     * U phase sensor problem
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_current_sensor_u_error;

    /**
     * W phase sensor problem
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_current_sensor_w_error;

    /**
     * controller Temp sensor error
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fet_thermistor_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfu;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_voltage_sensor_error;

    /**
     * battery current sensor ZERO(reference) position error
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_current_sensor_error;

    /**
     * motor current ZERO(reference) position error
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_current_sensor_adjust_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_current_sensor_adjust_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t accelerator_position_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfu2;

    /**
     * 12V line voltage senor error
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t controller_voltage_sensor_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfu3;

    /**
     * power line error
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t over_current_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfu4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t over_voltage_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfu5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t over_current_limit;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfu6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_system_error;

    /**
     * motor locked and no rotation
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_lock;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hall_sensor_short;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hall_sensor_open;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfu7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t over_heat_level;
};

/**
 * Signals in message DIDNextScreenButtonPress.
 *
 * Interrupt based
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_did_next_screen_button_press_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t next_screen_pressed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t unused5;
};

/**
 * Signals in message PercentageOfMaxCurrent.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_percentage_of_max_current_t {
    /**
     * in m/s (float)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float motor_velocity;

    /**
     * Percentage of max current
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float motor_current;
};

/**
 * Signals in message MotorPowerResetCommand.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_motor_power_reset_command_t {
    /**
     * In m/s
     *
     * Range: -
     * Scale: 8
     * Offset: 0
     */
    uint8_t reset_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved;

    /**
     * Percentage of max current
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t bus_current;
};

/**
 * Signals in message MCBDriveState.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_mcb_drive_state_t {
    /**
     * Drive state of the MCB: INVALID = 0x00, DRIVE= 0x01, CRUISE = 0x02,  REVERSE = 0x03, PARK = 0x04
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_state;
};

/**
 * Signals in message MCBDiagnostics.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_mcb_diagnostics_t {
    /**
     * Raw throttle ADC reading
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t throttle_adc_reading;

    /**
     * 1 if true 0 if false
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pedal_adc_out_of_range;

    /**
     * 1 if true 0 if false
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t regen_enabled;

    /**
     * 1 if true 0 if false
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_control_enabled;

    /**
     * 1 if pressed 0 if not pressed
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mech_brake_pressed;

    /**
     * 1 if fault true, 0 otherwise
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mdi_comm_fault;
};

/**
 * Signals in message RTCTimestamp.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_rtc_timestamp_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t second;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t minute;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hour;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t day;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t month;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t year;
};

/**
 * Signals in message IMU_X.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_imu_x_t {
    /**
     * Range: -100.0..100.0 (-100..100 -)
     * Scale: 1
     * Offset: 0
     */
    float acceleration_x;

    /**
     * Range: -100.0..100.0 (-100..100 -)
     * Scale: 1
     * Offset: 0
     */
    float gyroscope_x;
};

/**
 * Signals in message IMU_Y.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_imu_y_t {
    /**
     * Range: -100.0..100.0 (-100..100 -)
     * Scale: 1
     * Offset: 0
     */
    float acceleration_y;

    /**
     * Range: -100.0..100.0 (-100..100 -)
     * Scale: 1
     * Offset: 0
     */
    float gyroscope_y;
};

/**
 * Signals in message IMU_Z.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_imu_z_t {
    /**
     * Range: -100.0..100.0 (-100..100 -)
     * Scale: 1
     * Offset: 0
     */
    float acceleration_z;

    /**
     * Range: -100.0..100.0 (-100..100 -)
     * Scale: 1
     * Offset: 0
     */
    float gyroscope_z;
};

/**
 * Signals in message GPSLatitude.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_gps_latitude_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double latitude;
};

/**
 * Signals in message GPSLongitude.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_gps_longitude_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double longitude;
};

/**
 * Signals in message GPSAltitudeHdop.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_gps_altitude_hdop_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float altitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float hdop;
};

/**
 * Signals in message GPSSideCount.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_gps_side_count_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t latside;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lonside;

    /**
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t satellite_count;
};

/**
 * Signals in message TELDiagnostics.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_tel_diagnostics_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rtc_reset;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_fix;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t imu_fail;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t watchdog_reset;
};

/**
 * Signals in message MCBGithash.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_mcb_githash_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t short_githash;
};

/**
 * Signals in message AirOutCapTemp.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_air_out_cap_temp_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ShockTravel.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_shock_travel_t {
    /**
     * uint16_t
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t shock_travel1;

    /**
     * uint16_t
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t shock_travel2;

    /**
     * uint16_t
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t shock_travel3;

    /**
     * uint16_t
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t shock_travel4;
};

/**
 * Signals in message BrakePressureSteeringAngle.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_brake_pressure_steering_angle_t {
    /**
     * uint16_t, PSI
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_pressure1;

    /**
     * uint16_t, PSI
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_pressure2;

    /**
     * uint16_t, PSI
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_pressure3;

    /**
     * uint16_t, Angle in Degrees
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t steering_angle;
};

/**
 * Signals in message VDSDiagnostics.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_vds_diagnostics_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t iwdg_status;

    /**
     * Determine if 1 bit or 1 for each channel
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dma_status;
};

/**
 * Signals in message MDIDiagnostics.
 *
 * All signal values are as on the CAN bus.
 */
struct brightside_mdi_diagnostics_t {
    /**
     * 0 = no timeout, 1 = timeout
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcb_drive_cmd_timeout;

    /**
     * 0 = reverse, 1 = forward
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t direction_sent_to_mc;

    /**
     * 0 = ECO mode, 1 = POWER mode
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_mode_to_mc;

    /**
     * 0 = no regen requested, 1 = regen ON
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t regen_sent_to_mc;
};

/**
 * Pack message VoltageSensorsData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_voltage_sensors_data_pack(
    uint8_t *dst_p,
    const struct brightside_voltage_sensors_data_t *src_p,
    size_t size);

/**
 * Unpack message VoltageSensorsData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_voltage_sensors_data_unpack(
    struct brightside_voltage_sensors_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VoltageSensorsData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_voltage_sensors_data_init(struct brightside_voltage_sensors_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_voltage_sensors_data_volt_sensor1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_voltage_sensors_data_volt_sensor1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_voltage_sensors_data_volt_sensor1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_voltage_sensors_data_volt_sensor2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_voltage_sensors_data_volt_sensor2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_voltage_sensors_data_volt_sensor2_is_in_range(float value);

/**
 * Pack message CurrentSensorsData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_current_sensors_data_pack(
    uint8_t *dst_p,
    const struct brightside_current_sensors_data_t *src_p,
    size_t size);

/**
 * Unpack message CurrentSensorsData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_current_sensors_data_unpack(
    struct brightside_current_sensors_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CurrentSensorsData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_current_sensors_data_init(struct brightside_current_sensors_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_current_sensors_data_current_sensor1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_current_sensors_data_current_sensor1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_current_sensors_data_current_sensor1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_current_sensors_data_current_sensor2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_current_sensors_data_current_sensor2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_current_sensors_data_current_sensor2_is_in_range(float value);

/**
 * Pack message TempSensorsData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_temp_sensors_data_pack(
    uint8_t *dst_p,
    const struct brightside_temp_sensors_data_t *src_p,
    size_t size);

/**
 * Unpack message TempSensorsData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_temp_sensors_data_unpack(
    struct brightside_temp_sensors_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TempSensorsData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_temp_sensors_data_init(struct brightside_temp_sensors_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_temp_sensors_data_temp_sensors1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_sensors_data_temp_sensors1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_sensors_data_temp_sensors1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_temp_sensors_data_temp_sensors2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_sensors_data_temp_sensors2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_sensors_data_temp_sensors2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_temp_sensors_data_temp_sensors3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_sensors_data_temp_sensors3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_sensors_data_temp_sensors3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_temp_sensors_data_temp_sensors4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_sensors_data_temp_sensors4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_sensors_data_temp_sensors4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_temp_sensors_data_temp_sensors5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_sensors_data_temp_sensors5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_sensors_data_temp_sensors5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_temp_sensors_data_temp_sensors6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_sensors_data_temp_sensors6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_sensors_data_temp_sensors6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_temp_sensors_data_temp_sensors7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_sensors_data_temp_sensors7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_sensors_data_temp_sensors7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_temp_sensors_data_temp_sensors8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_sensors_data_temp_sensors8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_sensors_data_temp_sensors8_is_in_range(uint8_t value);

/**
 * Pack message Faults.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_faults_pack(
    uint8_t *dst_p,
    const struct brightside_faults_t *src_p,
    size_t size);

/**
 * Unpack message Faults.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_faults_unpack(
    struct brightside_faults_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Faults.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_faults_init(struct brightside_faults_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_slave_board_comm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_slave_board_comm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_slave_board_comm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_bms_self_test_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_bms_self_test_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_bms_self_test_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_over_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_over_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_over_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_under_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_under_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_under_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_over_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_over_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_over_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_iso_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_iso_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_iso_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_charge_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_charge_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_charge_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_volt_outof_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_volt_outof_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_volt_outof_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_temp_outof_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_temp_outof_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_temp_outof_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_pack_balancing_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_pack_balancing_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_pack_balancing_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_llim_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_llim_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_llim_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_hlim_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_hlim_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_hlim_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_charge_over_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_charge_over_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_charge_over_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_low_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_low_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_low_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_high_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_high_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_high_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_low_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_low_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_low_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_high_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_high_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_high_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_request_regen_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_request_regen_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_request_regen_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_faults_no_ecu_current_message_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_faults_no_ecu_current_message_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_faults_no_ecu_current_message_is_in_range(uint8_t value);

/**
 * Pack message VoltageSummary.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_voltage_summary_pack(
    uint8_t *dst_p,
    const struct brightside_voltage_summary_t *src_p,
    size_t size);

/**
 * Unpack message VoltageSummary.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_voltage_summary_unpack(
    struct brightside_voltage_summary_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VoltageSummary.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_voltage_summary_init(struct brightside_voltage_summary_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_voltage_summary_total_pack_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_voltage_summary_total_pack_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_voltage_summary_total_pack_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_voltage_summary_voltageof_least_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_voltage_summary_voltageof_least_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_voltage_summary_voltageof_least_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_voltage_summary_indexof_lowest_module_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_voltage_summary_indexof_lowest_module_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_voltage_summary_indexof_lowest_module_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_voltage_summary_voltageof_highest_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_voltage_summary_voltageof_highest_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_voltage_summary_voltageof_highest_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_voltage_summary_indexof_highest_module_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_voltage_summary_indexof_highest_module_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_voltage_summary_indexof_highest_module_is_in_range(uint8_t value);

/**
 * Pack message PackHealth.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_pack_health_pack(
    uint8_t *dst_p,
    const struct brightside_pack_health_t *src_p,
    size_t size);

/**
 * Unpack message PackHealth.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_pack_health_unpack(
    struct brightside_pack_health_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PackHealth.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_pack_health_init(struct brightside_pack_health_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_pack_health_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_pack_health_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_pack_health_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_pack_health_depthof_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_pack_health_depthof_discharge_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_pack_health_depthof_discharge_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_pack_health_capacity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_pack_health_capacity_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_pack_health_capacity_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_pack_health_b0x00_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_pack_health_b0x00_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_pack_health_b0x00_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_pack_health_soh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_pack_health_soh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_pack_health_soh_is_in_range(uint8_t value);

/**
 * Pack message TempSummary.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_temp_summary_pack(
    uint8_t *dst_p,
    const struct brightside_temp_summary_t *src_p,
    size_t size);

/**
 * Unpack message TempSummary.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_temp_summary_unpack(
    struct brightside_temp_summary_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TempSummary.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_temp_summary_init(struct brightside_temp_summary_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t brightside_temp_summary_average_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_summary_average_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_summary_average_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t brightside_temp_summary_min_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_summary_min_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_summary_min_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_temp_summary_indexof_lowest_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_summary_indexof_lowest_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_summary_indexof_lowest_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t brightside_temp_summary_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_summary_max_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_summary_max_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_temp_summary_indexof_highest_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_temp_summary_indexof_highest_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_temp_summary_indexof_highest_temp_is_in_range(uint8_t value);

/**
 * Pack message ModuleVoltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_module_voltages_pack(
    uint8_t *dst_p,
    const struct brightside_module_voltages_t *src_p,
    size_t size);

/**
 * Unpack message ModuleVoltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_module_voltages_unpack(
    struct brightside_module_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ModuleVoltages.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_module_voltages_init(struct brightside_module_voltages_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_multiplexing_bits_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_multiplexing_bits_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_multiplexing_bits_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_voltages_voltage32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_voltages_voltage32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_voltages_voltage32_is_in_range(uint8_t value);

/**
 * Pack message ModuleTemps.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_module_temps_pack(
    uint8_t *dst_p,
    const struct brightside_module_temps_t *src_p,
    size_t size);

/**
 * Unpack message ModuleTemps.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_module_temps_unpack(
    struct brightside_module_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ModuleTemps.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_module_temps_init(struct brightside_module_temps_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_multiplexing_bits_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_multiplexing_bits_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_multiplexing_bits_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t brightside_module_temps_temp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t brightside_module_temps_temp2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t brightside_module_temps_temp3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t brightside_module_temps_temp4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_temps_temp32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_temps_temp32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_temps_temp32_is_in_range(uint8_t value);

/**
 * Pack message ECUStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_ecu_status_pack(
    uint8_t *dst_p,
    const struct brightside_ecu_status_t *src_p,
    size_t size);

/**
 * Unpack message ECUStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_ecu_status_unpack(
    struct brightside_ecu_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECUStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_ecu_status_init(struct brightside_ecu_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t brightside_ecu_status_pack_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_status_pack_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_status_pack_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_ecu_status_supp_batt_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_status_supp_batt_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_status_supp_batt_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_ecu_status_lv_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_status_lv_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_status_lv_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_ecu_status_pack_over_discharge_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_status_pack_over_discharge_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_status_pack_over_discharge_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_ecu_status_pack_over_charge_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_status_pack_over_charge_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_status_pack_over_charge_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_ecu_status_doc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_status_doc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_status_doc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_ecu_status_coc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_status_coc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_status_coc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_ecu_status_reset_from_watchdog_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_status_reset_from_watchdog_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_status_reset_from_watchdog_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_ecu_status_estop_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_status_estop_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_status_estop_pressed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_ecu_status_vicor_heat_sink_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_status_vicor_heat_sink_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_status_vicor_heat_sink_temp_is_in_range(uint8_t value);

/**
 * Pack message Information.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_information_pack(
    uint8_t *dst_p,
    const struct brightside_information_t *src_p,
    size_t size);

/**
 * Unpack message Information.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_information_unpack(
    struct brightside_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Information.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_information_init(struct brightside_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t brightside_information_tritium_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_information_tritium_id_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_information_tritium_id_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t brightside_information_serial_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_information_serial_number_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_information_serial_number_is_in_range(uint32_t value);

/**
 * Pack message StatusInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_status_info_pack(
    uint8_t *dst_p,
    const struct brightside_status_info_t *src_p,
    size_t size);

/**
 * Unpack message StatusInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_status_info_unpack(
    struct brightside_status_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from StatusInfo.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_status_info_init(struct brightside_status_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_bridge_pwm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_bridge_pwm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_bridge_pwm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_motor_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_motor_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_motor_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_velocity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_velocity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_bus_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_bus_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_bus_volt_upper_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_bus_volt_upper_lim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_bus_volt_upper_lim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_bus_volt_lower_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_bus_volt_lower_lim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_bus_volt_lower_lim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_headsink_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_headsink_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_headsink_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_status_info_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_reserved_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_hardware_over_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_hardware_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_hardware_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_software_over_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_software_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_software_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_dc_bus_over_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_dc_bus_over_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_dc_bus_over_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_bad_motor_pos_hall_seq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_bad_motor_pos_hall_seq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_bad_motor_pos_hall_seq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_watchdog_caused_last_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_watchdog_caused_last_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_watchdog_caused_last_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_config_read_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_config_read_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_config_read_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_status_info_a15_v_rail_under_volt_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_a15_v_rail_under_volt_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_a15_v_rail_under_volt_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_status_info_reserved2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_reserved2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_reserved2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_status_info_active_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_active_motor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_active_motor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_status_info_reserved3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_status_info_reserved3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_status_info_reserved3_is_in_range(uint16_t value);

/**
 * Pack message BusMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_bus_measurement_pack(
    uint8_t *dst_p,
    const struct brightside_bus_measurement_t *src_p,
    size_t size);

/**
 * Unpack message BusMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_bus_measurement_unpack(
    struct brightside_bus_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BusMeasurement.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_bus_measurement_init(struct brightside_bus_measurement_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t brightside_bus_measurement_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_bus_measurement_bus_voltage_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_bus_measurement_bus_voltage_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t brightside_bus_measurement_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_bus_measurement_bus_current_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_bus_measurement_bus_current_is_in_range(uint32_t value);

/**
 * Pack message VelocityMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_velocity_measurement_pack(
    uint8_t *dst_p,
    const struct brightside_velocity_measurement_t *src_p,
    size_t size);

/**
 * Unpack message VelocityMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_velocity_measurement_unpack(
    struct brightside_velocity_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VelocityMeasurement.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_velocity_measurement_init(struct brightside_velocity_measurement_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_velocity_measurement_motor_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_velocity_measurement_motor_velocity_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_velocity_measurement_motor_velocity_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_velocity_measurement_vehicle_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_velocity_measurement_vehicle_velocity_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_velocity_measurement_vehicle_velocity_is_in_range(float value);

/**
 * Pack message SinkMotorTempMeas.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_sink_motor_temp_meas_pack(
    uint8_t *dst_p,
    const struct brightside_sink_motor_temp_meas_t *src_p,
    size_t size);

/**
 * Unpack message SinkMotorTempMeas.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_sink_motor_temp_meas_unpack(
    struct brightside_sink_motor_temp_meas_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SinkMotorTempMeas.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_sink_motor_temp_meas_init(struct brightside_sink_motor_temp_meas_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t brightside_sink_motor_temp_meas_motor_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_sink_motor_temp_meas_motor_temp_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_sink_motor_temp_meas_motor_temp_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t brightside_sink_motor_temp_meas_surface_temp_controller_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_sink_motor_temp_meas_surface_temp_controller_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_sink_motor_temp_meas_surface_temp_controller_is_in_range(uint32_t value);

/**
 * Pack message ModuleStatuses.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_module_statuses_pack(
    uint8_t *dst_p,
    const struct brightside_module_statuses_t *src_p,
    size_t size);

/**
 * Unpack message ModuleStatuses.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_module_statuses_unpack(
    struct brightside_module_statuses_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ModuleStatuses.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_module_statuses_init(struct brightside_module_statuses_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_multiplexing_bits_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_multiplexing_bits_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_multiplexing_bits_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_module_statuses_module32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_module_statuses_module32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_module_statuses_module32_is_in_range(uint8_t value);

/**
 * Pack message BalancingStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_balancing_status_pack(
    uint8_t *dst_p,
    const struct brightside_balancing_status_t *src_p,
    size_t size);

/**
 * Unpack message BalancingStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_balancing_status_unpack(
    struct brightside_balancing_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BalancingStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_balancing_status_init(struct brightside_balancing_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod1_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod1_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod1_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod2_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod2_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod2_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod3_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod3_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod3_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod4_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod4_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod4_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod5_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod5_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod5_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod6_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod6_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod6_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod7_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod7_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod7_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod8_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod8_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod8_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod9_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod9_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod9_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod10_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod10_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod10_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod11_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod11_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod11_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod12_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod12_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod12_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod13_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod13_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod13_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod14_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod14_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod14_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod15_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod15_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod15_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod16_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod16_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod16_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod17_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod17_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod17_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod18_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod18_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod18_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod19_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod19_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod19_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod20_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod20_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod20_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod21_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod21_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod21_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod22_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod22_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod22_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod23_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod23_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod23_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod24_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod24_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod24_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod25_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod25_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod25_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod26_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod26_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod26_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod27_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod27_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod27_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod28_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod28_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod28_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod29_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod29_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod29_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod30_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod30_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod30_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod31_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod31_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod31_bal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_balancing_status_mod32_bal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_balancing_status_mod32_bal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_balancing_status_mod32_bal_active_is_in_range(uint8_t value);

/**
 * Pack message ECUChargerModes.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_ecu_charger_modes_pack(
    uint8_t *dst_p,
    const struct brightside_ecu_charger_modes_t *src_p,
    size_t size);

/**
 * Unpack message ECUChargerModes.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_ecu_charger_modes_unpack(
    struct brightside_ecu_charger_modes_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECUChargerModes.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_ecu_charger_modes_init(struct brightside_ecu_charger_modes_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_ecu_charger_modes_max_charging_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_charger_modes_max_charging_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_charger_modes_max_charging_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_ecu_charger_modes_max_charging_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_charger_modes_max_charging_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_charger_modes_max_charging_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_ecu_charger_modes_charger_enables_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_charger_modes_charger_enables_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_charger_modes_charger_enables_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_ecu_charger_modes_charging_modes_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_ecu_charger_modes_charging_modes_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_ecu_charger_modes_charging_modes_is_in_range(uint8_t value);

/**
 * Pack message OBCStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_obc_status_pack(
    uint8_t *dst_p,
    const struct brightside_obc_status_t *src_p,
    size_t size);

/**
 * Unpack message OBCStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_obc_status_unpack(
    struct brightside_obc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from OBCStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_obc_status_init(struct brightside_obc_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_obc_status_output_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_output_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_output_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_obc_status_output_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_output_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_output_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_hardware_protection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_hardware_protection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_hardware_protection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_temeprature_protection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_temeprature_protection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_temeprature_protection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_input_voltage_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_input_voltage_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_input_voltage_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_output_under_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_output_under_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_output_under_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_output_over_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_output_over_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_output_over_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_output_over_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_output_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_output_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_output_short_circuit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_output_short_circuit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_output_short_circuit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_communication_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_communication_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_communication_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_working_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_working_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_working_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_completion_of_initialization_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_completion_of_initialization_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_completion_of_initialization_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_fan_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_fan_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_fan_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_cooling_pump_fan_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_cooling_pump_fan_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_cooling_pump_fan_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_c_csignal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_c_csignal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_c_csignal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_cp_signal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_cp_signal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_cp_signal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_charging_socket_temp_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_charging_socket_temp_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_charging_socket_temp_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_electronic_lock_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_electronic_lock_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_electronic_lock_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_s2_switch_control_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_s2_switch_control_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_s2_switch_control_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_obc_status_temperaturre_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_obc_status_temperaturre_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_obc_status_temperaturre_is_in_range(uint8_t value);

/**
 * Pack message PhaseCurrentMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_phase_current_measurement_pack(
    uint8_t *dst_p,
    const struct brightside_phase_current_measurement_t *src_p,
    size_t size);

/**
 * Unpack message PhaseCurrentMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_phase_current_measurement_unpack(
    struct brightside_phase_current_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PhaseCurrentMeasurement.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_phase_current_measurement_init(struct brightside_phase_current_measurement_t *msg_p);

/**
 * Pack message MotorVoltageVectorMeasurment.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_motor_voltage_vector_measurment_pack(
    uint8_t *dst_p,
    const struct brightside_motor_voltage_vector_measurment_t *src_p,
    size_t size);

/**
 * Unpack message MotorVoltageVectorMeasurment.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_motor_voltage_vector_measurment_unpack(
    struct brightside_motor_voltage_vector_measurment_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MotorVoltageVectorMeasurment.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_motor_voltage_vector_measurment_init(struct brightside_motor_voltage_vector_measurment_t *msg_p);

/**
 * Pack message MotorCurrentVectorMeasurment.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_motor_current_vector_measurment_pack(
    uint8_t *dst_p,
    const struct brightside_motor_current_vector_measurment_t *src_p,
    size_t size);

/**
 * Unpack message MotorCurrentVectorMeasurment.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_motor_current_vector_measurment_unpack(
    struct brightside_motor_current_vector_measurment_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MotorCurrentVectorMeasurment.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_motor_current_vector_measurment_init(struct brightside_motor_current_vector_measurment_t *msg_p);

/**
 * Pack message MotorBackEMFMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_motor_back_emf_measurement_pack(
    uint8_t *dst_p,
    const struct brightside_motor_back_emf_measurement_t *src_p,
    size_t size);

/**
 * Unpack message MotorBackEMFMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_motor_back_emf_measurement_unpack(
    struct brightside_motor_back_emf_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MotorBackEMFMeasurement.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_motor_back_emf_measurement_init(struct brightside_motor_back_emf_measurement_t *msg_p);

/**
 * Pack message VoltageRailMeasurement_FifteenV.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_voltage_rail_measurement_fifteen_v_pack(
    uint8_t *dst_p,
    const struct brightside_voltage_rail_measurement_fifteen_v_t *src_p,
    size_t size);

/**
 * Unpack message VoltageRailMeasurement_FifteenV.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_voltage_rail_measurement_fifteen_v_unpack(
    struct brightside_voltage_rail_measurement_fifteen_v_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VoltageRailMeasurement_FifteenV.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_voltage_rail_measurement_fifteen_v_init(struct brightside_voltage_rail_measurement_fifteen_v_t *msg_p);

/**
 * Pack message VoltageRailMeasurement_TwoFiveV.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_voltage_rail_measurement_two_five_v_pack(
    uint8_t *dst_p,
    const struct brightside_voltage_rail_measurement_two_five_v_t *src_p,
    size_t size);

/**
 * Unpack message VoltageRailMeasurement_TwoFiveV.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_voltage_rail_measurement_two_five_v_unpack(
    struct brightside_voltage_rail_measurement_two_five_v_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VoltageRailMeasurement_TwoFiveV.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_voltage_rail_measurement_two_five_v_init(struct brightside_voltage_rail_measurement_two_five_v_t *msg_p);

/**
 * Pack message FanSpeedMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_fan_speed_measurement_pack(
    uint8_t *dst_p,
    const struct brightside_fan_speed_measurement_t *src_p,
    size_t size);

/**
 * Unpack message FanSpeedMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_fan_speed_measurement_unpack(
    struct brightside_fan_speed_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FanSpeedMeasurement.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_fan_speed_measurement_init(struct brightside_fan_speed_measurement_t *msg_p);

/**
 * Pack message AirInCPUTemperatureMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_air_in_cpu_temperature_measurement_pack(
    uint8_t *dst_p,
    const struct brightside_air_in_cpu_temperature_measurement_t *src_p,
    size_t size);

/**
 * Unpack message AirInCPUTemperatureMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_air_in_cpu_temperature_measurement_unpack(
    struct brightside_air_in_cpu_temperature_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AirInCPUTemperatureMeasurement.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_air_in_cpu_temperature_measurement_init(struct brightside_air_in_cpu_temperature_measurement_t *msg_p);

/**
 * Pack message OdometerBusAmpHoursMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_odometer_bus_amp_hours_measurement_pack(
    uint8_t *dst_p,
    const struct brightside_odometer_bus_amp_hours_measurement_t *src_p,
    size_t size);

/**
 * Unpack message OdometerBusAmpHoursMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_odometer_bus_amp_hours_measurement_unpack(
    struct brightside_odometer_bus_amp_hours_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from OdometerBusAmpHoursMeasurement.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_odometer_bus_amp_hours_measurement_init(struct brightside_odometer_bus_amp_hours_measurement_t *msg_p);

/**
 * Pack message MitsubaDataRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_mitsuba_data_request_pack(
    uint8_t *dst_p,
    const struct brightside_mitsuba_data_request_t *src_p,
    size_t size);

/**
 * Unpack message MitsubaDataRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_mitsuba_data_request_unpack(
    struct brightside_mitsuba_data_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MitsubaDataRequest.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_mitsuba_data_request_init(struct brightside_mitsuba_data_request_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_data_request_request_for_frames_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_data_request_request_for_frames_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_data_request_request_for_frames_is_in_range(uint8_t value);

/**
 * Pack message Mitsuba_Frame0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_mitsuba_frame0_pack(
    uint8_t *dst_p,
    const struct brightside_mitsuba_frame0_t *src_p,
    size_t size);

/**
 * Unpack message Mitsuba_Frame0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_mitsuba_frame0_unpack(
    struct brightside_mitsuba_frame0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Mitsuba_Frame0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_mitsuba_frame0_init(struct brightside_mitsuba_frame0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_mitsuba_frame0_battery_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame0_battery_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame0_battery_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_mitsuba_frame0_battery_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame0_battery_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame0_battery_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame0_battery_current_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame0_battery_current_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame0_battery_current_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_mitsuba_frame0_motor_current_peak_average_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame0_motor_current_peak_average_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame0_motor_current_peak_average_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame0_fet_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame0_fet_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame0_fet_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_mitsuba_frame0_motor_rotating_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame0_motor_rotating_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame0_motor_rotating_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_mitsuba_frame0_pwm_duty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame0_pwm_duty_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame0_pwm_duty_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame0_lead_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame0_lead_angle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame0_lead_angle_is_in_range(uint8_t value);

/**
 * Pack message Mitsuba_Frame1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_mitsuba_frame1_pack(
    uint8_t *dst_p,
    const struct brightside_mitsuba_frame1_t *src_p,
    size_t size);

/**
 * Unpack message Mitsuba_Frame1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_mitsuba_frame1_unpack(
    struct brightside_mitsuba_frame1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Mitsuba_Frame1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_mitsuba_frame1_init(struct brightside_mitsuba_frame1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame1_power_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame1_power_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame1_power_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame1_motor_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame1_motor_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame1_motor_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_mitsuba_frame1_accelerator_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame1_accelerator_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame1_accelerator_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_mitsuba_frame1_regeneration_vr_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame1_regeneration_vr_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame1_regeneration_vr_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame1_digit_sw_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame1_digit_sw_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame1_digit_sw_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_mitsuba_frame1_output_target_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame1_output_target_value_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame1_output_target_value_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame1_drive_action_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame1_drive_action_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame1_drive_action_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame1_regeneration_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame1_regeneration_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame1_regeneration_status_is_in_range(uint8_t value);

/**
 * Pack message Mitsuba_Frame2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_mitsuba_frame2_pack(
    uint8_t *dst_p,
    const struct brightside_mitsuba_frame2_t *src_p,
    size_t size);

/**
 * Unpack message Mitsuba_Frame2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_mitsuba_frame2_unpack(
    struct brightside_mitsuba_frame2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Mitsuba_Frame2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_mitsuba_frame2_init(struct brightside_mitsuba_frame2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_analog_sensor_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_analog_sensor_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_analog_sensor_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_motor_current_sensor_u_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_motor_current_sensor_u_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_motor_current_sensor_u_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_motor_current_sensor_w_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_motor_current_sensor_w_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_motor_current_sensor_w_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_fet_thermistor_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_fet_thermistor_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_fet_thermistor_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_rfu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_rfu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_rfu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_battery_voltage_sensor_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_battery_voltage_sensor_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_battery_voltage_sensor_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_battery_current_sensor_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_battery_current_sensor_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_battery_current_sensor_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_battery_current_sensor_adjust_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_battery_current_sensor_adjust_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_battery_current_sensor_adjust_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_motor_current_sensor_adjust_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_motor_current_sensor_adjust_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_motor_current_sensor_adjust_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_accelerator_position_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_accelerator_position_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_accelerator_position_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_rfu2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_rfu2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_rfu2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_controller_voltage_sensor_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_controller_voltage_sensor_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_controller_voltage_sensor_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_rfu3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_rfu3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_rfu3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_power_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_power_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_power_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_over_current_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_over_current_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_over_current_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_rfu4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_rfu4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_rfu4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_over_voltage_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_over_voltage_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_over_voltage_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_rfu5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_rfu5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_rfu5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_over_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_over_current_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_over_current_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_rfu6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_rfu6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_rfu6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_motor_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_motor_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_motor_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_motor_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_motor_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_motor_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_hall_sensor_short_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_hall_sensor_short_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_hall_sensor_short_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_hall_sensor_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_hall_sensor_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_hall_sensor_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_rfu7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_rfu7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_rfu7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mitsuba_frame2_over_heat_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mitsuba_frame2_over_heat_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mitsuba_frame2_over_heat_level_is_in_range(uint8_t value);

/**
 * Pack message DIDNextScreenButtonPress.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_did_next_screen_button_press_pack(
    uint8_t *dst_p,
    const struct brightside_did_next_screen_button_press_t *src_p,
    size_t size);

/**
 * Unpack message DIDNextScreenButtonPress.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_did_next_screen_button_press_unpack(
    struct brightside_did_next_screen_button_press_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DIDNextScreenButtonPress.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_did_next_screen_button_press_init(struct brightside_did_next_screen_button_press_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_did_next_screen_button_press_next_screen_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_did_next_screen_button_press_next_screen_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_did_next_screen_button_press_next_screen_pressed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_did_next_screen_button_press_unused5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_did_next_screen_button_press_unused5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_did_next_screen_button_press_unused5_is_in_range(uint8_t value);

/**
 * Pack message PercentageOfMaxCurrent.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_percentage_of_max_current_pack(
    uint8_t *dst_p,
    const struct brightside_percentage_of_max_current_t *src_p,
    size_t size);

/**
 * Unpack message PercentageOfMaxCurrent.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_percentage_of_max_current_unpack(
    struct brightside_percentage_of_max_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PercentageOfMaxCurrent.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_percentage_of_max_current_init(struct brightside_percentage_of_max_current_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_percentage_of_max_current_motor_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_percentage_of_max_current_motor_velocity_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_percentage_of_max_current_motor_velocity_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_percentage_of_max_current_motor_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_percentage_of_max_current_motor_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_percentage_of_max_current_motor_current_is_in_range(float value);

/**
 * Pack message MotorPowerResetCommand.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_motor_power_reset_command_pack(
    uint8_t *dst_p,
    const struct brightside_motor_power_reset_command_t *src_p,
    size_t size);

/**
 * Unpack message MotorPowerResetCommand.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_motor_power_reset_command_unpack(
    struct brightside_motor_power_reset_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MotorPowerResetCommand.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_motor_power_reset_command_init(struct brightside_motor_power_reset_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_motor_power_reset_command_reset_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_motor_power_reset_command_reset_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_motor_power_reset_command_reset_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t brightside_motor_power_reset_command_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_motor_power_reset_command_reserved_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_motor_power_reset_command_reserved_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t brightside_motor_power_reset_command_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_motor_power_reset_command_bus_current_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_motor_power_reset_command_bus_current_is_in_range(uint32_t value);

/**
 * Pack message MCBDriveState.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_mcb_drive_state_pack(
    uint8_t *dst_p,
    const struct brightside_mcb_drive_state_t *src_p,
    size_t size);

/**
 * Unpack message MCBDriveState.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_mcb_drive_state_unpack(
    struct brightside_mcb_drive_state_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCBDriveState.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_mcb_drive_state_init(struct brightside_mcb_drive_state_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mcb_drive_state_drive_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mcb_drive_state_drive_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mcb_drive_state_drive_state_is_in_range(uint8_t value);

/**
 * Pack message MCBDiagnostics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_mcb_diagnostics_pack(
    uint8_t *dst_p,
    const struct brightside_mcb_diagnostics_t *src_p,
    size_t size);

/**
 * Unpack message MCBDiagnostics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_mcb_diagnostics_unpack(
    struct brightside_mcb_diagnostics_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCBDiagnostics.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_mcb_diagnostics_init(struct brightside_mcb_diagnostics_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *  
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_mcb_diagnostics_throttle_adc_reading_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mcb_diagnostics_throttle_adc_reading_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mcb_diagnostics_throttle_adc_reading_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mcb_diagnostics_pedal_adc_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mcb_diagnostics_pedal_adc_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mcb_diagnostics_pedal_adc_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mcb_diagnostics_regen_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mcb_diagnostics_regen_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mcb_diagnostics_regen_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mcb_diagnostics_cruise_control_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mcb_diagnostics_cruise_control_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mcb_diagnostics_cruise_control_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mcb_diagnostics_mech_brake_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mcb_diagnostics_mech_brake_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mcb_diagnostics_mech_brake_pressed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mcb_diagnostics_mdi_comm_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mcb_diagnostics_mdi_comm_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mcb_diagnostics_mdi_comm_fault_is_in_range(uint8_t value);

/**
 * Pack message RTCTimestamp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_rtc_timestamp_pack(
    uint8_t *dst_p,
    const struct brightside_rtc_timestamp_t *src_p,
    size_t size);

/**
 * Unpack message RTCTimestamp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_rtc_timestamp_unpack(
    struct brightside_rtc_timestamp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RTCTimestamp.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_rtc_timestamp_init(struct brightside_rtc_timestamp_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_rtc_timestamp_second_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_rtc_timestamp_second_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_rtc_timestamp_second_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_rtc_timestamp_minute_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_rtc_timestamp_minute_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_rtc_timestamp_minute_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_rtc_timestamp_hour_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_rtc_timestamp_hour_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_rtc_timestamp_hour_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_rtc_timestamp_day_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_rtc_timestamp_day_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_rtc_timestamp_day_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_rtc_timestamp_month_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_rtc_timestamp_month_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_rtc_timestamp_month_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_rtc_timestamp_year_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_rtc_timestamp_year_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_rtc_timestamp_year_is_in_range(uint8_t value);

/**
 * Pack message IMU_X.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_imu_x_pack(
    uint8_t *dst_p,
    const struct brightside_imu_x_t *src_p,
    size_t size);

/**
 * Unpack message IMU_X.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_imu_x_unpack(
    struct brightside_imu_x_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IMU_X.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_imu_x_init(struct brightside_imu_x_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_imu_x_acceleration_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_imu_x_acceleration_x_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_imu_x_acceleration_x_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_imu_x_gyroscope_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_imu_x_gyroscope_x_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_imu_x_gyroscope_x_is_in_range(float value);

/**
 * Pack message IMU_Y.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_imu_y_pack(
    uint8_t *dst_p,
    const struct brightside_imu_y_t *src_p,
    size_t size);

/**
 * Unpack message IMU_Y.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_imu_y_unpack(
    struct brightside_imu_y_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IMU_Y.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_imu_y_init(struct brightside_imu_y_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_imu_y_acceleration_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_imu_y_acceleration_y_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_imu_y_acceleration_y_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_imu_y_gyroscope_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_imu_y_gyroscope_y_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_imu_y_gyroscope_y_is_in_range(float value);

/**
 * Pack message IMU_Z.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_imu_z_pack(
    uint8_t *dst_p,
    const struct brightside_imu_z_t *src_p,
    size_t size);

/**
 * Unpack message IMU_Z.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_imu_z_unpack(
    struct brightside_imu_z_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IMU_Z.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_imu_z_init(struct brightside_imu_z_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_imu_z_acceleration_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_imu_z_acceleration_z_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_imu_z_acceleration_z_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_imu_z_gyroscope_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_imu_z_gyroscope_z_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_imu_z_gyroscope_z_is_in_range(float value);

/**
 * Pack message GPSLatitude.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_gps_latitude_pack(
    uint8_t *dst_p,
    const struct brightside_gps_latitude_t *src_p,
    size_t size);

/**
 * Unpack message GPSLatitude.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_gps_latitude_unpack(
    struct brightside_gps_latitude_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GPSLatitude.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_gps_latitude_init(struct brightside_gps_latitude_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double brightside_gps_latitude_latitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_gps_latitude_latitude_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_gps_latitude_latitude_is_in_range(double value);

/**
 * Pack message GPSLongitude.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_gps_longitude_pack(
    uint8_t *dst_p,
    const struct brightside_gps_longitude_t *src_p,
    size_t size);

/**
 * Unpack message GPSLongitude.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_gps_longitude_unpack(
    struct brightside_gps_longitude_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GPSLongitude.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_gps_longitude_init(struct brightside_gps_longitude_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double brightside_gps_longitude_longitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_gps_longitude_longitude_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_gps_longitude_longitude_is_in_range(double value);

/**
 * Pack message GPSAltitudeHdop.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_gps_altitude_hdop_pack(
    uint8_t *dst_p,
    const struct brightside_gps_altitude_hdop_t *src_p,
    size_t size);

/**
 * Unpack message GPSAltitudeHdop.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_gps_altitude_hdop_unpack(
    struct brightside_gps_altitude_hdop_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GPSAltitudeHdop.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_gps_altitude_hdop_init(struct brightside_gps_altitude_hdop_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_gps_altitude_hdop_altitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_gps_altitude_hdop_altitude_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_gps_altitude_hdop_altitude_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float brightside_gps_altitude_hdop_hdop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_gps_altitude_hdop_hdop_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_gps_altitude_hdop_hdop_is_in_range(float value);

/**
 * Pack message GPSSideCount.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_gps_side_count_pack(
    uint8_t *dst_p,
    const struct brightside_gps_side_count_t *src_p,
    size_t size);

/**
 * Unpack message GPSSideCount.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_gps_side_count_unpack(
    struct brightside_gps_side_count_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GPSSideCount.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_gps_side_count_init(struct brightside_gps_side_count_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_gps_side_count_latside_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_gps_side_count_latside_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_gps_side_count_latside_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_gps_side_count_lonside_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_gps_side_count_lonside_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_gps_side_count_lonside_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t brightside_gps_side_count_satellite_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_gps_side_count_satellite_count_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_gps_side_count_satellite_count_is_in_range(uint32_t value);

/**
 * Pack message TELDiagnostics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_tel_diagnostics_pack(
    uint8_t *dst_p,
    const struct brightside_tel_diagnostics_t *src_p,
    size_t size);

/**
 * Unpack message TELDiagnostics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_tel_diagnostics_unpack(
    struct brightside_tel_diagnostics_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TELDiagnostics.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_tel_diagnostics_init(struct brightside_tel_diagnostics_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_tel_diagnostics_rtc_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_tel_diagnostics_rtc_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_tel_diagnostics_rtc_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_tel_diagnostics_gps_fix_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_tel_diagnostics_gps_fix_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_tel_diagnostics_gps_fix_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_tel_diagnostics_imu_fail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_tel_diagnostics_imu_fail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_tel_diagnostics_imu_fail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_tel_diagnostics_watchdog_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_tel_diagnostics_watchdog_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_tel_diagnostics_watchdog_reset_is_in_range(uint8_t value);

/**
 * Pack message MCBGithash.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_mcb_githash_pack(
    uint8_t *dst_p,
    const struct brightside_mcb_githash_t *src_p,
    size_t size);

/**
 * Unpack message MCBGithash.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_mcb_githash_unpack(
    struct brightside_mcb_githash_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCBGithash.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_mcb_githash_init(struct brightside_mcb_githash_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t brightside_mcb_githash_short_githash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mcb_githash_short_githash_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mcb_githash_short_githash_is_in_range(uint64_t value);

/**
 * Pack message AirOutCapTemp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_air_out_cap_temp_pack(
    uint8_t *dst_p,
    const struct brightside_air_out_cap_temp_t *src_p,
    size_t size);

/**
 * Unpack message AirOutCapTemp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_air_out_cap_temp_unpack(
    struct brightside_air_out_cap_temp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AirOutCapTemp.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_air_out_cap_temp_init(struct brightside_air_out_cap_temp_t *msg_p);

/**
 * Pack message ShockTravel.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_shock_travel_pack(
    uint8_t *dst_p,
    const struct brightside_shock_travel_t *src_p,
    size_t size);

/**
 * Unpack message ShockTravel.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_shock_travel_unpack(
    struct brightside_shock_travel_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ShockTravel.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_shock_travel_init(struct brightside_shock_travel_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_shock_travel_shock_travel1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_shock_travel_shock_travel1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_shock_travel_shock_travel1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_shock_travel_shock_travel2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_shock_travel_shock_travel2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_shock_travel_shock_travel2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_shock_travel_shock_travel3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_shock_travel_shock_travel3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_shock_travel_shock_travel3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_shock_travel_shock_travel4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_shock_travel_shock_travel4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_shock_travel_shock_travel4_is_in_range(uint16_t value);

/**
 * Pack message BrakePressureSteeringAngle.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_brake_pressure_steering_angle_pack(
    uint8_t *dst_p,
    const struct brightside_brake_pressure_steering_angle_t *src_p,
    size_t size);

/**
 * Unpack message BrakePressureSteeringAngle.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_brake_pressure_steering_angle_unpack(
    struct brightside_brake_pressure_steering_angle_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BrakePressureSteeringAngle.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_brake_pressure_steering_angle_init(struct brightside_brake_pressure_steering_angle_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_brake_pressure_steering_angle_brake_pressure1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_brake_pressure_steering_angle_brake_pressure1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_brake_pressure_steering_angle_brake_pressure1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_brake_pressure_steering_angle_brake_pressure2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_brake_pressure_steering_angle_brake_pressure2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_brake_pressure_steering_angle_brake_pressure2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_brake_pressure_steering_angle_brake_pressure3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_brake_pressure_steering_angle_brake_pressure3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_brake_pressure_steering_angle_brake_pressure3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t brightside_brake_pressure_steering_angle_steering_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_brake_pressure_steering_angle_steering_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_brake_pressure_steering_angle_steering_angle_is_in_range(uint16_t value);

/**
 * Pack message VDSDiagnostics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_vds_diagnostics_pack(
    uint8_t *dst_p,
    const struct brightside_vds_diagnostics_t *src_p,
    size_t size);

/**
 * Unpack message VDSDiagnostics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_vds_diagnostics_unpack(
    struct brightside_vds_diagnostics_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VDSDiagnostics.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_vds_diagnostics_init(struct brightside_vds_diagnostics_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_vds_diagnostics_iwdg_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_vds_diagnostics_iwdg_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_vds_diagnostics_iwdg_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_vds_diagnostics_dma_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_vds_diagnostics_dma_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_vds_diagnostics_dma_status_is_in_range(uint8_t value);

/**
 * Pack message MDIDiagnostics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int brightside_mdi_diagnostics_pack(
    uint8_t *dst_p,
    const struct brightside_mdi_diagnostics_t *src_p,
    size_t size);

/**
 * Unpack message MDIDiagnostics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int brightside_mdi_diagnostics_unpack(
    struct brightside_mdi_diagnostics_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MDIDiagnostics.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int brightside_mdi_diagnostics_init(struct brightside_mdi_diagnostics_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mdi_diagnostics_mcb_drive_cmd_timeout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mdi_diagnostics_mcb_drive_cmd_timeout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mdi_diagnostics_mcb_drive_cmd_timeout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mdi_diagnostics_direction_sent_to_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mdi_diagnostics_direction_sent_to_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mdi_diagnostics_direction_sent_to_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mdi_diagnostics_drive_mode_to_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mdi_diagnostics_drive_mode_to_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mdi_diagnostics_drive_mode_to_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t brightside_mdi_diagnostics_regen_sent_to_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double brightside_mdi_diagnostics_regen_sent_to_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool brightside_mdi_diagnostics_regen_sent_to_mc_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
